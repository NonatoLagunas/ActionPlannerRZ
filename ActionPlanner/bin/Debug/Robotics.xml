<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Robotics</name>
    </assembly>
    <members>
        <member name="T:Robotics.Utilities.Scanner">
            <summary>
            Provides methods for data parsing
            </summary>
        </member>
        <member name="M:Robotics.Utilities.Scanner.AdvanceToChar(System.Char,System.String,System.Int32@)">
            <summary>
            Advances the read header to the next occurrence of the specified char
            </summary>
            <param name="c">The char to find</param>
            <param name="input">The input string</param>
            <param name="cc">Read header</param>
            <returns>true if provided character c is found before the end of the string, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.AdvanceToChar(System.Char[],System.String,System.Int32@)">
            <summary>
            Advances the read header to the next occurrence of the specified chars
            </summary>
            <param name="c">The array of chars to find</param>
            <param name="input">The input string</param>
            <param name="cc">Read header</param>
            <returns>true if any of the provided characters in c is found before the end of the string, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.ReadChar(System.Char,System.String,System.Int32@)">
            <summary>
            Reads the char from input at cc index and compares to the provided char c. If match advances the read header cc
            </summary>
            <param name="c">The expected char to read</param>
            <param name="input">The input string</param>
            <param name="cc">Read header</param>
            <returns>true if provided character c matches the char at cc in input, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.ReadString(System.String,System.String,System.Int32@)">
            <summary>
            Reads the char from input at cc index and compares to the provided string. If match advances the read header cc,
            if does not match the read header cc is not modified.
            </summary>
            <param name="expected">The expected string to read. If the expected string is null or empty string
            an end of string is matched</param>
            <param name="input">The input string</param>
            <param name="cc">Read header</param>
            <returns>true if provided string matches the char at cc in input, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.SkipSpaces(System.String,System.Int32@)">
            <summary>
            Advances the read header until no spaces are found
            </summary>
            <param name="s">Input string</param>
            <param name="cc">Read header</param>
        </member>
        <member name="M:Robotics.Utilities.Scanner.XtractByte(System.String,System.Int32@,System.Byte@)">
            <summary>
            Extracts an unsigned 32 bit integer from the input string
            </summary>
            <param name="input">String from which the integer will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="value">When this method returns contains the id found in s if the extraction succeded, or 0 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid id was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.XtractSByte(System.String,System.Int32@,System.SByte@)">
            <summary>
            Extracts an 32 bit integer from the input string
            </summary>
            <param name="input">String from which the integer will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="value">When this method returns contains the id found in s if the extraction succeded, or 0 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid id was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.XtractUInt16(System.String,System.Int32@,System.UInt16@)">
            <summary>
            Extracts an unsigned 32 bit integer from the input string
            </summary>
            <param name="input">String from which the integer will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="value">When this method returns contains the id found in s if the extraction succeded, or 0 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid id was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.XtractInt16(System.String,System.Int32@,System.Int16@)">
            <summary>
            Extracts an 32 bit integer from the input string
            </summary>
            <param name="input">String from which the integer will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="value">When this method returns contains the id found in s if the extraction succeded, or 0 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid id was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.XtractUInt32(System.String,System.Int32@,System.UInt32@)">
            <summary>
            Extracts an unsigned 32 bit integer from the input string
            </summary>
            <param name="input">String from which the integer will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="value">When this method returns contains the id found in s if the extraction succeded, or 0 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid id was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.XtractDouble(System.String,System.Int32@,System.Double@)">
            <summary>
            Extracts the first double presition float found inside a string
            </summary>
            <param name="input">String from which the double presition float will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="value">When this method returns contains the first double presition float found in s if the extraction succeded, or zero if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid double presition float was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.XtractInt32(System.String,System.Int32@,System.Int32@)">
            <summary>
            Extracts an 32 bit integer from the input string
            </summary>
            <param name="input">String from which the integer will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="value">When this method returns contains the id found in s if the extraction succeded, or 0 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid id was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsAlNum(System.Char)">
            <summary>
            Indicates whether a ANSI character is letter or digit.
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is a letter or digit; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsAlpha(System.Char)">
            <summary>
            Indicates whether a ANSI character is letter.
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is a letter; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsLAlpha(System.Char)">
            <summary>
            Indicates whether a ANSI character is lower case letter.
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is an lower case letter; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsLAlNum(System.Char)">
            <summary>
            Indicates whether a ANSI character is lower case letter or digit.
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is an lower case letter or digit; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsNumeric(System.Char)">
            <summary>
            Indicates whether a ANSI character is digit.
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is a digit; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsSpace(System.Char)">
            <summary>
            Indicates whether a ANSI character is \f, \n, \r, \t, \v, or space
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is a space character; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsUAlpha(System.Char)">
            <summary>
            Indicates whether a ANSI character is upper case letter.
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is an upper case letter; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.Utilities.Scanner.IsUAlNum(System.Char)">
            <summary>
            Indicates whether a ANSI character is upper case letter or digit.
            </summary>
            <param name="c">A ASNI character</param>
            <returns>true if c is an upper case letter or digit; otherwise, false.</returns>
        </member>
        <member name="T:System.Net.Sockets.SocketTcpServerClientBase">
            <summary>
            Base class for SocketTcpClient and SocketTcpServer implementations
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpServerClientBase.DEFAULT_BUFFER_SIZE">
            <summary>
            Default buffer size
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpServerClientBase.bufferSize">
            <summary>
            Stores the size of the input buffer
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpServerClientBase.dlgDataReceived">
            <summary>
            Represents the dataReceived Method. Used for async callback
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpServerClientBase.port">
            <summary>
            Stores the connection port
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpServerClientBase.running">
            <summary>
            Indicates if the Server is started or the client is open
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServerClientBase.#ctor(System.Int32)">
            <summary>
            Initializes the variables of the base class
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServerClientBase.ParseReceivedData(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Parses data received trough socket spliting merged packets
            </summary>
            <param name="s">socket which received the data</param>
            <param name="data">Received data buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServerClientBase.BeginReceive(System.Net.Sockets.AsyncStateObject)">
            <summary>
            Begins a (safe) receive operation with a socket.
            If the operation fails, it retries automatically while the socket is connected
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServerClientBase.dataReceived(System.IAsyncResult)">
            <summary>
            Manages the data received async callback
            </summary>
            <param name="result">Result of async operation</param>
        </member>
        <member name="E:System.Net.Sockets.SocketTcpServerClientBase.DataReceived">
            <summary>
            Represents the method that will handle the DataReceived event
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServerClientBase.BufferSize">
            <summary>
            Gets or sets the size of the buffer for incoming/outgoing data
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServerClientBase.Port">
            <summary>
            Gets or sets the connection port for the socket.
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServerClientBase.Socket">
            <summary>
            Gets the underlying socket used for connection
            </summary>
        </member>
        <member name="T:Robotics.DataStructures.BinaryTreeNode`1">
            <summary>
            Represents a node of a binary tree
            </summary>
            <typeparam name="T">IComparable data type for the node</typeparam>
        </member>
        <member name="F:Robotics.DataStructures.BinaryTreeNode`1.value">
            <summary>
            Stores the object of the BinaryTreeNode instance
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinaryTreeNode`1.left">
            <summary>
            Stores the left child node of the BinaryTreeNode instance
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinaryTreeNode`1.right">
            <summary>
            Stores the left child node of the BinaryTreeNode instance
            </summary>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.#ctor(`0)">
            <summary>
            Creates a new instance of BinaryTreeNode
            </summary>
            <param name="value">Value to initialize the node with</param>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.#ctor(`0,Robotics.DataStructures.BinaryTreeNode{`0},Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Creates a new instance of BinaryTreeNode
            </summary>
            <param name="value">Value to initialize the node with</param>
            <param name="left">The left child node</param>
            <param name="right">The right child node</param>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.Equals(System.Object)">
            <summary>
            Tells if two BinaryTreeNode nodes are equal.
            Two nodes are equal if stores the same value and points to the same left and right nodes
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>true if obj is a BinaryTreeNode and both nodes are equal, false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.GetHashCode">
            <summary>
            Overridden. Returns the hash code for this instance.
            The value corresponds to the hash code of the value contained in the node.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.CompareTo(Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Compares this instance to a specified BinaryTreeNode and returns an indication of their relative values
            </summary>
            <param name="other">A BinaryTreeNode to compare</param>
            <returns>A signed number indicating the relative values of this instance and other</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.op_Explicit(Robotics.DataStructures.BinaryTreeNode{`0})~`0">
            <summary>
            Implicitly converts the node to it's value
            </summary>
            <param name="node">Node to convert</param>
            <returns>The value or object stored in the node</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.op_Equality(Robotics.DataStructures.BinaryTreeNode{`0},Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Tells if two BinaryTreeNode nodes are equal.
            Two nodes are equal if stores the same value
            </summary>
            <param name="a">BinaryTreeNode to compare</param>
            <param name="b">BinaryTreeNode to compare</param>
            <returns>true if the values of the nodes are equal. false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.op_Inequality(Robotics.DataStructures.BinaryTreeNode{`0},Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Tells if two BinaryTreeNode nodes are different.
            Two nodes are different if stores different values or points to different left or right nodes
            </summary>
            <param name="a">BinaryTreeNode to compare</param>
            <param name="b">BinaryTreeNode to compare</param>
            <returns>true if nodes are not equal. false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.op_GreaterThan(Robotics.DataStructures.BinaryTreeNode{`0},Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Tells if one BinaryTreeNode is greater than another BinaryTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinaryTreeNode to compare</param>
            <param name="b">BinaryTreeNode to compare</param>
            <returns>true if BinaryTreeNode a is greater than BinaryTreeNode b</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.op_GreaterThanOrEqual(Robotics.DataStructures.BinaryTreeNode{`0},Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Tells if one BinaryTreeNode is greater than or equal to another BinaryTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinaryTreeNode to compare</param>
            <param name="b">BinaryTreeNode to compare</param>
            <returns>true if BinaryTreeNode a is greater than or equal to BinaryTreeNode b</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.op_LessThan(Robotics.DataStructures.BinaryTreeNode{`0},Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Tells if one BinaryTreeNode is less than another BinaryTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinaryTreeNode to compare</param>
            <param name="b">BinaryTreeNode to compare</param>
            <returns>true if BinaryTreeNode a is less than BinaryTreeNode b</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinaryTreeNode`1.op_LessThanOrEqual(Robotics.DataStructures.BinaryTreeNode{`0},Robotics.DataStructures.BinaryTreeNode{`0})">
            <summary>
            Tells if one BinaryTreeNode is less than or equal to another BinaryTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinaryTreeNode to compare</param>
            <param name="b">BinaryTreeNode to compare</param>
            <returns>true if BinaryTreeNode a is less than or equal to BinaryTreeNode b</returns>
        </member>
        <member name="P:Robotics.DataStructures.BinaryTreeNode`1.Left">
            <summary>
            Gets or sets the left child node of the BinaryTreeNode instance
            If this value is changed, also the previous child BinaryTreeNode instance is updated
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinaryTreeNode`1.Right">
            <summary>
            Gets or sets the left child BinaryTreeNode of the BinaryTreeNode instance
            If this value is changed, also the previous child BinaryTreeNode instance is updated
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinaryTreeNode`1.Value">
            <summary>
            Gets or sets the object or value of the BinaryTreeNode instance
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.IFilter">
            <summary>
            Represents a Filter for the Pipes and Filters pattern
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.IFilter.FilterNext">
            <summary>
            Executes the Filter task over the data provided by the input pipe
            and writes the result to the output pipe.
            Is est, executes the operation: OutputPipe.Write(Filter(InputPipe.Read()));
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.IFilter.InputType">
            <summary>
            Gets the IFilter input data type.
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.IFilter.IsRunning">
            <summary>
            Gets a value indicating whether the IFilter is running asynchronously
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.IFilter.OutputType">
            <summary>
            Gets the IFilter output data type
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.IFilter.RunInBackground">
            <summary>
            Gets or sets a value indicating whether the IFilter object will execute
            or not in a background thread while running asynchronously
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.Filter`2">
            <summary>
            Severs as base class to implement a Filter
            </summary>
            <typeparam name="TInput">The input data type</typeparam>
            <typeparam name="TOutput">The output data type</typeparam>
        </member>
        <member name="F:Robotics.Paralelism.Filter`2.inputPipe">
            <summary>
            The pipe for data input
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.Filter`2.runInBackground">
            <summary>
            Indicates whether the Filter object will execute
            or not in a background thread while running asynchronously
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.Filter`2.running">
            <summary>
            Indicating whether the Filter is running asynchronously
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.Filter`2.oLock">
            <summary>
            Object used to synchronize the acces to several methods
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.Filter`2.outputPipe">
            <summary>
            The pipe for data output
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.Filter`2.#ctor">
            <summary>
            Initializes a new instance of Filter
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.Filter`2.FilterNext">
            <summary>
            Executes the Filter task over the data provided by the input pipe
            and writes the result to the output pipe.
            Is est, executes the operation: OutputPipe.Write(FilterTask(InputPipe.Read()));
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.Filter`2.FilterTask(`0)">
            <summary>
            When overriden in a derived task, executes the filter
            </summary>
            <param name="input">The input data for the filter</param>
            <returns>The output data generated by the filter</returns>
        </member>
        <member name="P:Robotics.Paralelism.Filter`2.InputPipe">
            <summary>
            Gets or sets the pipe for data input
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.Filter`2.InputType">
            <summary>
            Gets the pipe input data type
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.Filter`2.IsRunning">
            <summary>
            Gets a value indicating whether the Filter is running asynchronously
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.Filter`2.OutputPipe">
            <summary>
            Gets or sets the pipe for data output
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.Filter`2.OutputType">
            <summary>
            Gets the Filter output data type
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.Filter`2.RunInBackground">
            <summary>
            Gets or sets a value indicating whether the Filter object will execute
            or not in a background thread while running asynchronously
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.StateSpaceModel">
            <summary>
            Serves as base class for implement State Space Models
            dx = f(x, t, u)
            y  = f(x, t, u)
            Where:
            	x	Vector of states of the space model
            	t	Time
            	u	External signal
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.IStateSpaceModel">
            <summary>
            Represents a State Space Model
            dx = f(x, t, u)
            y  = f(x, t, u)
            Where:
            	x	Vector of states of the space model
            	t	Time
            	u	External signal
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.IStateSpaceModel.Derivative(System.Double)">
            <summary>
            Calculates the derivative of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the derivative will be calculated.</param>
            <returns>The derivative of the State Space Model</returns>
        </member>
        <member name="M:Robotics.Mathematics.IStateSpaceModel.Derivative(System.Double,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the derivative of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the derivative will be calculated.</param>
            <param name="signal">Signal vector used to calculate the derivative.</param>
            <returns>The derivative of the State Space Model</returns>
        </member>
        <member name="M:Robotics.Mathematics.IStateSpaceModel.Output(System.Double)">
            <summary>
            Calculates the output of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the output will be calculated.</param>
            <returns>The output of the State Space Model</returns>
        </member>
        <member name="M:Robotics.Mathematics.IStateSpaceModel.Output(System.Double,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the output of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the output will be calculated.</param>
            <param name="signal">Signal vector used to calculate the output.</param>
            <returns>The output of the State Space Model</returns>
        </member>
        <member name="P:Robotics.Mathematics.IStateSpaceModel.IsStable">
            <summary>
            Gets a value indicating if the State Space Model is stable
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.IStateSpaceModel.IsAsymptoticallyStable">
            <summary>
            Gets a value indicating if the State Space Model is asymptotically stable
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.IStateSpaceModel.State">
            <summary>
            Gets or sets the vector of states of the space model
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.StateSpaceModel.state">
            <summary>
            Vector of states of the space model
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.StateSpaceModel.Derivative(System.Double)">
            <summary>
            Calculates the derivative of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the derivative will be calculated.</param>
            <returns>The derivative of the State Space Model</returns>
        </member>
        <member name="M:Robotics.Mathematics.StateSpaceModel.Derivative(System.Double,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the derivative of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the derivative will be calculated.</param>
            <param name="signal">Signal vector used to calculate the derivative.</param>
            <returns>The derivative of the State Space Model</returns>
        </member>
        <member name="M:Robotics.Mathematics.StateSpaceModel.Output(System.Double)">
            <summary>
            Calculates the output of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the output will be calculated.</param>
            <returns>The output of the State Space Model</returns>
        </member>
        <member name="M:Robotics.Mathematics.StateSpaceModel.Output(System.Double,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the output of the State Space Model for a given time and input signal
            </summary>
            <param name="time">The time for which the output will be calculated.</param>
            <param name="signal">Signal vector used to calculate the output.</param>
            <returns>The output of the State Space Model</returns>
        </member>
        <member name="P:Robotics.Mathematics.StateSpaceModel.IsStable">
            <summary>
            Gets a value indicating if the State Space Model is stable
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.StateSpaceModel.IsAsymptoticallyStable">
            <summary>
            Gets a value indicating if the State Space Model is asymptotically stable
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.StateSpaceModel.State">
            <summary>
            Gets or sets the vector of states of the space model
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.LaserReading">
            <summary>
            Encapsulates data from a single reading of a Laser telemetric sensor device
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.ITelemetricReading">
            <summary>
            Represents a single reading from a telemetry device
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.ISensorReading`1">
            <summary>
            Represents a ISensor object read
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.ISensorReading`1.Sensor">
            <summary>
            ISensor object which generated this ISensorRead object
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.ISensorReading`1.Mistaken">
            <summary>
            Indicates if the reading was mistaken
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.ITelemetricReading.ObstacleDetected">
            <summary>
            Indicates if an obstacle was detected by this reading
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.ITelemetricReading.X">
            <summary>
            Gets the x-coordinate of the cartesian transform of this reading in meters.
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.ITelemetricReading.Y">
            <summary>
            Gets the y-coordinate of the cartesian transform of this reading in meters
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.angleDeg">
            <summary>
            Angle of the reading measured from the front of the lasser in DEGREES 
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.angleRad">
            <summary>
            Angle of the reading measured from the front of the lasser in RADIANS
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.distanceMM">
            <summary>
            Distance between the lasser and the closets object in MILLIMETERS
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.distance">
            <summary>
            Distance between the lasser and the closets object in METERS
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.err">
            <summary>
            Indicates if the reading is erroneous
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.errorCode">
            <summary>
            The error code if any
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.laser">
            <summary>
            The Laser object source of this reading
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.obstacleDetected">
            <summary>
            Indicates if an obstacle was detected by this reading
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.step">
            <summary>
            Step at which reading was taken
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.x">
            <summary>
            The x-coordinate of the cartesian transform of this reading
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserReading.y">
            <summary>
            The y-coordinate of the cartesian transform of this reading
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserReading.#ctor(Robotics.HAL.Sensors.Telemetric.Laser,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the LaserReading class
            </summary>
            <param name="laser">The Laser object source of this reading</param>
            <param name="angle">Relative angle in radians of the reading measured from the front of the laser</param>
            <param name="distance">Distance in meters to the closest object</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserReading.#ctor(Robotics.HAL.Sensors.Telemetric.Laser,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the LaserReading class
            </summary>
            <param name="laser">The Laser object source of this reading</param>
            <param name="angle">Relative angle in radians of the reading measured from the front of the laser</param>
            <param name="distance">Distance in meters to the closest object</param>
            <param name="mistaken">Specifies if the reading is mistaken</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserReading.#ctor(Robotics.HAL.Sensors.Telemetric.Laser,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the LaserReading class
            </summary>
            <param name="laser">The Laser object source of this reading</param>
            <param name="step">Step at whick lecture was taken</param>
            <param name="angle">Relative angle in radians of the reading measured from the front of the laser</param>
            <param name="distance">Distance in meters to the closest object</param>
            <param name="mistaken">Specifies if the reading is mistaken</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserReading.#ctor(Robotics.HAL.Sensors.Telemetric.Laser,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the LaserReading class
            </summary>
            <param name="laser">The Laser object source of this reading</param>
            <param name="step">Step at whick lecture was taken</param>
            <param name="angle">Relative angle in radians of the reading measured from the front of the laser</param>
            <param name="distance">Distance in meters to the closest object</param>
            <param name="errorCode">Specifies the error code of the lecture. A value of -1 means no error</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserReading.ToString">
            <summary>
            Returns a String that represents the current Object. (Inherited from Object.)
            </summary>
            <returns>A String that represents the current Object</returns>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.Angle">
            <summary>
            Gets the angle of the reading measured from the front of the lasser in RADIANS
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.AngleDegrees">
            <summary>
            Gets the angle of the reading measured from the front of the lasser in DEGREES
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.Distance">
            <summary>
            Gets the distance between the lasser and the closets object in METERS
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.DistanceMillimeters">
            <summary>
            Distance between the lasser and the closets object in millimeters
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.Mistaken">
            <summary>
            Tells if the reading is mistaken
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.ObstacleDetected">
            <summary>
            Flag that indicates if an obstacle was detected by this reading
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.Sensor">
            <summary>
            Gets the Laser object source of this measurement
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.Robotics#HAL#Sensors#ISensorReading{Robotics#HAL#Sensors#Telemetric#ITelemetricSensor}#Sensor">
            <summary>
            Gets the ITelemetricSensor object source of this measurement
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.X">
            <summary>
            Gets the x-coordinate of the cartesian transform of this reading in meters
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserReading.Y">
            <summary>
            Gets the y-coordinate of the cartesian transform of this reading in meters
            </summary>
        </member>
        <member name="T:Robotics.Controls.IdBox">
            <summary>
            Implements the basic functionality required by a spin box (also known as an up-down control)modified for use with numeric Id
            </summary>
        </member>
        <member name="M:Robotics.Controls.IdBox.#ctor">
            <summary>
            Initializes a new instance of the IdBox class.
            </summary>
        </member>
        <member name="M:Robotics.Controls.IdBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event. 
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Robotics.Controls.IdBox.UpdateEditText">
            <summary>
            When overridden in a derived class, updates the text displayed in the spin box (also known as an up-down control).
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable">
            <summary>
            Gets access to an ARRAY OF LONG INTEGERS variable stored in the Blackboard
            </summary>
        </member>
        <member name="T:Robotics.API.SharedVariable`1">
            <summary>
            Gets access to a variable stored in the Blackboard
            </summary>
            <typeparam name="T">The type of data stored in the shared variable</typeparam>
        </member>
        <member name="T:Robotics.API.SharedVariable">
            <summary>
            Gets access to a variable stored in the Blackboard
            </summary>
        </member>
        <member name="T:Robotics.API.ISharedVariableInfo">
            <summary>
            Encapsulates shared variable information
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableInfo.AllowedWriters">
            <summary>
            Gets an array containing the list of all module names with write permission on the shared variable.
            A null value represents that all modules may write the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableInfo.CreationTime">
            <summary>
            Gets the creation time of the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableInfo.IsArray">
            <summary>
            Gets a value indicating if the variable is an array
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableInfo.Length">
            <summary>
            If the variable is an array gets the length of the array, else returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableInfo.Name">
            <summary>
            Gets the name of the SharedVariable
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableInfo.Subscriptions">
            <summary>
            Gets the information about the subscriptions to the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableInfo.TypeName">
            <summary>
            Gets the global name of the type of the SharedVariable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable.allowedWriters">
            <summary>
            An array containing the list of all module names with write permission on the shared variable.
            A null value represents that all modules may write the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable.creationTime">
            <summary>
            The creation time of the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable.subscriptions">
            <summary>
            Information about the subscriptions to the shared variable
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable.GetCachedValue">
            <summary>
            Gets the value of the the SharedVariable stored in cache
            </summary>
            <returns>The cached value of the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.GetCachedValue``1">
            <summary>
            Gets the value of the the SharedVariable stored in cache
            </summary>
            <returns>The cached value of the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.Initialize">
            <summary>
            Connects to the remote variable. If the remote variable does not exist it is created.
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable.IsValidUpdateData(System.String,System.Boolean,System.Int32,System.String,System.Exception@)">
            <summary>
            Gets a value indicating if the data provided from the blackboard for an update is valid
            </summary>
            <param name="variableType">The type of the variable specified by blackboard</param>
            <param name="variableName">The name of the variable specified by blackboard</param>
            <param name="isArray">Value that indicates if the variable specified by blackboard is an array</param>
            <param name="arraySize">The size of the variable specified by blackboard if it is an array</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if provided data is suitable for update the variable, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.Read``1">
            <summary>
            Gets the value stored in the blackboard for the SharedVariable represented by this object
            </summary>
            <returns>The value stored in the blackboard for the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.OnReportReceived(Robotics.API.SharedVariableReport)">
            <summary>
            Rises the ReportReceived event
            </summary>
            <param name="report">The report data received from Blackboard</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.OnUpdated">
            <summary>
            Rises the Updated event
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <remarks>The type of report is set to Notify and the type of subscription is set to WriteOthers</remarks>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe(Robotics.API.SharedVariableReportType)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="reportType">The type of report. This afects the event that will be raised when the variable is written</param>
            <remarks>The type of subscription is set to WriteOthers</remarks>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe(Robotics.API.SharedVariableSubscriptionType)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="subscriptionType">The type of subscription</param>
            <remarks>The type of report is set to Notify and the type of subscription is set to WriteOthers</remarks>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe(Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="reportType">The type of report. This afects the event that will be raised when the variable is written</param>
            <param name="subscriptionType">The type of subscription</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe(Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.Int32)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="reportType">The type of report. This afects the event that will be raised when the variable is written</param>
            <param name="subscriptionType">The type of subscription</param>
            <param name="attempts">The number of subscription attempts to perform</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe(Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.TimeSpan)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="reportType">The type of report. This afects the event that will be raised when the variable is written</param>
            <param name="subscriptionType">The type of subscription</param>
            <param name="timeout">The timeout for each subscription attempt</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe(Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.TimeSpan,System.Int32)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="reportType">The type of report. This afects the event that will be raised when the variable is written</param>
            <param name="subscriptionType">The type of subscription</param>
            <param name="timeout">The timeout for each subscription attempt</param>
            <param name="attempts">The number of subscription attempts to perform</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.Subscribe(Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.Int32,System.Int32)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="reportType">The type of report. This afects the event that will be raised when the variable is written</param>
            <param name="subscriptionType">The type of subscription</param>
            <param name="timeout">The timeout for each subscription attempt in milliseconds</param>
            <param name="attempts">The number of subscription attempts to perform</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.Unsubscribe">
            <summary>
            Request the blackbard to stop notifying each time the shared variable is written
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable.Unsubscribe(System.Int32)">
            <summary>
            Request the blackbard to stop notifying each time the shared variable is written
            </summary>
            <param name="timeout">The timeout for each unsubscription attempt (of 3) in milliseconds</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.Unsubscribe(System.Int32,System.Int32)">
            <summary>
            Request the blackbard to stop notifying each time the shared variable is written
            </summary>
            <param name="timeout">The timeout for each unsubscription attempt in milliseconds</param>
            <param name="attempts">The number of unsubscription attempts to perform</param>
        </member>
        <member name="M:Robotics.API.SharedVariable.ToString">
            <summary>
            Returns the string representation of the shared variable
            </summary>
            <returns>The string representation of the shared variable</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.Update(System.String,System.Boolean,System.Int32,System.String,System.String,System.Exception@)">
            <summary>
            Updates the SharedVariable object with data provided from the blackboard
            </summary>
            <param name="variableType">The type of the variable specified by blackboard</param>
            <param name="variableName">The name of the variable specified by blackboard</param>
            <param name="isArray">Value that indicates if the variable specified by blackboard is an array</param>
            <param name="arraySize">The size of the variable specified by blackboard if it is an array</param>
            <param name="data">The serialized data stored in blackboard</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.UpdateBufferedData">
            <summary>
            Performs a read operation and updates the data stored in cache
            </summary>
            <returns>true if the the data acquisition operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.UpdateBufferedData(System.Int32)">
            <summary>
            Performs a read operation and updates the data stored in cache
            </summary>
            <param name="timeout">The amout of time to wait for a read confirmation from blackboard</param>
            <returns>true if the the data acquisition operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.Update(Robotics.API.SharedVariableReport,System.Exception@)">
            <summary>
            Updates the SharedVariable object with data provided from the blackboard due to a subscription
            </summary>
            <param name="svReport">The report which contains the information for update</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.Update(System.String,System.Boolean,System.Int32,System.String,System.String,Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.String,System.Exception@)">
            <summary>
            Updates the SharedVariable object with data provided from the blackboard due to a subscription
            </summary>
            <param name="variableType">The type of the variable specified by blackboard</param>
            <param name="variableName">The name of the variable specified by blackboard</param>
            <param name="isArray">Value that indicates if the variable specified by blackboard is an array</param>
            <param name="arraySize">The size of the variable specified by blackboard if it is an array</param>
            <param name="sData">The serialized data contained in the report</param>
            <param name="reportType">The type of report</param>
            <param name="subscriptionType">The type of subscription</param>
            <param name="writer">The name of the module which performed the write/create operation</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.UpdateInfo">
            <summary>
            Queries the Blackboard for updated information (writers and subscriptions) about the Shared Variable
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable.UpdateInfo(System.Int32,System.Exception@)">
            <summary>
            Queries the Blackboard for updated information (writers and subscriptions) about the Shared Variable
            </summary>
            <param name="timeout">The amout of time to wait for a stat confirmation from blackboard</param>
            <param name="ex">When this method returns contains null if the variable information was
            updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if the information was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.UpdateValue(System.String,System.Exception@)">
            <summary>
            Deserializes and updates the value of the shared variable
            </summary>
            <param name="serializedData">The serialized data containing the new value for the shared variable</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.UpdateValue(System.String,System.String,System.Exception@)">
            <summary>
            Deserializes and updates the value of the shared variable
            </summary>
            <param name="serializedData">The serialized data containing the new value for the shared variable</param>
            <param name="writerModuleName">The name of the module which performs the write operation</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable.Write``1(``0)">
            <summary>
            Writes the provided value to the blackboard variable asociated to this SharedVariable object
            </summary>
            <param name="value">The value to write in to the blackboard shared variable</param>
        </member>
        <member name="F:Robotics.API.SharedVariable.identifierExpression">
            <summary>
            Expression used to extract identifiers from variables
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable.dataExpression">
            <summary>
            Expression used to extract data from variables
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable.RxSharedVariableNotificationValidator">
            <summary>
            Regular expression used to validate notifications from blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable.ParseResponse(Robotics.API.Response,System.String@,System.Boolean@,System.Int32@,System.String@,System.String@)">
            <summary>
            Decodes the data contained in a received response. A return value indicates whether the operation succeeded
            </summary>
            <param name="response">Response which contains the data to parse</param>
            <param name="variableType">When this method returns contains the type of the variable coded in the response parameters if the conversion succeeded, or null if the conversion failed.</param>
            <param name="isArray">When this method returns is set to true if the conversion succeded and the variable coded in the response parameters is an array, false otherwise.</param>
            <param name="arrayLength">When this method returns contains the size of the array if the conversion succeded and the variable coded in the response parameters is an array, -1 otherwise.</param>
            <param name="variableName">When this method returns contains the name of the variable coded in the response parameters if the conversion succeeded, or null if the conversion failed.</param>
            <param name="variableData">When this method returns contains the content of the variable coded in the response parameters if the conversion succeeded, or the null if the conversion failed.</param>
            <returns>true if the the data extraction succeeded, false otherwise</returns>
        </member>
        <member name="P:Robotics.API.SharedVariable.AllowedWriters">
            <summary>
            Gets an array containing the list of all module names with write permission on the shared variable.
            A null value represents that all modules may write the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.CommandManager">
            <summary>
            Gets the CommandManager object used to communicate with the Blackboard
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.CreationTime">
            <summary>
            Gets the creation time of the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.Initialized">
            <summary>
            Gets a value indicating if the variable has been initialized (created or readed from blackboard)
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.IsArray">
            <summary>
            Gets a value indicating if the variable is an array
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.LastUpdated">
            <summary>
            Gets the local time when the value of the shared variable was last updated
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.LastWriter">
            <summary>
            Gets the name of the module wich performed the last write operation over the shared variable if known,
            otherwise it returns null.
            This property returns always null if there is not a subscription to the shared variable.
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.Length">
            <summary>
            If the variable is an array gets the length of the array, else returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.Name">
            <summary>
            Gets the name of the SharedVariable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.Subscriptions">
            <summary>
            Gets the information about the subscriptions to the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.SubscriptionReportType">
            <summary>
            Gets the report type for the current subscription to the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.SubscriptionType">
            <summary>
            Gets the subscription type for the current subscription to the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.TypeName">
            <summary>
            Gets the global name of the type of the SharedVariable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable.Type">
            <summary>
            Gets the type of the SharedVariable
            </summary>
        </member>
        <member name="E:Robotics.API.SharedVariable.ReportReceived">
            <summary>
            Occurs when a report is received from the blacboard due to a subscription
            </summary>
        </member>
        <member name="E:Robotics.API.SharedVariable.Updated">
            <summary>
            Occurs when the value of the shared variable is updated
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.previousBufferedData">
            <summary>
            Stores a copy of the last bufferedData
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.bufferedData">
            <summary>
            Stores a copy of the last readed, received or writed value of the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.commandManager">
            <summary>
            The CommandManager object used to communicate with the Blackboard
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.defaultValue">
            <summary>
            The default value provided in constructor for further initialization
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.deserializer">
            <summary>
            Represents the deserialization function
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.initialized">
            <summary>
            Indicates if the variable has been initialized
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.lastUpdate">
            <summary>
            The local time when the value of the shared variable was last updated
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.lastWriter">
            <summary>
            The name of the module wich performed the last write operation over the shared variable if known,
            otherwise it returns null.
            This property returns always null if there is not a subscription to the shared variable.
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.serializer">
            <summary>
            Represents the serialization function
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.subscriptionReportType">
            <summary>
            The report type for the current subscription to the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.subscriptionType">
            <summary>
            The subscription type for the current subscription to the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariable`1.variableName">
            <summary>
            The name of the variable in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of SharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.#ctor(Robotics.API.CommandManager,System.String,`0,System.Boolean)">
            <summary>
            Initializes a new instance of SharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of SharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of SharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Deserialize(System.String,`0@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Deserialize(System.String)">
            <summary>
            Deserializes the provided data to an object of the type of the variable
            </summary>
            <param name="data">The data to be deserialized</param>
            <returns>The object obtained from deserialization</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.GetCachedValue">
            <summary>
            Gets the value of the the SharedVariable stored in cache
            </summary>
            <returns>The cached value of the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.GetCachedValue``1">
            <summary>
            Gets the value of the the SharedVariable stored in cache
            </summary>
            <returns>The cached value of the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.GetUpdatedSerializedData(System.Int32,System.String@,System.Exception@)">
            <summary>
            Request the updated value of the variable from the Blackboard
            </summary>
            <param name="timeout">The amout of time to wait for a read confirmation from blackboard</param>
            <param name="serializedData">When this method returns contains the serialized value of the variable if it was fetched successfully, null otherwise</param>
            <param name="ex">When this method returns contains null if the new variable data was fetched successfully, or the exception to be thrown if the fetch failed</param>
            <returns>true if the new variable data was fetched successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Initialize">
            <summary>
            Connects to the remote variable. If the remote variable does not exist it is created.
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Initialize(`0)">
            <summary>
            Connects to the remote variable. If the remote variable does not exist it is created.
            </summary>
            <param name="value">The value to initialize the variable with if it does not exists</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.OnValueChanged(Robotics.API.SharedVariableSubscriptionReport{`0})">
            <summary>
            Raises the ValueChanged event
            </summary>
            <param name="report">The SharedVariableSubscriptionReport object which contain the report information</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.OnWriteNotification(Robotics.API.SharedVariableSubscriptionReport{`0})">
            <summary>
            Raises the WriteNotification event
            </summary>
            <param name="report">The SharedVariableSubscriptionReport object which contain the report information</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Read">
            <summary>
            Gets the value stored in the blackboard for the SharedVariable represented by this object
            </summary>
            <returns>The value stored in the blackboard for the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Read(System.Int32)">
            <summary>
            Gets the value stored in the blackboard for the SharedVariable represented by this object
            </summary>
            <param name="timeout">The amout of time to wait for a read confirmation from blackboard</param>
            <returns>The value stored in the blackboard for the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Read(`0@,System.Int32,System.Exception@)">
            <summary>
            Gets the value stored in the blackboard for the SharedVariable represented by this object. A return value indicates whether the acquisition operation succeeded
            </summary>
            <param name="value">When this method returns, contains the value stored in the blackboard for the SharedVariable represented by this object, if the conversion succeeded, or the default value of the type if the conversion failed.</param>
            <param name="timeout">The amout of time to wait for a read confirmation from blackboard</param>
            <param name="ex">When this method returns false contains the exception generated</param>
            <returns>true if the the data acquisition operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Read``1">
            <summary>
            Gets the value stored in the blackboard for the SharedVariable represented by this object
            </summary>
            <returns>The value stored in the blackboard for the SharedVariable represented by this object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.SendUpdatedSerializedData(System.Int32,`0,System.Exception@)">
            <summary>
            Request the update of the value of a variable in the Blackboard
            </summary>
            <param name="timeout">The amout of time to wait for a write confirmation from blackboard</param>
            <param name="value">The new value for the variable</param>
            <param name="ex">When this method returns contains null if the new variable data was written successfully, or the exception to be thrown if the write failed</param>
            <returns>true if the new variable data was written successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Serialize(`0,System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Serialize(`0)">
            <summary>
            Serializes the provided object to an array of bytes
            </summary>
            <param name="value">The object to be serialized</param>
            <returns>The array of bytes obtained from serialization</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Subscribe(Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.Int32,System.Int32)">
            <summary>
            Request the blackbard to notify each time the shared variable is written
            </summary>
            <param name="reportType">The type of report. This afects the event that will be raised when the variable is written</param>
            <param name="subscriptionType">The type of subscription</param>
            <param name="timeout">The timeout for each subscription attempt in milliseconds</param>
            <param name="attempts">The number of subscription attempts to perform</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.ToString">
            <summary>
            Returns the string representation of the shared variable
            </summary>
            <returns>The string representation of the shared variable</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.TryRead(`0@)">
            <summary>
            Gets the value stored in the blackboard for the SharedVariable represented by this object. A return value indicates whether the acquisition operation succeeded
            </summary>
            <param name="value">When this method returns, contains the value stored in the blackboard for the SharedVariable represented by this object, if the conversion succeeded, or the default value of the type if the conversion failed.</param>
            <returns>true if the the data acquisition operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.TryRead(`0@,System.Int32)">
            <summary>
            Gets the value stored in the blackboard for the SharedVariable represented by this object. A return value indicates whether the acquisition operation succeeded
            </summary>
            <param name="value">When this method returns, contains the value stored in the blackboard for the SharedVariable represented by this object, if the conversion succeeded, or the default value of the type if the conversion failed.</param>
            <param name="timeout">The amout of time to wait for a read confirmation from blackboard</param>
            <returns>true if the the data acquisition operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.TryWrite(`0)">
            <summary>
            Writes the provided value to the blackboard variable asociated to this SharedVariable object. A return value indicates whether the write operation succeeded
            </summary>
            <param name="value">The value to write in to the blackboard shared variable</param>
            <returns>true if the the data write operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.TryWrite(`0,System.Int32)">
            <summary>
            Writes the provided value to the blackboard variable asociated to this SharedVariable object. A return value indicates whether the write operation succeeded
            </summary>
            <param name="value">The value to write in to the blackboard shared variable</param>
            <param name="timeout">The amout of time to wait for a write confirmation from blackboard. Use Zero to write without wait for confirmation. Use -1 to wait indefinitely</param>
            <returns>true if the the data write operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Unsubscribe(System.Int32,System.Int32)">
            <summary>
            Request the blackbard to stop notifying each time the shared variable is written
            </summary>
            <param name="timeout">The timeout for each unsubscription attempt in milliseconds</param>
            <param name="attempts">The number of unsubscription attempts to perform</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Update(Robotics.API.SharedVariableReport,System.Exception@)">
            <summary>
            Updates the SharedVariable object with data provided from the blackboard due to a subscription
            </summary>
            <param name="svReport">The report which contains the information for update</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.UpdateValue(System.String,System.String,System.Exception@)">
            <summary>
            Deserializes and updates the value of the shared variable
            </summary>
            <param name="serializedData">The serialized data containing the new value for the shared variable</param>
            <param name="writerModuleName">The name of the module which performs the write operation</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.UpdateBufferedData(System.Int32)">
            <summary>
            Performs a read operation and updates the data stored in cache
            </summary>
            <param name="timeout">The amout of time to wait for a read confirmation from blackboard</param>
            <returns>true if the the data acquisition operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.UpdateValue(System.String,`0@,System.Exception@)">
            <summary>
            Deserializes and updates the value of the shared variable
            </summary>
            <param name="serializedData">The serialized data containing the new value for the shared variable</param>
            <param name="value">When this method returns contains the new value for the shared variable if the variable was updated successfully, or the default value for T if the update failed</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.UpdateValue(System.String,System.String,`0@,System.Exception@)">
            <summary>
            Deserializes and updates the value of the shared variable
            </summary>
            <param name="serializedData">The serialized data containing the new value for the shared variable</param>
            <param name="writerModuleName">The name of the module which performs the write operation</param>
            <param name="value">When this method returns contains the new value for the shared variable if the variable was updated successfully, or the default value for T if the update failed</param>
            <param name="ex">When this method returns contains null if the variable was updated successfully, or the exception to be thrown if the update failed</param>
            <returns>true if variable was updated successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Write(`0)">
            <summary>
            Writes the provided value to the blackboard variable asociated to this SharedVariable object
            </summary>
            <param name="value">The value to write in to the blackboard shared variable</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Write(`0,System.Int32)">
            <summary>
            Writes the provided value to the blackboard variable asociated to this SharedVariable object
            </summary>
            <param name="value">The value to write in to the blackboard shared variable</param>
            <param name="timeout">The amout of time to wait for a write confirmation from blackboard. Use Zero to write without wait for confirmation. Use -1 to wait indefinitely</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Write(`0,System.Int32,System.Exception@)">
            <summary>
            Writes the provided value to the blackboard variable asociated to this SharedVariable object. A return value indicates whether the write operation succeeded
            </summary>
            <param name="value">The value to write in to the blackboard shared variable</param>
            <param name="timeout">The amout of time to wait for a write confirmation from blackboard</param>
            <param name="ex">When this method returns false contains the exception generated</param>
            <returns>true if the the data write operation succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.Write``1(``0)">
            <summary>
            Writes the provided value to the blackboard variable asociated to this SharedVariable object
            </summary>
            <param name="value">The value to write in to the blackboard shared variable</param>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.XtractData(Robotics.API.Response,System.String@,System.Exception@)">
            <summary>
            Extracts the variable data from a response
            </summary>
            <param name="response">Response which contains the data to extract</param>
            <param name="variableData">When this method returns contains the content of the variable coded in the response parameters if the conversion succeeded, or the null if the conversion failed.</param>
            <param name="ex">Exeption to be thrown when extraction fails</param>
            <returns>true if extraction succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariable`1.op_Explicit(Robotics.API.SharedVariable{`0})~`0">
            <summary>
            Converts a Shared Variable to the data type that it represents, returning the cached value
            </summary>
            <param name="variable">The shared variable from where get the value</param>
            <returns>The cached value in the hared variable object</returns>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.BufferedData">
            <summary>
            Gets a buffered copy of the last readed, received or writed value of the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.CommandManager">
            <summary>
            Gets the CommandManager object used to communicate with the Blackboard
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.Deserializer">
            <summary>
            Gets or sets the deserialization function
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.Initialized">
            <summary>
            Gets a value indicating if the variable has been initialized (created or readed from blackboard)
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.IsArray">
            <summary>
            Gets a value indicating if the variable is an array
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.LastUpdated">
            <summary>
            Gets the local time when the value of the shared variable was last updated
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.LastWriter">
            <summary>
            Gets the name of the module wich performed the last write operation over the shared variable if known,
            otherwise it returns null.
            This property returns always null if there is not a subscription to the shared variable.
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.Length">
            <summary>
            If the variable is an array gets the length of the array, else returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.Name">
            <summary>
            Gets the name of the SharedVariable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.Serializer">
            <summary>
            Gets or sets the serialization function
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.SubscriptionReportType">
            <summary>
            Gets the report type for the current subscription to the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.SubscriptionType">
            <summary>
            Gets the subscription type for the current subscription to the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.Type">
            <summary>
            Gets the type of the SharedVariable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.TypeName">
            <summary>
            Gets the global name of the type of the SharedVariable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariable`1.Value">
            <summary>
            Gets or sets the value of a shared variable
            </summary>
        </member>
        <member name="E:Robotics.API.SharedVariable`1.ValueChanged">
            <summary>
            Occurs when the value of the shared variable changes and new value is received
            </summary>
        </member>
        <member name="E:Robotics.API.SharedVariable`1.WriteNotification">
            <summary>
            Occurs when the value of the shared variable changes and a notification is received
            </summary>
        </member>
        <member name="F:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.SplitChars">
            <summary>
            Chars used to split strings
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Int64[],System.Boolean)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.#ctor(System.String,System.Int64[])">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.Deserialize(System.String,System.Int64[]@)">
            <summary>
            Deserializes an array of longs from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="values">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.Serialize(System.Int64[],System.String@)">
            <summary>
            Serializes the provided object to a string
            </summary>
            <param name="values">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.IsArray">
            <summary>
            Returns true
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.LongArraySharedVariable.TypeName">
            <summary>
            Returns "long"
            </summary>
        </member>
        <member name="T:Robotics.API.SharedVariableInfo">
            <summary>
            Encapsulates shared variable information
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableInfo.allowedWriters">
            <summary>
            An array containing the list of all module names with write permission on the shared variable.
            A null value represents that all modules may write the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableInfo.creationTime">
            <summary>
            The creation time of the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableInfo.isArray">
            <summary>
            Indicaties if the variable is an array
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableInfo.length">
            <summary>
            If the variable is an array gets the length of the array, else returns -1
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableInfo.name">
            <summary>
            The name of the SharedVariable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableInfo.subscriptions">
            <summary>
            Information about the subscriptions to the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableInfo.typeName">
            <summary>
            The global name of the type of the SharedVariable
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.#ctor">
            <summary>
            Initializes a new instance of SharedVariableInfo.
            This constructor is provided for serialization purposes only.
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of SharedVariableInfo
            </summary>
            <param name="typeName">The global name of the type of the SharedVariable</param>
            <param name="name">The name of the SharedVariable</param>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of SharedVariableInfo
            </summary>
            <param name="typeName">The global name of the type of the SharedVariable</param>
            <param name="name">The name of the SharedVariable</param>
            <param name="allowedWriters">An array containing the list of all module names with write 
            permission on the shared variable. A null value represents that all modules may write the shared variable</param>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of SharedVariableInfo
            </summary>
            <param name="typeName">The global name of the type of the SharedVariable</param>
            <param name="name">The name of the SharedVariable</param>
            <param name="isArray">Indicaties if the variable is an array</param>
            <param name="length">If the variable is an array gets the length of the array, else returns -1</param>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.#ctor(System.String,System.String,System.Boolean,System.Int32,System.String[])">
            <summary>
            Initializes a new instance of SharedVariableInfo
            </summary>
            <param name="typeName">The global name of the type of the SharedVariable</param>
            <param name="name">The name of the SharedVariable</param>
            <param name="isArray">Indicaties if the variable is an array</param>
            <param name="length">If the variable is an array gets the length of the array, else returns -1</param>
            <param name="allowedWriters">An array containing the list of all module names with write 
            permission on the shared variable. A null value represents that all modules may write the shared variable</param>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.Deserialize(System.String,Robotics.API.SharedVariableInfo@)">
            <summary>
            Deserializes an ISharedVariableInfo object from a string
            </summary>
            <param name="serialized">String that contains the data to be deserialized</param>
            <param name="info">When this method returns contains a ISharedVariableInfo object created from the
            information provided in the input string if the serialization succeded,
            or false if the serialization failed</param>
            <returns>true if the deserialization succeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.Deserialize(System.String,Robotics.API.SharedVariableInfo@,System.Exception@)">
            <summary>
            Deserializes an ISharedVariableInfo object from a string
            </summary>
            <param name="serialized">String that contains the data to be deserialized</param>
            <param name="info">When this method returns contains a ISharedVariableInfo object created from the
            information provided in the input string if the serialization succeded,
            or false if the serialization failed</param>
            <param name="ex">When this method returns contains null if the variable information was deserialized
            successfully, or the exception to be thrown if the deserialization failed</param>
            <returns>true if the deserialization succeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.SharedVariableInfo.Serialize(Robotics.API.ISharedVariableInfo,System.String@)">
            <summary>
            Serializes an ISharedVariableInfo object to a string
            </summary>
            <param name="info">The ISharedVariableInfo object to serialize</param>
            <param name="serializedData">When this method returns contains the string representation of the
            object if the serialization succeded, or false if the serialization failed</param>
            <returns>true if the serialization succeded, false otherwise</returns>
        </member>
        <member name="P:Robotics.API.SharedVariableInfo.AllowedWriters">
            <summary>
            Gets or sets an array containing the list of all module names with write permission on the shared variable.
            A null value represents that all modules may write the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableInfo.CreationTime">
            <summary>
            Gets the creation time of the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableInfo.IsArray">
            <summary>
            Gets a value indicating if the variable is an array
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableInfo.Length">
            <summary>
            If the variable is an array gets the length of the array, else returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableInfo.Name">
            <summary>
            Gets the name of the SharedVariable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableInfo.Subscriptions">
            <summary>
            Gets or sets the information about the subscriptions to the shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableInfo.TypeName">
            <summary>
            Gets the global name of the type of the SharedVariable
            </summary>
        </member>
        <member name="T:Robotics.API.ICommandManager">
            <summary>
            Represents a command manager
            </summary>
        </member>
        <member name="T:Robotics.API.IMessageSource">
            <summary>
            Represents an object capable of generate or receive commands and manage its responses
            </summary>
        </member>
        <member name="M:Robotics.API.IMessageSource.ReceiveResponse(Robotics.API.Response)">
            <summary>
            Manages the Response objects for the Command objects generated by this IMessageSource object
            </summary>
            <param name="response">The Response for the Command generated by this IMessageSource object</param>
        </member>
        <member name="P:Robotics.API.IMessageSource.ModuleName">
            <summary>
            Gets the name of the module that this IMessageSource object interfaces.
            </summary>
        </member>
        <member name="M:Robotics.API.ICommandManager.EndSendCommand(System.IAsyncResult,Robotics.API.Response@)">
            <summary>
            Ends a pending asynchronous wait from response
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <param name="response">The response received during the asynchronous operation</param>
            <returns>true if a response has been received, false otherwise.</returns>
        </member>
        <member name="M:Robotics.API.ICommandManager.Start">
            <summary>
            Starts the Connection Manager
            </summary>
        </member>
        <member name="M:Robotics.API.ICommandManager.Stop">
            <summary>
            Stops the Connection Manager
            </summary>
        </member>
        <member name="M:Robotics.API.ICommandManager.BeginCommandExecution(Robotics.API.Command)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="command">The Command object to be executed</param>
        </member>
        <member name="M:Robotics.API.ICommandManager.BeginCommandExecution(Robotics.API.Command,Robotics.API.IMessageSource)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="command">The Command object to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
        </member>
        <member name="M:Robotics.API.ICommandManager.BeginCommandExecution(Robotics.API.Command,Robotics.API.IMessageSource,System.Object)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="command">The Command object to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
            <param name="metaData">The object which will be attached to the command and it's response as MetaData</param>
        </member>
        <member name="M:Robotics.API.ICommandManager.BeginCommandExecution(System.String,System.String)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="commandName">The name of the command to be executed</param>
            <param name="parameters">The parameters for the command to be executed</param>
        </member>
        <member name="M:Robotics.API.ICommandManager.BeginCommandExecution(System.String,System.String,Robotics.API.IMessageSource)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="commandName">The name of the command to be executed</param>
            <param name="parameters">The parameters for the command to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
        </member>
        <member name="M:Robotics.API.ICommandManager.BeginCommandExecution(System.String,System.String,Robotics.API.IMessageSource,System.Object)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="commandName">The name of the command to be executed</param>
            <param name="parameters">The parameters for the command to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
            <param name="metaData">The object which will be attached to the command and it's response as MetaData</param>
        </member>
        <member name="P:Robotics.API.ICommandManager.AutoId">
            <summary>
            Gets or sets the Id for commands
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandManager.Busy">
            <summary>
            Gets or sets a value that indicates if the CommandManager is globaly busy.
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandManager.ConnectionManager">
            <summary>
            Gets or sets the ConnectionManager object asociated to this CommandManager object
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandManager.CommandExecuters">
            <summary>
            Gets the collection of CommandExecuters contained within the CommandManager
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandManager.IsRunning">
            <summary>
            Gets a value indicating if this instance of CommandManager has been started
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandManager.ParallelSendAndWaitStarted">
            <summary>
            Gets a value indicating if a parallel send-and-wait operation has been started
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandManager.Ready">
            <summary>
            Gets or sets the ready state of the module that controls the command manager
            </summary>
        </member>
        <member name="T:Robotics.API.ConnectionManagerMode">
            <summary>
            Specifies how a ConnectionManager will manage connections
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManagerMode.Bidireactional">
            <summary>
            Works in bidirectional mode. Only one socket is used, same port for incomming an outgoing transmissions
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManagerMode.Unidirectional">
            <summary>
            Works in unirectional mode. Two sockets are used, one port for incomming transmissions and another for outgoing transmissions
            </summary>
        </member>
        <member name="T:Robotics.API.ConnectionManager">
            <summary>
            Manages TCP connections.
            </summary>
            <remarks>This class is incomplete and should not be used</remarks>
        </member>
        <member name="F:Robotics.API.ConnectionManager.DEFAULT_BUFFER_SIZE">
            <summary>
            The default buffer size for sockets
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.tcpServer">
            <summary>
            Tcp Socket Server for input data
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.tcpClient">
            <summary>
            Tcp Socket client for output data
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.remoteServerAddress">
            <summary>
            IP Address of the remote computer to connect using the socket client
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.portIn">
            <summary>
            Port for incoming data used by Tcp Server
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.portOut">
            <summary>
            Port for outgoing data used by Tcp Client
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.connectionThread">
            <summary>
            Async thread timer for socket autoconnections
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.dlgBidirectionalConnectionTask">
            <summary>
            Represents the BidirectionalConnectionTask method
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.dlgUnidirectionalConnectionTask">
            <summary>
            Represents the UnidirectionalConnectionTask method
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.running">
            <summary>
            Indicates if connection manager is running
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.autoReconnect">
            <summary>
            Flag that indicates if must restart server and reconnect client if disconnected
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.moduleName">
            <summary>
            Stores the module name
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.cmdMan">
            <summary>
            Command manager used to parse received data
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.lastReceivedPacket">
            <summary>
            Stores the last received packet
            </summary>
        </member>
        <member name="F:Robotics.API.ConnectionManager.outputSocketReceptionEnabled">
            <summary>
            Enables or disables the reception of data from the output socket
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor">
            <summary>
            Initializes a new instance of ConnectionManager in bidirectional mode. 
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of ConnectionManager in bidirectional mode. 
            </summary>
            <param name="port">The I/O port for the Tcp Server</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.Int32,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of ConnectionManager in bidirectional mode. 
            </summary>
            <param name="port">The I/O port for the Tcp Server</param>
            <param name="commandManager">The CommandManager object which will manage incoming data</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.Int32,System.Int32,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of ConnectionManager in unidirectional mode. 
            </summary>
            <param name="portIn">The input port for the Tcp Server</param>
            <param name="portOut">The output port for the Tcp client</param>
            <param name="remoteServerAddress">The IP Address of the remote tcp server where the client will connect to</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.Int32,System.Int32,System.Net.IPAddress,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of ConnectionManager in unidirectional mode. 
            </summary>
            <param name="portIn">The input port for the Tcp Server</param>
            <param name="portOut">The output port for the Tcp client</param>
            <param name="remoteServerAddress">The IP Address of the remote tcp server where the client will connect to</param>
            <param name="commandManager">The CommandManager object which will manage incoming data</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of ConnectionManager in bidirectional mode. 
            </summary>
            <param name="moduleName">The name of the module this object will manage</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of ConnectionManager in bidirectional mode. 
            </summary>
            <param name="moduleName">The name of the module this object will manage</param>
            <param name="port">The I/O port for the Tcp Server</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.String,System.Int32,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of ConnectionManager in bidirectional mode. 
            </summary>
            <param name="moduleName">The name of the module this object will manage</param>
            <param name="port">The I/O port for the Tcp Server</param>
            <param name="commandManager">The CommandManager object which will manage incoming data</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress)">
            <summary>
            Initializes a new instance of ConnectionManager in unidirectional mode. 
            </summary>
            <param name="moduleName">The name of the module this object will manage</param>
            <param name="portIn">The input port for the Tcp Server</param>
            <param name="portOut">The output port for the Tcp client</param>
            <param name="remoteServerAddress">The IP Address of the remote tcp server where the client will connect to</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.#ctor(System.String,System.Int32,System.Int32,System.Net.IPAddress,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of ConnectionManager in unidirectional mode. 
            </summary>
            <param name="moduleName">The name of the module this object will manage</param>
            <param name="portIn">The input port for the Tcp Server</param>
            <param name="portOut">The output port for the Tcp client</param>
            <param name="remoteServerAddress">The IP Address of the remote tcp server where the client will connect to</param>
            <param name="commandManager">The CommandManager object which will manage incoming data</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnClientConnected(System.Net.Sockets.Socket)">
            <summary>
            Raises the ClientConnected event
            </summary>
            <param name="s">Socket used for connection</param>
            <remarks>The OnClientConnected method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnClientConnected in a derived class, be sure to call the base class's OnClientConnected method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnClientDisconnected(System.Net.EndPoint)">
            <summary>
            Raises the ClientDisconnected event
            </summary>
            <param name="ep">Disconnection endpoint</param>
            <remarks>The OnClientDisconnected method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnClientDisconnected in a derived class, be sure to call the base class's OnClientDisconnected method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnConnected(System.Net.Sockets.Socket)">
            <summary>
            Raises the Connected event
            </summary>
            <param name="s">Socket used for connection</param>
            <remarks>The OnConnected method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnConnected in a derived class, be sure to call the base class's OnConnected method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnCommandSent(Robotics.API.Command)">
            <summary>
            Raises the CommandSent event
            </summary>
            <param name="command">The sent command</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnResponseSent(Robotics.API.Response)">
            <summary>
            Raises the ResponseSent event
            </summary>
            <param name="response">The sent response</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnDisconnected(System.Net.EndPoint)">
            <summary>
            Raises the Disconnected event
            </summary>
            <param name="ep">Disconnection endpoint</param>
            <remarks>The OnDisconnected method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnDisconnected in a derived class, be sure to call the base class's OnDisconnected method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnDataReceived(System.Net.Sockets.TcpPacket)">
            <summary>
            Raises the DataReceived event
            </summary>
            <param name="p">Received data</param>
            <remarks>The OnDataReceived method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnDataReceived in a derived class, be sure to call the base class's OnDataReceived method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnStatusChanged">
            <summary>
            Raises the StatusChanged event
            </summary>
            <remarks>The OnStatusChanged method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnStatusChanged in a derived class, be sure to call the base class's OnStatusChanged method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnStart">
            <summary>
            Raises the Started event
            </summary>
            <remarks>The OnStart method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnStart in a derived class, be sure to call the base class's OnStart method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.OnStop">
            <summary>
            Raises the Stopped event
            </summary>
            <remarks>The OnStop method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnStop in a derived class, be sure to call the base class's OnStop method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.ConnectionManager.Start">
            <summary>
            Starts the Connection Manager
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.Stop">
            <summary>
            Stops the Connection Manager
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.ConfigureConnectionThread">
            <summary>
            Configures the connection thread
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.StartConnectionThread">
            <summary>
            Starts the connection thread
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.BidirectionalConnectionTask">
            <summary>
            Starts the TCP server asynchronously
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.UnidirectionalConnectionTask">
            <summary>
            Starts the TCP server and TCP client asynchronously
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.ConfigureSockets">
            <summary>
            Creates and configures the sockets by setting the ports, address and Event Handlers
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.TerminateSockets">
            <summary>
            Stops all socket activity
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.Send(Robotics.API.Command)">
            <summary>
            Sends a Command
            </summary>
            <param name="command">Command to be sent</param>
            <returns>true if command was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.Send(Robotics.API.Response)">
            <summary>
            Sends a Response
            </summary>
            <param name="response">Response to be sent</param>
            <returns>true if response was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.clientSend(System.String)">
            <summary>
            Sends data through client socket
            </summary>
            <param name="s">String to send</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.serverSend(System.String)">
            <summary>
            Sends data through server socket
            </summary>
            <param name="s">String to send</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.serverSend(System.String,System.Net.IPEndPoint)">
            <summary>
            Sends data through server socket to specified endpoint
            </summary>
            <param name="s">String to send</param>\
            <param name="endPoint">Destination endpoint to snd data to</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.tcpSend(System.String)">
            <summary>
            Sends data through socket depending on the mode of the ConnectionManager
            </summary>
            <param name="s">String to send</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.SendToAllClients(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to all clients connected to the server
            </summary>
            <param name="buffer">The byte array to send</param>
            <param name="count">The offset in the byte array to begin sending</param>
            <param name="offset">The number of bytes to send</param>
            <returns>The number of clients to which the data was sent</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.SendToAllClients(System.String)">
            <summary>
            Sends data to all clients connected to the server
            </summary>
            <param name="s">The string to send</param>
            <returns>The number of clients to which the string was sent</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.SendTroughClient(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data through the tcp client
            </summary>
            <param name="buffer">The byte array to send</param>
            <param name="count">The offset in the byte array to begin sending</param>
            <param name="offset">The number of bytes to send</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.SendTroughClient(System.String)">
            <summary>
            Sends data through the tcp client
            </summary>
            <param name="s">The string to send</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.SendTo(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends data to the specified remote endpoint
            </summary>
            <param name="remoteEndPoint">The destination endpoint</param>
            <param name="buffer">The byte array to send</param>
            <param name="count">The offset in the byte array to begin sending</param>
            <param name="offset">The number of bytes to send</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.SendTo(System.Net.IPEndPoint,System.String)">
            <summary>
            Sends data to the specified remote endpoint
            </summary>
            <param name="remoteEndPoint">The destination endpoint</param>
            <param name="s">The string to send</param>
            <returns>true if data was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.ConnectionManager.ReceiveResponse(Robotics.API.Response)">
            <summary>
            
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.socketTCPIn_ClientConnected(System.Net.Sockets.Socket)">
            <summary>
            Manages the ClientConnected event of the input socket
            </summary>
            <param name="s">Socket used for connection</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.socketTCPIn_ClientDisconnected(System.Net.EndPoint)">
            <summary>
            Manages the ClientDisconnected event of the input socket
            </summary>
            <param name="ep">Disconnection endpoint</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.socketTCPIn_DataReceived(System.Net.Sockets.TcpPacket)">
            <summary>
            Manages the DataReceived event of the input socket
            </summary>
            <param name="p">Received data</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.socketTCPOut_Connected(System.Net.Sockets.Socket)">
            <summary>
            Manages the Connected event of the output socket
            </summary>
            <param name="s">Socket used for connection</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.socketTCPOut_Disconnected(System.Net.EndPoint)">
            <summary>
            Manages the Disconnected event of the output socket
            </summary>
            <param name="ep">Disconnection endpoint</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.socketTCPOut_DataReceived(System.Net.Sockets.TcpPacket)">
            <summary>
            Manages the DataReceived event of the output socket
            </summary>
            <param name="p">Received data</param>
        </member>
        <member name="M:Robotics.API.ConnectionManager.Console(System.String)">
            <summary>
            Appends text to the console
            </summary>
            <param name="text">Text to append</param>
        </member>
        <member name="F:Robotics.API.ConnectionManager.rxModuleNameValidator">
            <summary>
            Regular expresion used to validate module names
            </summary>
        </member>
        <member name="M:Robotics.API.ConnectionManager.IsValidModuleName(System.String)">
            <summary>
            Gets a value indicating if the provided string is valid as a name of a module
            </summary>
            <param name="name">string to validate</param>
            <returns>true if the provided string is a valid module name, false otherwise</returns>
        </member>
        <member name="P:Robotics.API.ConnectionManager.Bidirectional">
            <summary>
            Gets a value indicating if the ConnectionManager is woking in bidirectional mode
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.ConnectedClientsCount">
            <summary>
            Gets the number of clients connected to the local TCP Server
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.CommandManager">
            <summary>
            Gets or sets the CommandManager object which will manage incoming data.
            The ConnectionManager must not be running when the CommandManager is set.
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.OutputSocketReceptionEnabled">
            <summary>
            Enables or disables the reception of data from the output socket
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.IsConnected">
            <summary>
            Gets a value indicating if local TCP client has connected to remote server
            </summary>
            <remarks>When working on bidirectional mode always return false</remarks>
        </member>
        <member name="P:Robotics.API.ConnectionManager.IsServerStarted">
            <summary>
            Gets a value indicating if TCP Server has been started and is running
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.IsRunning">
            <summary>
            Gets a value indicating if this instance of ConnectionManager has been started
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.LastReceivedPacket">
            <summary>
            Geths the last received packet
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.Mode">
            <summary>
            Gets a value indicating the mode of the current ConnectionManager instance
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.ModuleName">
            <summary>
            Gets or sets the name of the module that this ConnectionManager object interfaces.
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.PortIn">
            <summary>
            Gets or sets the Tcp port for incoming data used by Tcp Server.
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.PortOut">
            <summary>
            Gets or sets the Tcp port for outgoing data used by Tcp Client.
            </summary>
        </member>
        <member name="P:Robotics.API.ConnectionManager.TcpServerAddress">
            <summary>
            Gets or sets the IP Address of the remote computer to connect using the socket client.
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.ClientConnected">
            <summary>
            Occurs when a remote client gets connected to local TCP Server
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.ClientDisconnected">
            <summary>
            Occurs when a remote client disconnects from local TCP Server
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.Connected">
            <summary>
            Occurs when the local client connects to remote server.
            This event is rised only when the ConnectionManager works in Unidirectional mode.
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.Disconnected">
            <summary>
            Occurs when the local client connects to remote server.
            This event is rised only when the ConnectionManager works in Unidirectional mode.
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.DataReceived">
            <summary>
            Occurs when data is received
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.StatusChanged">
            <summary>
            Occurs when the status of the ConnectionManager changes
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.Started">
            <summary>
            Occurs when the ConnectionManager is started
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.Stopped">
            <summary>
            Occurs when the ConnectionManager is stopped
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.CommandSent">
            <summary>
            Occurs when a command is sent
            </summary>
        </member>
        <member name="E:Robotics.API.ConnectionManager.ResponseSent">
            <summary>
            Occurs when a response is sent
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager">
            <summary>
            Implements a CommandManager designed to control Robot Pac-Ito
            </summary>
        </member>
        <member name="T:Robotics.API.CommandManager">
            <summary>
            Manages incoming commands and its responses
            </summary>
            <remarks>This class is incomplete and should not be used</remarks>
        </member>
        <member name="F:Robotics.API.CommandManager.dlgDataReceived">
            <summary>
            Represents the DataReceived method
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.dlgClientConnected">
            <summary>
            Represents the ClientConnected method
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.dlgClientDisconnected">
            <summary>
            Represents the ClientDisconnected method
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.cnnMan">
            <summary>
            Stores the reference to the ConnectionManager object
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.dataReceived">
            <summary>
            Stores data received trough Connection Manager
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.commandsReceived">
            <summary>
            Queue of received commands.
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.responsesReceived">
            <summary>
            Queue of received responses.
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.unpairedResponses">
            <summary>
            List of received responses which has not been paired with a sent command
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.executers">
            <summary>
            Stores the CommandExecuter objects which the CommandManager instance manages
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.sharedVariables">
            <summary>
            List of shared variables
            </summary>
            <remarks>shared variables are stored in blackboard</remarks>
        </member>
        <member name="F:Robotics.API.CommandManager.autoId">
            <summary>
            Stores an autoId for commands
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.shvLoaded">
            <summary>
            Flag that indicates if the shared variable list has been retrieved
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.busy">
            <summary>
            Stores the busy state of the module that controls the command manager
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.initializationSyncEvent">
            <summary>
            ResetEvent used to initialization sync tasks
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.blackboardEndpoint">
            <summary>
            The endpoint where blackboard is connected
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.ready">
            <summary>
            Stores the ready state of the module that controls the command manager
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.parallelSendAndWaitQueue">
            <summary>
            Queue for parallel send-and-wait operations
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.parallelSendStarted">
            <summary>
            Indicates if a Parallel Send and Wait operation has been started
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.pswOwner">
            <summary>
            Stores the Id of the thread that performed a lock over the parallelSendAndWaitQueue object
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.running">
            <summary>
            Indicates if main thread is running
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.mainThread">
            <summary>
            The main thread
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.parserThread">
            <summary>
            Thread used to parse messages
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.sharedVariableListUpdaterThread">
            <summary>
            Thread used to update the shared variable list
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.dlgMainThreadTask">
            <summary>
            Represents the MainThreadTask method
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.dlgParserThreadTask">
            <summary>
            Represents the ParserThreadTask method
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.dlgUpdateSharedVariableListTask">
            <summary>
            Represents the UpdateSharedVariableListTask method
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.#ctor">
            <summary>
            Initializes a new instance of CommandManager
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginParallelSendAndWait">
            <summary>
            Prepares the async command executer to perform multiple send-and-wait operations in parallel
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginSendCommand(Robotics.API.Command,System.Int32)">
            <summary>
            Begins to asynchronously send a command and wait from a response
            </summary>
            <param name="command">The command to send.</param>
            <param name="timeOut">The timeout for command execution</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginSendCommand(Robotics.API.Command,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously send a command and wait from a response
            </summary>
            <param name="command">The command to send.</param>
            <param name="timeOut">The timeout for command execution</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the operation. This object is passed to the EndReceive delegate when the operation is complete.</param>
            <returns>An IAsyncResult that references the asynchronous operation.</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.EndSendCommand(System.IAsyncResult,Robotics.API.Response@)">
            <summary>
            Ends a pending asynchronous wait from response
            </summary>
            <param name="asyncResult">An IAsyncResult that stores state information and any user defined data for this asynchronous operation.</param>
            <param name="response">The response received during the asynchronous operation</param>
            <returns>true if a response has been received, false otherwise.</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.CommitParallelSendAndWait(System.Int32,Robotics.API.CommandResponsePair[]@)">
            <summary>
            Executes all pending send-and-wait operations
            </summary>
            <param name="timeOut">The overall timeout for parallel command execution</param>
            <param name="results">Array of Command/Response pairs result of parallel execution</param>
        </member>
        <member name="M:Robotics.API.CommandManager.CleanBuffers">
            <summary>
            Clears out all the contents of dataReceived, commandsReceived, responsesReceived and unpairedResponses Queues/Lists
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.OnCommandExecuted(Robotics.API.CommandExecuter,Robotics.API.Command,Robotics.API.Response)">
            <summary>
            Raises the CommandExecuted event
            </summary>
            <param name="commandExecuter">The command executer used to execute the received command</param>
            <param name="executedCommand">The command which was executed</param>
            <param name="generatedResponse">The response generated due to command execution</param>
        </member>
        <member name="M:Robotics.API.CommandManager.EnqueueCommand(Robotics.API.Command)">
            <summary>
            Enqueues a command for a parallel send-and-wait operation
            </summary>
            <param name="command">Command to enqueue</param>
        </member>
        <member name="M:Robotics.API.CommandManager.OnCommandReceived(Robotics.API.Command)">
            <summary>
            Raises the CommandReceived event
            </summary>
            <param name="command">The received command</param>
        </member>
        <member name="M:Robotics.API.CommandManager.OnResponseReceived(Robotics.API.Response)">
            <summary>
            Raises the ResponseReceived event
            </summary>
            <param name="response">the received response</param>
        </member>
        <member name="M:Robotics.API.CommandManager.OnSharedVariablesLoaded">
            <summary>
            Raises the SharedVariablesLoaded event
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.OnStatusChanged">
            <summary>
            Raises the StatusChanged event
            </summary>
            <remarks>The OnStatusChanged method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnStatusChanged in a derived class, be sure to call the base class's OnStatusChanged method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.CommandManager.OnStart">
            <summary>
            Raises the Started event
            </summary>
            <remarks>The OnStart method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnStart in a derived class, be sure to call the base class's OnStart method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.CommandManager.OnStop">
            <summary>
            Raises the Stopped event
            </summary>
            <remarks>The OnStop method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnStop in a derived class, be sure to call the base class's OnStop method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.CommandManager.Start">
            <summary>
            Starts the Connection Manager
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.Stop">
            <summary>
            Stops the Connection Manager
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.MainThreadTask">
            <summary>
            Executes async tasks
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.ParserThreadTask">
            <summary>
            Executes parsing of data received
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableListRequestUpdate">
            <summary>
            Request the list of all shared variables stored in bloackboard.
            It waits 5ms for an answer
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.UpdateSharedVariableList">
            <summary>
            Updates the shared variable list from the blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.UpdateSharedVariableListTask">
            <summary>
            Updates the shared variable list from the blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginCommandExecution(Robotics.API.Command)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="command">The Command object to be executed</param>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginCommandExecution(Robotics.API.Command,Robotics.API.IMessageSource)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="command">The Command object to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginCommandExecution(Robotics.API.Command,Robotics.API.IMessageSource,System.Object)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="command">The Command object to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
            <param name="metaData">The object which will be attached to the command and it's response as MetaData</param>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginCommandExecution(System.String,System.String)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="commandName">The name of the command to be executed</param>
            <param name="parameters">The parameters for the command to be executed</param>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginCommandExecution(System.String,System.String,Robotics.API.IMessageSource)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="commandName">The name of the command to be executed</param>
            <param name="parameters">The parameters for the command to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
        </member>
        <member name="M:Robotics.API.CommandManager.BeginCommandExecution(System.String,System.String,Robotics.API.IMessageSource,System.Object)">
            <summary>
            Adds a command to the execution Queue
            </summary>
            <param name="commandName">The name of the command to be executed</param>
            <param name="parameters">The parameters for the command to be executed</param>
            <param name="source">The IMessageSource object which will receive the Response object generated after the command execution</param>
            <param name="metaData">The object which will be attached to the command and it's response as MetaData</param>
        </member>
        <member name="M:Robotics.API.CommandManager.ClientConnected(System.Net.Sockets.Socket)">
            <summary>
            Manages connections
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.ClientDisconnected(System.Net.EndPoint)">
            <summary>
            Manages disconnections
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.DataReceived(Robotics.API.ConnectionManager,System.Net.Sockets.TcpPacket)">
            <summary>
            Manages all received data
            </summary>
            <param name="cnnMan">The ConnectionManager object which provides the TcpPacket</param>
            <param name="packet">Tcp packet received</param>
        </member>
        <member name="M:Robotics.API.CommandManager.ManageSharedVariableList(Robotics.API.Response)">
            <summary>
            Manages updates of the shared variable list
            </summary>
            <param name="response">Response which contains a the shared vaiable data</param>
        </member>
        <member name="M:Robotics.API.CommandManager.ManageSubscription(Robotics.API.Response)">
            <summary>
            Manages the events of the shared variables
            </summary>
            <param name="response">Response which contains a the shared vaiable data</param>
        </member>
        <member name="M:Robotics.API.CommandManager.Parse(System.Net.Sockets.TcpPacket)">
            <summary>
            Parses a received string
            </summary>
            <param name="packet">String received</param>
        </member>
        <member name="M:Robotics.API.CommandManager.ParseCommand(Robotics.API.Command)">
            <summary>
            Parses a received Command
            </summary>
            <param name="command">Command received</param>
            <remarks>This method is incomplete and should not be used</remarks>
        </member>
        <member name="M:Robotics.API.CommandManager.ParseSystemCommand(Robotics.API.Command)">
            <summary>
            Parses a received system command
            </summary>
            <param name="command">Command that represents the system command received</param>
            <returns>true if provided command is a system command and has been parsed, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.ParseResponse(Robotics.API.Response)">
            <summary>
            Parses a received Response
            </summary>
            <param name="response">Response received</param>
        </member>
        <member name="M:Robotics.API.CommandManager.MultipleSendAndWait(Robotics.API.Command[],System.Int32,Robotics.API.CommandResponsePair[]@)">
            <summary>
            Sends multiple commands and waits for its response
            </summary>
            <param name="commands">Array of Command objects which contains commands to be sent</param>
            <param name="timeOut">The overall timeout for command execution</param>
            <param name="results">Array of Response objects generated from responses received</param>
            <returns>true if at least one command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SendCommand(Robotics.API.Command)">
            <summary>
            Sends a command through the ConnectionManager
            </summary>
            <param name="command">Command to be sent</param>
            <returns>true if command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SendAndWait(Robotics.API.Command,System.Int32,Robotics.API.Response@)">
            <summary>
            Sends a command and waits for response
            </summary>
            <param name="command">Command to be sent</param>
            <param name="timeOut">The timeout for command execution</param>
            <param name="response">The response received</param>
            <returns>true if command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SendAndWait(Robotics.API.Command[],System.Int32,Robotics.API.CommandResponsePair[]@)">
            <summary>
            Sends multiple commands and waits for its response
            </summary>
            <param name="commands">Array of Command objects which contains commands to be sent</param>
            <param name="timeOut">The overall timeout for command execution</param>
            <param name="results">Array of Response objects generated from responses received</param>
            <returns>true if at least one command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SendResponse(System.Boolean,Robotics.API.Command)">
            <summary>
            Creates a response and sends it through the asociated ConnectionManager
            </summary>
            <param name="success">Indicates if command succeded</param>
            <param name="command">Command to respond</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SendResponse(System.Boolean,Robotics.API.Command,Robotics.API.Response@)">
            <summary>
            Creates a response and sends it through the asociated ConnectionManager
            </summary>
            <param name="success">Indicates if command succeded</param>
            <param name="command">Command to respond</param>
            <param name="response">Generated response</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SendResponse(Robotics.API.Response)">
            <summary>
            Sends a Response through the asociated ConnectionManager
            </summary>
            <param name="response">Response object to be sent</param>
        </member>
        <member name="M:Robotics.API.CommandManager.WaitForResponse(Robotics.API.Command,System.Int32)">
            <summary>
            Waits for a response for a sent command
            </summary>
            <param name="commandSent">Command object that represents the command sent</param>
            <param name="timeOut">The amount of time to wait for a response arrival</param>
            <returns>Response object that represents the response received or null if no response received and timed out</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.ReceiveResponse(Robotics.API.Response)">
            <summary>
            Manages a response for a command sent by the CommandManager module
            Since responses has been managed at this point, this method does nothing
            </summary>
            <param name="response">Response to discard</param>
        </member>
        <member name="E:Robotics.API.CommandManager.CommandExecuted">
            <summary>
            Occurs when a command is executed
            </summary>
        </member>
        <member name="E:Robotics.API.CommandManager.CommandReceived">
            <summary>
            Occurs when a command is received
            </summary>
        </member>
        <member name="E:Robotics.API.CommandManager.ResponseReceived">
            <summary>
            Occurs when a response is received
            </summary>
        </member>
        <member name="E:Robotics.API.CommandManager.StatusChanged">
            <summary>
            Occurs when the status of the CommandManager changes
            </summary>
        </member>
        <member name="E:Robotics.API.CommandManager.Started">
            <summary>
            Occurs when the CommandManager is started
            </summary>
        </member>
        <member name="E:Robotics.API.CommandManager.Stopped">
            <summary>
            Occurs when the CommandManager is stopped
            </summary>
        </member>
        <member name="E:Robotics.API.CommandManager.SharedVariablesLoaded">
            <summary>
            Occurs when new shared variables has been imported from blackboard
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.AutoId">
            <summary>
            Gets or sets the Id for commands
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.Busy">
            <summary>
            Gets or sets a value that indicates if the CommandManager is globaly busy.
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.ConnectionManager">
            <summary>
            Gets or sets the ConnectionManager object asociated to this CommandManager object
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.CommandExecuters">
            <summary>
            Gets the collection of CommandExecuters contained within the CommandManager
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.ModuleName">
            <summary>
            Gets the name of the module that this CommandManager object interfaces.
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.IsRunning">
            <summary>
            Gets a value indicating if this instance of CommandManager has been started
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.ParallelSendAndWaitStarted">
            <summary>
            Gets a value indicating if a parallel send-and-wait operation has been started
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.Ready">
            <summary>
            Gets or sets the ready state of the module that controls the command manager
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.SharedVariables">
            <summary>
            Gets the list of shared variables
            </summary>
            <remarks>shared variables are stored in blackboard</remarks>
        </member>
        <member name="T:Robotics.API.CommandManager.SharedVariableList">
            <summary>
            Represents a List of SharedVariable objects
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.SharedVariableList.variables">
            <summary>
            The list of subscriptions
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.SharedVariableList.owner">
            <summary>
            The SharedVariable object this List is bound to
            </summary>
        </member>
        <member name="F:Robotics.API.CommandManager.SharedVariableList.rwLock">
            <summary>
            Lock for concurrent readers and single writer
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.#ctor(Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of SharedVariableList
            </summary>
            <param name="commandManager">The CommandManager object this List will be bound to</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.ContainsSharedVariable(Robotics.API.SharedVariable)">
            <summary>
            Determines whether the SharedVariableList contains a specific value.
            </summary>
            <param name="item">The SharedVariable object to locate in the SharedVariableList.</param>
            <returns>true if item is found in the IList; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.LoadFromBlackboard">
            <summary>
            Fills the list with all the variables from the blackboard
            </summary>
            <returns>The number of loaded variables</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.LoadFromBlackboard(System.Int32,System.String@)">
            <summary>
            Fills the list with all the variables from the blackboard
            </summary>
            <param name="timeout">Data request timeout</param>
            <param name="message">When this method returns contains any error message produced</param>
            <returns>The number of loaded variables</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.RegisterVar(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Registers an existing variable within the list
            </summary>
            <param name="type">The type of the variable to register</param>
            <param name="isArray">Indicates if the variable is an array</param>
            <param name="name">The name of the variable to register</param>
            <param name="data">The data of the variable to register received in the read operation</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.SplitMultipleSharedVariables(System.String)">
            <summary>
            Splits a string containing multiple shared variables into each shared variable
            </summary>
            <param name="s">String to split</param>
            <returns>Array of each shared variable in string format</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.UpdateFromBlackboard(Robotics.API.Response)">
            <summary>
            Updates the list of shared variables with the missing variables from the blackboard
            </summary>
            <returns>The number of loaded variables</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.UpdateFromBlackboard(Robotics.API.Response,System.String@)">
            <summary>
            Updates the list of shared variables with the missing variables from the blackboard
            </summary>
            <returns>The number of loaded variables</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.Add(Robotics.API.SharedVariable)">
            <summary>
            Adds an item to the SharedVariableList.
            </summary>
            <param name="item">The SharedVariable object to add to the SharedVariableList.</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.Clear">
            <summary>
            Removes all items from the SharedVariableList.
            </summary>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.Contains(System.String)">
            <summary>
            Determines whether the SharedVariableList contains a specific value.
            </summary>
            <param name="variableName">The name of the SharedVariable object to locate in the SharedVariableList.</param>
            <returns>true if item is found in the IList; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.Contains(Robotics.API.SharedVariable)">
            <summary>
            Determines whether the SharedVariableList contains a specific value.
            </summary>
            <param name="item">The SharedVariable object to locate in the SharedVariableList.</param>
            <returns>true if item is found in the IList; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.CopyTo(Robotics.API.SharedVariable[],System.Int32)">
            <summary>
            Copies the elements of the SharedVariableList to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from SharedVariableList. The Array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.IndexOf(System.String)">
            <summary>
            Determines the index of a specific item in the SharedVariableList
            </summary>
            <param name="variableName">The name of the shared variable to locate in the SharedVariableList.</param>
            <returns>The index of item if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.IndexOf(Robotics.API.SharedVariable)">
            <summary>
            Determines the index of a specific item in the SharedVariableList
            </summary>
            <param name="item">The object to locate in the SharedVariableList.</param>
            <returns>The index of item if found in the list; otherwise, -1</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.Insert(System.Int32,Robotics.API.SharedVariable)">
            <summary>
            Inserts an item to the SharedVariableList at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted</param>
            <param name="item">The SharedVariable object to insert into the SharedVariableList</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.Remove(System.String)">
            <summary>
            Removes the SharedVariable object from the SharedVariableList.
            </summary>
            <param name="variableName">The name of the shared variable to remove from the SharedVariableList.</param>
            <returns>true if item was successfully removed from the SharedVariableList; otherwise, false. This method also returns false if item is not found in the original SharedVariableList</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.Remove(Robotics.API.SharedVariable)">
            <summary>
            Removes the SharedVariable object from the SharedVariableList.
            </summary>
            <param name="item">The SharedVariable object to remove from the SharedVariableList.</param>
            <returns>true if item was successfully removed from the SharedVariableList; otherwise, false. This method also returns false if item is not found in the original SharedVariableList</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the List
            </summary>
            <returns>A IEnumerator that can be used to iterate through the List</returns>
        </member>
        <member name="M:Robotics.API.CommandManager.SharedVariableList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the List
            </summary>
            <returns>A IEnumerator that can be used to iterate through the List</returns>
        </member>
        <member name="P:Robotics.API.CommandManager.SharedVariableList.Count">
            <summary>
            Gets the number of elements actually contained in the SharedVariableList. 
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.SharedVariableList.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only. Always returns false.
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.SharedVariableList.Owner">
            <summary>
            Gets the CommandManager object this List is bound to
            </summary>
        </member>
        <member name="P:Robotics.API.CommandManager.SharedVariableList.Item(System.Int32)">
            <summary>
            Gets the element at the specified index
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index</returns>
        </member>
        <member name="P:Robotics.API.CommandManager.SharedVariableList.Item(System.String)">
            <summary>
            Gets the element with the specified name
            </summary>
            <param name="variableName">The name of the SharedVariable to get</param>
            <returns>The SharedVariable element with the specified name</returns>
        </member>
        <member name="E:Robotics.API.CommandManager.SharedVariableList.SharedVariableAdded">
            <summary>
            Occurs when a SharedVariable object is added to the SharedVariableList
            </summary>
        </member>
        <member name="E:Robotics.API.CommandManager.SharedVariableList.SharedVariableRemoved">
            <summary>
            Occurs when a SharedVariable object is removed from the SharedVariableList
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotArm">
            <summary>
            Manager for the arm of the robot
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotBase">
            <summary>
            Manager for the base of the robot
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotHead">
            <summary>
            Manager for the head of the robot
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotKinectTracker">
            <summary>
            Manager for the Kineck
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotManipulator">
            <summary>
            Manager for the manipulator of the robot
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotPersonFinder">
            <summary>
            Manager for the part of the vision related to locate humans
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotObjectFinder">
            <summary>
            Manager for the part of the vision related to locate objects
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotSpeechGenerator">
            <summary>
            Manager for the Speech-Generator module of the robot
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.robotSpeechRecognizer">
            <summary>
            Manager for the Speech-Recognition module of the robot
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.#ctor">
            <summary>
            Initializes a new instance of PacItoCommandManager
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.Console(System.String)">
            <summary>
            When overriden writes the provided text to the Console implementation
            </summary>
            <param name="text">Text to write</param>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotArm">
            <summary>
            Gets the manager for the arm of the robot
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotBase">
            <summary>
            Gets the manager for the base of the robot
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotHead">
            <summary>
            Gets the manager for the head of the robot
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotKinectTracker">
            <summary>
            Gets the manager for the Kineck
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotManipulator">
            <summary>
            Gets the manager for the manipulator of the robot
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotPersonFinder">
            <summary>
            Gets the manager for the part of the vision related to locate humans
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotObjectFinder">
            <summary>
            Gets the manager for the part of the vision related to locate objects
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotSpeechRecognizer">
            <summary>
            Gets the manager for the Speech-Recognition module of the robot
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.RobotSpeechGenerator">
            <summary>
            Gets the manager for the Speech-Generator module of the robot
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.ArmDefaultDelay">
            <summary>
            Gets or Sets the default delay time for arm commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.BaseDefaultDelay">
            <summary>
            Gets or Sets the default delay time for base commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.HeadDefaultDelay">
            <summary>
            Gets or Sets the default delay time for head commands
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager">
            <summary>
            Controls remotely the person finder module of Pac-Ito
            </summary>
        </member>
        <member name="T:Robotics.SharedResource">
            <summary>
            Implements a base class with resource management control to prevent two processes access the same shared resource at the same time
            </summary>
        </member>
        <member name="F:Robotics.SharedResource.busy">
            <summary>
            Stores a value indicating if the resource is free
            </summary>
        </member>
        <member name="F:Robotics.SharedResource.resourceObject">
            <summary>
            The resource object for lock
            </summary>
        </member>
        <member name="M:Robotics.SharedResource.#ctor">
            <summary>
            Initializes a new instance of ShredResourceAccessControl
            </summary>
        </member>
        <member name="M:Robotics.SharedResource.GetResource">
            <summary>
            Tries to get exclusive acces of the resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Robotics.SharedResource.FreeResource">
            <summary>
            Releases the exclusive acces of the resource
            </summary>
            <returns></returns>
        </member>
        <member name="P:Robotics.SharedResource.Busy">
            <summary>
            Gets a value indicating if the ShredResource is busy
            The ShredResource is busy when the resource is not free
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.defaultDelay">
            <summary>
            Stores the default delay time for person finder commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.sgnFindHuman">
            <summary>
            Signature to parse find_human responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.sgnRememberHuman">
            <summary>
            Signature to parse remember_human responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoPersonFinderManager
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.CreatePersonFinderSignatures">
            <summary>
            Creates the person finder Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.FindHuman(System.String@)">
            <summary>
            Request PersonFinder to find specified person
            </summary>
            <param name="humanName">Name of the person to find</param>
            <returns>true if specified person was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.FindHuman(System.String@,System.Int32)">
            <summary>
            Request PersonFinder to find specified person
            </summary>
            <param name="humanName">Name of the person to find</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified person was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.FindHuman(System.String@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request PersonFinder to find specified person
            </summary>
            <param name="humanName">Name of the person to find</param>
            <param name="hFOVorX">When this method returns contains one of the following values:
            a) The horizontal fov if the response contains 3 parameters (name and FOVs)
            b) The x coordinate of the centroid of the face based on the center of the camera lens if the response contains 4 parameters (name and coords)
            c) Double.NaN if no response was received or the response does not contain position data</param>
            <param name="vFOVorY">When this method returns contains one of the following values:
            a) The vertical fov if the response contains 3 parameters (name and FOVs)
            b) The y coordinate of the centroid of the face based on the center of the camera lens if the response contains 4 parameters (name and coords)
            c) Double.NaN if no response was received or the response does not contain position data</param>
            <param name="z">When this method returns contains one of the following values:
            a) The z coordinate of the centroid of the face based on the center of the camera lens if the response contains 4 parameters (name and coords)
            b) Double.NaN if no response was received or the response does not contain coordinate position data</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified person was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.RememberHuman(System.String)">
            <summary>
            Request PersonFinder to remember (learn) specified person
            </summary>
            <param name="humanName">Name of the person to remember</param>
            <returns>true if specified person was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.RememberHuman(System.String,System.Int32)">
            <summary>
            Request PersonFinder remember (learn) specified person
            </summary>
            <param name="humanName">Name of the person to remember</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified person was trained. false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for person finder commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.SgnFindHuman">
            <summary>
            Gets the Signature object to parse pr_find responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoPersonFinderManager.SgnRememberHuman">
            <summary>
            Gets the Signature object to parse pf_remember responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager">
            <summary>
            Controls remotely the object finder of Pac-Ito
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.defaultDelay">
            <summary>
            Stores the default delay time for object finder commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.sgnCalibrate">
            <summary>
            Signature to parse kt_calibrate responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.sgnFindObject">
            <summary>
            Signature to parse kt_find responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.sgnLocate">
            <summary>
            Signature to parse kt_locate responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.sgnTrainObject">
            <summary>
            Signature to parse kt_train responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoKinectTrackerManager
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.CreateKinectTrackerSignatures">
            <summary>
            Creates the object finder Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.Calibrate(System.Int32@)">
            <summary>
            Request KinectTracker to find specified object
            </summary>
            <param name="skeletonId">Id of the skeleton calibrated</param>
            <returns>true if calibration was successfull, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.Calibrate(System.Int32@,System.Int32)">
            <summary>
            Request KinectTracker to find specified object
            </summary>
            <param name="skeletonId">Id of the skeleton calibrated</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if calibration was successfull, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.Find">
            <summary>
            Request KinectTracker to find movement
            </summary>
            <returns>true if movement was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.Find(System.Int32)">
            <summary>
            Request KinectTracker to find movement
            </summary>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if movement was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.Train(System.String)">
            <summary>
            Request KinectTracker to train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.Train(System.String,System.Int32)">
            <summary>
            Request KinectTracker train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.LocateSkeleton(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request KinectTracker for the centroid of the skeleton
            </summary>
            <param name="centroidX">X coordinate of the centroid of the Skeleton</param>
            <param name="centroidY">Y coordinate of the centroid of the Skeleton</param>
            <param name="centroidZ">Z coordinate of the centroid of the Skeleton</param>
            <returns>true if centroid was retrieved successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.LocateSkeleton(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request KinectTracker for the centroid of the skeleton
            </summary>
            <param name="centroidX">X coordinate of the centroid of the Skeleton</param>
            <param name="centroidY">Y coordinate of the centroid of the Skeleton</param>
            <param name="centroidZ">Z coordinate of the centroid of the Skeleton</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if centroid was retrieved successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.LocateCamera(System.Double@,System.Double@)">
            <summary>
            Request KinectTracker for the centroid of the human chest
            </summary>
            <param name="hFOV">Horizontal _miVariable of view</param>
            <param name="vFOV">Vertical _miVariable of view</param>
            <returns>true if centroid was retrieved successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.LocateCamera(System.Double@,System.Double@,System.Int32)">
            <summary>
            Request KinectTracker for the centroid of the human chest
            </summary>
            <param name="hFOV">Horizontal _miVariable of view</param>
            <param name="vFOV">Vertical _miVariable of view</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if centroid was retrieved successfully, false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for object finder commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.SgnCalibrate">
            <summary>
            Gets the signature to parse kt_calibrate responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.SgnFindObject">
            <summary>
            Gets the Signature object to parse kt_find responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.SgnLocate">
            <summary>
            Gets the signature to parse kt_locate responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoKinectTrackerManager.SgnTrainObject">
            <summary>
            Gets the Signature object to parse kt_train responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager">
            <summary>
            Controls remotely the DiferentialPair base of Pac-Ito
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.defaultDelay">
            <summary>
            Stores the default delay time for base commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.rxObstacles">
            <summary>
            Regular expression used to extract obstacles
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.sgnMove">
            <summary>
            Signature to parse move responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.sgnGoTo">
            <summary>
            Signature to parse goto responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.sgnObstacle">
            <summary>
            Signature to parse obstacle responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.sgnPosition">
            <summary>
            Signature to parse position responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.sgnAddObject">
            <summary>
            Signature to parse addobject responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoCommandManager
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.CreateBaseSignatures">
            <summary>
            Creates the Base Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.MoveBase(System.Double)">
            <summary>
            Request robot base to move to the specified orientation
            </summary>
            <param name="distance">The distance the robot must move</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.MoveBase(System.Double@)">
            <summary>
            Request robot base to move to the specified orientation
            </summary>
            <param name="distance">The distance the robot must move</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.MoveBase(System.Double,System.Double)">
            <summary>
            Request robot base to move to the specified orientation
            </summary>
            <param name="distance">The distance the robot must move</param>
            <param name="angle">The angle the robot must turn before move</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.MoveBase(System.Double@,System.Double@)">
            <summary>
            Request robot base to move to the specified orientation
            </summary>
            <param name="distance">The distance the robot must move</param>
            <param name="angle">The angle the robot must turn before move</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.MoveBase(System.Double,System.Double,System.Int32)">
            <summary>
            Request robot base to move to the specified orientation
            </summary>
            <param name="distance">The distance the robot must move</param>
            <param name="angle">The angle the robot must turn before move</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.MoveBase(System.Double@,System.Double@,System.Int32)">
            <summary>
            Request robot base to move to the specified orientation
            </summary>
            <param name="distance">The distance the robot must move</param>
            <param name="angle">The angle the robot must turn before move</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRoom(System.String)">
            <summary>
            Request robot base to move to the specified room
            </summary>
            <param name="room">The name of the destination room</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRoom(System.String,System.Int32)">
            <summary>
            Request robot base to move to the specified room
            </summary>
            <param name="room">The name of the destination room</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRoom(System.String,System.Double@)">
            <summary>
            Request robot base to move to the specified room
            </summary>
            <param name="room">The name of the destination room</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRoom(System.String,System.Double@,System.Int32)">
            <summary>
            Request robot base to move to the specified room
            </summary>
            <param name="room">The name of the destination room</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRegion(System.String)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="region">The name of the destination region</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRegion(System.String,System.Int32)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="region">The name of the destination region</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRegion(System.String,System.Double@)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="region">The name of the destination region</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToRegion(System.String,System.Double@,System.Int32)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="region">The name of the destination region</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToXY(System.Double@,System.Double@)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToXY(System.Double@,System.Double@,System.Int32)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToXY(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.GoToXY(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.Obstacle(System.Double,Robotics.Mathematics.Vector2[]@)">
            <summary>
            Request robot base the array of obstacles detected
            </summary>
            <param name="treshold">The treshold for obstacle detection</param>
            <param name="obstacles">An array containing the distances and angles of the detected obstacles</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.Obstacle(System.Double,Robotics.Mathematics.Vector2[]@,System.Int32)">
            <summary>
            Request robot base the array of obstacles detected
            </summary>
            <param name="treshold">The treshold for obstacle detection</param>
            <param name="obstacles">An array containing the distances and angles of the detected obstacles</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.Position(System.Double,System.Double,System.Double)">
            <summary>
            Sets the position of the robot
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <param name="angle">The orientation of the robot in the map</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.Position(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Sets the position of the robot
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <param name="angle">The orientation of the robot in the map</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.Position(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.Position(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request robot base to move to the specified region
            </summary>
            <param name="x">The x coordinate position of the robot in the map</param>
            <param name="y">The y coordinate position of the robot in the map</param>
            <param name="angle">The angle the robot must turn on arrival</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if robot moved to the specified location. false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for base commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.SgnBaseMove">
            <summary>
            Gets the Signature object to parse mv responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.SgnGoTo">
            <summary>
            Signature to parse goto responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.SgnObstacle">
            <summary>
            Signature to parse obstacle responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.SgnPosition">
            <summary>
            Signature to parse position responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoBaseManager.SgnAddObject">
            <summary>
            Signature to parse addobject responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer">
            <summary>
            Controls remotely the speech recognizer of Pac-Ito
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.defaultDelay">
            <summary>
            Stores the default delay time for speech recognizer commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.sgnNa">
            <summary>
            Signature to parse sprec_na responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.sgnRaw">
            <summary>
            Signature to parse spr_raw responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.sgnStatus">
            <summary>
            Signature to parse spr_status responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.sgnGrammar">
            <summary>
            Signature to parse spr_grammar responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoSpeechRecognizer
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.CreateSignatures">
            <summary>
            Creates the Base Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.Enable">
            <summary>
            Commnds the SpeechRecognizer to enable the speech recognition
            </summary>
            <returns>true if speech recognition was enabled, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.Disable">
            <summary>
            Commnds the SpeechRecognizer to enable the speech recognition
            </summary>
            <returns>true if speech recognition was disabled, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.Status(System.String@)">
            <summary>
            Commnds the SpeechRecognizer to enable, disable or get the status of the the speech recognition
            </summary>
            <param name="stat">Parameter to include in de sprec_status command.</param>
            <returns>true if command executed successfully. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.LoadGrammar(System.String)">
            <summary>
            Commnds the SpeechRecognizer to load the specified grammar file
            </summary>
            <param name="grammarFile">The grammar file to load</param>
            <returns>true if grammar file was loaded, false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.GetGrammar(System.String@)">
            <summary>
            Retrieves the grammar file name of the SpeechRecognizer
            </summary>
            <param name="grammarFile">The name of the grammar file loaded</param>
            <returns>true if grammar file name was retrieved successflly, false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for speech recognizer commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.Enabled">
            <summary>
            Gets or sets a value indicating whether the SpeechRecognizer is enabled
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.Grammar">
            <summary>
            Gets or sets the grammar file used by the Speech Recognizer
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.SgnRaw">
            <summary>
            Gets the Signature to parse sprec_raw responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.SgnStatus">
            <summary>
            Gets the Signature to parse sprec_status responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechRecognizer.SgnGrammar">
            <summary>
            Gets the Signature to parse load_grammar responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager">
            <summary>
            Controls remotely the manipulator of the base of Pac-Ito
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.defaultDelay">
            <summary>
            Stores the default delay time for man commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.sgnOpenGrip">
            <summary>
            Signature to parse man_open responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.sgnCloseGrip">
            <summary>
            Signature to parse man_close responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.sgnStatus">
            <summary>
            Signature to parse man_status responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.sgnTilt">
            <summary>
            Signature to parse man_tilt responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoManManager
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.CreateManipulatorSignatures">
            <summary>
            Creates the Man Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.CloseGrip(System.Int32)">
            <summary>
            Request manipulator to close the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if manipulator closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.CloseGrip(System.Int32,System.Int32)">
            <summary>
            Request manipulator to close the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <param name="timeOut">Amout of time to wait for an man response in milliseconds</param>
            <returns>true if manipulator closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.CloseGrip">
            <summary>
            Request manipulator to close the grip
            </summary>
            <returns>true if manipulator closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.CloseGrip(System.Int32@)">
            <summary>
            Request manipulator to close the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if manipulator closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.CloseGrip(System.Int32@,System.Int32)">
            <summary>
            Request manipulator to close the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <param name="timeOut">Amout of time to wait for an man response in milliseconds</param>
            <returns>true if manipulator closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.Status(System.Int32@,System.Double@)">
            <summary>
            Request the manipulator aperture pecentage and tilt angle
            </summary>
            <param name="aperturePercentage">Percentage aperture of the gripper of the manipulator.</param>
            <param name="tilt">Tilt angle of the manipulator.</param>
            <returns>true if data fetch was successfully. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.Status(System.Int32@,System.Double@,System.Int32)">
            <summary>
            Request the manipulator aperture pecentage and tilt angle
            </summary>
            <param name="aperturePercentage">Percentage aperture of the gripper of the manipulator.</param>
            <param name="tilt">Tilt angle of the manipulator.</param>
            <param name="timeOut">Amout of time to wait for an man response in milliseconds</param>
            <returns>true if data fetch was successfully. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.OpenGrip(System.Int32)">
            <summary>
            Request manipulator to open the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if manipulator opend the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.OpenGrip(System.Int32,System.Int32)">
            <summary>
            Request manipulator to open the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <param name="timeOut">Amout of time to wait for an man response in milliseconds</param>
            <returns>true if manipulator opend the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.OpenGrip">
            <summary>
            Request manipulator to open the grip
            </summary>
            <returns>true if manipulator opend the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.OpenGrip(System.Int32@)">
            <summary>
            Request manipulator to open the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if manipulator opend the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.OpenGrip(System.Int32@,System.Int32)">
            <summary>
            Request manipulator to open the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <param name="timeOut">Amout of time to wait for an man response in milliseconds</param>
            <returns>true if manipulator opend the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.Tilt(System.Double)">
            <summary>
            Request manipulator to move to the specified tilt angle in radians
            </summary>
            <param name="tilt">The specified tilt angle in radians</param>
            <returns>true if manipulator moved to specified tilt. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.Tilt(System.Double,System.Int32)">
            <summary>
            Request manipulator to move to the specified tilt angle in radians
            </summary>
            <param name="tilt">The specified tilt angle in radians</param>
            <param name="timeOut">Amout of time to wait for an man response in milliseconds</param>
            <returns>true if manipulator moved to specified tilt. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.Tilt(System.Double@)">
            <summary>
            Request manipulator to move to the specified tilt angle in radians
            </summary>
            <param name="tilt">The specified tilt angle in radians</param>
            <returns>true if manipulator moved to specified tilt. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.Tilt(System.Double@,System.Int32)">
            <summary>
            Request manipulator to move to the specified tilt angle in radians
            </summary>
            <param name="tilt">The specified tilt angle in radians</param>
            <param name="timeOut">Amout of time to wait for an man response in milliseconds</param>
            <returns>true if manipulator moved to specified tilt. false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for man commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.SgnStatus">
            <summary>
            Gets the signature to parse man_status responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.SgnTilt">
            <summary>
            Gets the signature to parse man_tilt responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.SgnOpenGrip">
            <summary>
            Gets the Signature object to parse man_open responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoManipulatorManager.SgnCloseGrip">
            <summary>
            Gets the Signature object to parse man_close responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager">
            <summary>
            Controls remotely the object finder of Pac-Ito
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.defaultDelay">
            <summary>
            Stores the default delay time for object finder commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.sgnFindObjectTop">
            <summary>
            Signature to parse oft_find responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.sgnFindObjectMiddle">
            <summary>
            Signature to parse ofm_find responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.sgnFindObjectBottom">
            <summary>
            Signature to parse ofb_find responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.sgnTrainObjectTop">
            <summary>
            Signature to parse oft_train responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.sgnTrainObjectMiddle">
            <summary>
            Signature to parse ofm_train responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.sgnTrainObjectBottom">
            <summary>
            Signature to parse ofb_train responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoObjectFinderManager
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.CreateObjectFinderSignatures">
            <summary>
            Creates the object finder Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectTop(System.String@)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Top
            </summary>
            <param name="objectName">Name of the object to find</param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectTop(System.String@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Top
            </summary>
            <param name="objectName">Name of the object to find</param>
            <param name="x">When this method returns contains one of this values:
            a) The x-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the HFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="y">When this method returns contains one of this values:
            a) The y-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the VFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="z">When this method returns contains one of this values:
            a) The z-coordinate of the object position if the response contains three position values
            b) Double.NaN
            </param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectTop(System.String@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Top
            </summary>
            <param name="objectName">Name of the object to find</param>
            <param name="x">When this method returns contains one of this values:
            a) The x-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the HFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="y">When this method returns contains one of this values:
            a) The y-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the VFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="z">When this method returns contains one of this values:
            a) The z-coordinate of the object position if the response contains three position values
            b) Double.NaN
            </param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectMiddle(System.String@)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Middle
            </summary>
            <param name="objectName">Name of the object to find</param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectMiddle(System.String@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Middle
            </summary>
            <param name="objectName">Name of the object to find</param>
            <param name="x">When this method returns contains one of this values:
            a) The x-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the HFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="y">When this method returns contains one of this values:
            a) The y-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the VFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="z">When this method returns contains one of this values:
            a) The z-coordinate of the object position if the response contains three position values
            b) Double.NaN
            </param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectMiddle(System.String@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Middle
            </summary>
            <param name="objectName">Name of the object to find</param>
            <param name="x">When this method returns contains one of this values:
            a) The x-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the HFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="y">When this method returns contains one of this values:
            a) The y-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the VFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="z">When this method returns contains one of this values:
            a) The z-coordinate of the object position if the response contains three position values
            b) Double.NaN
            </param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectBottom(System.String@)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Bottom
            </summary>
            <param name="objectName">Name of the object to find</param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectBottom(System.String@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Bottom
            </summary>
            <param name="objectName">Name of the object to find</param>
            <param name="x">When this method returns contains one of this values:
            a) The x-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the HFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="y">When this method returns contains one of this values:
            a) The y-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the VFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="z">When this method returns contains one of this values:
            a) The z-coordinate of the object position if the response contains three position values
            b) Double.NaN
            </param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.FindObjectBottom(System.String@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request ObjectFinder to find specified object with the camera located on Bottom
            </summary>
            <param name="objectName">Name of the object to find</param>
            <param name="x">When this method returns contains one of this values:
            a) The x-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the HFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="y">When this method returns contains one of this values:
            a) The y-coordinate of the object position if the response contains three position values
            b) The location of the object respect to the VFOV of the camera (angle measured in radians) if the response contains two position values.
            c) Double.NaN if the response does not contains position values
            </param>
            <param name="z">When this method returns contains one of this values:
            a) The z-coordinate of the object position if the response contains three position values
            b) Double.NaN
            </param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified object was found. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.TrainObjectTop(System.String)">
            <summary>
            Request ObjectFinder to train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.TrainObjectTop(System.String,System.Int32)">
            <summary>
            Request ObjectFinder train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.TrainObjectMiddle(System.String)">
            <summary>
            Request ObjectFinder to train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.TrainObjectMiddle(System.String,System.Int32)">
            <summary>
            Request ObjectFinder train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.TrainObjectBottom(System.String)">
            <summary>
            Request ObjectFinder to train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.TrainObjectBottom(System.String,System.Int32)">
            <summary>
            Request ObjectFinder train (learn) specified object
            </summary>
            <param name="objectName">Name of the object to train</param>
            <param name="timeOut">Amout of time to wait for a response in milliseconds</param>
            <returns>true if specified object was trained. false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for object finder commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.SgnFindObjectTop">
            <summary>
            Gets the Signature object to parse oft_find responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.SgnTrainObjectTop">
            <summary>
            Gets the Signature object to parse oft_train responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.SgnFindObjectMiddle">
            <summary>
            Gets the Signature object to parse ofm_find responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.SgnTrainObjectMiddle">
            <summary>
            Gets the Signature object to parse ofm_train responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.SgnFindObjectBottom">
            <summary>
            Gets the Signature object to parse ofb_find responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoObjectFinderManager.SgnTrainObjectBottom">
            <summary>
            Gets the Signature object to parse ofb_train responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator">
            <summary>
            Controls remotely the speech generator of Pac-Ito
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.defaultDelay">
            <summary>
            Stores the default delay time for speech generator commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.sgnSay">
            <summary>
            Signature to parse spg_say responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.sgnAsyncSay">
            <summary>
            Signature to parse spg_asay responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.sgnShutUp">
            <summary>
            Signature to parse spg_shutup responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.sgnRead">
            <summary>
            Signature to parse spg_read responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.sgnAsyncRead">
            <summary>
            Signature to parse spg_aread responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.sgnVoice">
            <summary>
            Signature to parse spg_voice responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoSpeechGenerator
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.CreateSignatures">
            <summary>
            Creates the SpeechGenerator Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.AsyncRead(System.String)">
            <summary>
            Request speech generator to move to synthetize the text contained in the specified textfile
            </summary>
            <param name="file">The file which contains the text to be synthetized by the Speech Generator</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.AsyncRead(System.String,System.Int32)">
            <summary>
            Request speech generator to move to synthetize the text contained in the specified textfile
            </summary>
            <param name="file">The file which contains the text to be synthetized by the Speech Generator</param>
            <param name="timeOut">Amout of time to wait for an speech generator response in milliseconds</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.AsyncSay(System.String)">
            <summary>
            Request speech generator to move to synthetize the specified text
            </summary>
            <param name="textToAsyncSay">The text to be synthetized by the Speech Generator</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.AsyncSay(System.String,System.Int32)">
            <summary>
            Request speech generator to move to synthetize the specified text
            </summary>
            <param name="textToAsyncSay">The text to be synthetized by the Speech Generator</param>
            <param name="timeOut">Amout of time to wait for an speech generator response in milliseconds</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Say(System.String)">
            <summary>
            Request speech generator to move to synthetize the specified text
            </summary>
            <param name="textToSay">The text to be synthetized by the Speech Generator</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Say(System.String,System.Int32)">
            <summary>
            Request speech generator to move to synthetize the specified text
            </summary>
            <param name="textToSay">The text to be synthetized by the Speech Generator</param>
            <param name="timeOut">Amout of time to wait for an speech generator response in milliseconds</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.ShutUp">
            <summary>
            Request speech generator to move to shut up
            </summary>
            <returns>true if Speech Generator stopped the speech synthesis. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Read(System.String)">
            <summary>
            Request speech generator to move to synthetize the text contained in the specified textfile
            </summary>
            <param name="file">The file which contains the text to be synthetized by the Speech Generator</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Read(System.String,System.Int32)">
            <summary>
            Request speech generator to move to synthetize the text contained in the specified textfile
            </summary>
            <param name="file">The file which contains the text to be synthetized by the Speech Generator</param>
            <param name="timeOut">Amout of time to wait for an speech generator response in milliseconds</param>
            <returns>true if Speech Generator synthetized the specified text. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Voice(System.String)">
            <summary>
            Request speech generator to use the specified voice
            </summary>
            <param name="voiceName">The name of the voice to set. Use an empty string to get the actual voice.</param>
            <returns>true if Speech Generator changed the voice successfully. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Voice(System.String@)">
            <summary>
            Request speech generator to use the specified voice
            </summary>
            <param name="voiceName">The name of the voice to set. Use an empty string to get the actual voice.</param>
            <returns>true if Speech Generator changed the voice successfully. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Voice(System.String,System.Int32)">
            <summary>
            Request speech generator to use the specified voice
            </summary>
            <param name="voiceName">The name of the voice to set. Use an empty string to get the actual voice.</param>
            <param name="timeOut">Amout of time to wait for an speech generator response in milliseconds</param>
            <returns>true if Speech Generator changed the voice successfully. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.Voice(System.String@,System.Int32)">
            <summary>
            Request speech generator to use the specified voice
            </summary>
            <param name="voiceName">The name of the voice to set. Use an empty string to get the actual voice.</param>
            <param name="timeOut">Amout of time to wait for an speech generator response in milliseconds</param>
            <returns>true if Speech Generator changed the voice successfully. false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for speech generator commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.SgnSay">
            <summary>
            Gets the Signature to parse spg_say responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.SgnAsyncSay">
            <summary>
            Gets the Signature to parse spg_asay responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.SgnShutUp">
            <summary>
            Gets the Signature to parse shutup responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.SgnRead">
            <summary>
            Gets the Signature to parse spg_read responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.SgnAsyncRead">
            <summary>
            Gets the Signature to parse spg_aread responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoSpeechGenerator.SgnVoice">
            <summary>
            Gets the Signature to parse spg_voice responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoArmManager">
            <summary>
            Controls remotely the 7DOF antropomorphic arm of Pac-Ito
            </summary>
        </member>
        <member name="T:Robotics.HAL.IAnthropomorphicArm">
            <summary>
            Represents a 7DOF antropomorphic arm
            </summary>
        </member>
        <member name="T:Robotics.HAL.IArm">
            <summary>
            Represents a positionable arm
            </summary>
        </member>
        <member name="M:Robotics.HAL.IArm.GetAbsolutePosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the current position of the arm
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <returns>true if data acquisition was successfull. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IArm.GoTo(System.String)">
            <summary>
            Request arm to move to specified predefined position
            </summary>
            <param name="position">Name of the predefined position to move at</param>
            <returns>true if arm moved to desired position. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IArm.SetAbsolutePosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to a specified position
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IArm.SetRelativePosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position relative to its current position
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="T:Robotics.HAL.IManipulator">
            <summary>
            Represents a manipulator capable of take an release objects
            </summary>
        </member>
        <member name="M:Robotics.HAL.IManipulator.CloseGrip">
            <summary>
            Request the IManipulator to close the grip
            </summary>
            <returns>true if the IManipulator closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IManipulator.CloseGrip(System.Int32)">
            <summary>
            Request IManipulator to close the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if the IManipulator closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IManipulator.OpenGrip">
            <summary>
            Request IManipulator to open the grip
            </summary>
            <returns>true if IManipulator opened the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IManipulator.OpenGrip(System.Int32)">
            <summary>
            Request IManipulator to open the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if IManipulator opened the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IAnthropomorphicArm.GetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the current position and orientation of the anthropomorphic arm
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <returns>true if data acquisition was successfull. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IAnthropomorphicArm.GetOrientation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the current orientation of the anthropomorphic arm
            </summary>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to the specified orientation. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IAnthropomorphicArm.SetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IAnthropomorphicArm.SetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IAnthropomorphicArm.SetOrientation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified orientation
            </summary>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to the specified orientation. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IAnthropomorphicArm.SetRelativePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation relative to its current position and orientation
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IAnthropomorphicArm.SetRelativePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation relative to its current position and orientation
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.defaultDelay">
            <summary>
            Stores the default delay time for arm commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmGoTo">
            <summary>
            Signature to parse armGoto responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmSetAbsPos">
            <summary>
            Signature to parse armSetAbsPos responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmGetAbsPos">
            <summary>
            Signature to parse armGetAbsPos responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmMove">
            <summary>
            Signature to parse armMove responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmSetOrientation">
            <summary>
            Signature to parse armSetOrientation responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmGetOrientation">
            <summary>
            Signature to parse armGetOrientation responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmSetRelPos">
            <summary>
            Signature to parse armSetRelPos responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmTorque">
            <summary>
            Signature to parse ra_torque responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmOpenGrip">
            <summary>
            Signature to parse armOpenGrip responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.sgnArmCloseGrip">
            <summary>
            Signature to parse armCloseGrip responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoArmManager
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.CreateArmSignatures">
            <summary>
            Creates the Arm Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.CloseGrip">
            <summary>
            Request arm to close the grip
            </summary>
            <returns>true if arm closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.CloseGrip(System.Int32)">
            <summary>
            Request arm to close the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if arm closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.CloseGrip(System.Int32,System.Int32)">
            <summary>
            Request arm to close the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm closed the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GetAbsolutePosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request the arm for it's current position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <returns>true if data acquisition was successfull. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request the arm for it's current position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if data acquisition was successfull. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request the arm for it's current position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <returns>true if data acquisition was successfull. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request the arm for it's current position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if data acquisition was successfull. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GetOrientation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified orientation
            </summary>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to the specified orientation. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GetOrientation(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified orientation
            </summary>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to the specified orientation. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GoTo(System.String)">
            <summary>
            Request arm to move to the specified position
            </summary>
            <param name="position">Name of the position to move at</param>
            <returns>true if arm moved to the specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.GoTo(System.String,System.Int32)">
            <summary>
            Request arm to move to the specified position
            </summary>
            <param name="position">Name of the position to move at</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to the specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.Move(System.String)">
            <summary>
            Moves the arm through a secuence of positions
            </summary>
            <param name="movement">The name of the movement to perform</param>
            <returns>true if arm executed the specified movement. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.Move(System.String,System.Int32)">
            <summary>
            Moves the arm through a secuence of positions
            </summary>
            <param name="movement">The name of the movement to perform</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm executed the specified movement. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.OpenGrip">
            <summary>
            Request arm to open the grip
            </summary>
            <returns>true if arm opened the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.OpenGrip(System.Int32)">
            <summary>
            Request arm to open the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <returns>true if arm opened the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.OpenGrip(System.Int32,System.Int32)">
            <summary>
            Request arm to open the grip
            </summary>
            <param name="percentage">Percentage aperture of the grip</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm opened the grip. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetAbsolutePosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified position
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetAbsolutePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified position and orientation
            </summary>
            <param name="x">Absolute x coordinate position of the actuator of the arm.</param>
            <param name="y">Absolute y coordinate position of the actuator of the arm.</param>
            <param name="z">Absolute z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetOrientation(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified orientation
            </summary>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to the specified orientation. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetOrientation(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified orientation
            </summary>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to the specified orientation. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetRelativePosition(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position relative to its current position
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetRelativePosition(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified position  relative to its current position
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetRelativePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation relative to its current position and orientation
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetRelativePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified position and orientation relative to its current position and orientation
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetRelativePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Request arm to move to the specified position and orientation relative to its current position and orientation
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SetRelativePosition(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request arm to move to the specified position and orientation relative to its current position and orientation
            </summary>
            <param name="x">Relative x coordinate position of the actuator of the arm.</param>
            <param name="y">Relative y coordinate position of the actuator of the arm.</param>
            <param name="z">Relative z coordinate position of the actuator of the arm.</param>
            <param name="roll">Angle of rotation about the X-axis of the actuator of the arm.</param>
            <param name="pitch">Angle of rotation about the Y-axis of the actuator of the arm.</param>
            <param name="yaw">Angle of rotation about the Z-axis of the actuator of the arm.</param>
            <param name="elbow">Angle in radians of the elbow of the arm.</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm moved to specified position. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.Torque(System.String)">
            <summary>
            Moves the arm through a secuence of positions
            </summary>
            <param name="torque">The name of the movement to perform</param>
            <returns>true if arm executed the specified movement. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.Torque(System.String,System.Int32)">
            <summary>
            Moves the arm through a secuence of positions
            </summary>
            <param name="torque">The name of the movement to perform</param>
            <param name="timeOut">Amout of time to wait for an arm response in milliseconds</param>
            <returns>true if arm executed the specified movement. false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for arm commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmGoTo">
            <summary>
            Gets the Signature object to parse armGoto responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmSetAbsPos">
            <summary>
            Gets the Signature object to parse armSetAbsPos responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmGetAbsPos">
            <summary>
            Gets the Signature object to parse armGetAbsPos responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmSetOrientation">
            <summary>
            Gets the Signature object to parse armSetOrientation responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmGetOrientation">
            <summary>
            Gets the Signature object to parse armGetOrientation responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmSetRelPos">
            <summary>
            Gets the Signature object to parse armSetRelPos responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmOpenGrip">
            <summary>
            Gets the Signature object to parse armOpenGrip responses
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoArmManager.SgnArmCloseGrip">
            <summary>
            Gets the Signature object to parse armCloseGrip responses
            </summary>
        </member>
        <member name="T:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager">
            <summary>
            Controls remotely the 3DoF Head of Pac-Ito
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.cmdMan">
            <summary>
            Stores the reference to the CommandManager which this object serves
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.defaultDelay">
            <summary>
            Stores the default delay time for head commands
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.sgnHeadLookAt">
            <summary>
            Signature to parse lookat responses
            </summary>
        </member>
        <member name="F:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.sgnHeadShow">
            <summary>
            Signature to parse show responses
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.#ctor(Robotics.PacIto.PacItoCommandManager)">
            <summary>
            Initializes a new instance of PacItoCommandManager
            <param name="cmdMan">The reference to the CommandManager which this object serves</param>
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.CreateHeadSignatures">
            <summary>
            Creates the Arm Signatures
            </summary>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double,System.Double)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="pan">The pan of the face</param>
            <param name="tilt">The tilt of the face</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double@,System.Double@)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="pan">The pan of the face</param>
            <param name="tilt">The tilt of the face</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double,System.Double,System.Int32)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="pan">The pan of the face</param>
            <param name="tilt">The tilt of the face</param>
            <param name="timeOut">Amout of time to wait for a head response in milliseconds</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double@,System.Double@,System.Int32)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="pan">The pan of the face</param>
            <param name="tilt">The tilt of the face</param>
            <param name="timeOut">Amout of time to wait for a head response in milliseconds</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double,System.Double,System.Double)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="neck">The neck angle of the face</param>
            <param name="pan">The pan of the face</param>
            <param name="tilt">The tilt of the face</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double@,System.Double@,System.Double)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="neck">The neck angle of the face</param>
            <param name="pan">The pan of the face</param>
            <param name="tilt">The tilt of the face</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="neck">The neck angle of the face</param>
            <param name="pan">The pan  of the face</param>
            <param name="tilt">The tilt of the face</param>
            <param name="timeOut">Amout of time to wait for a head response in milliseconds</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.LookAt(System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Request head to move the specified orientation
            </summary>
            <param name="neck">The neck angle of the face</param>
            <param name="pan">The pan  of the face</param>
            <param name="tilt">The tilt of the face</param>
            <param name="timeOut">Amout of time to wait for a head response in milliseconds</param>
            <returns>true if head moved to the specified location. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.Show(System.String)">
            <summary>
            Request head to show the specified expression
            </summary>
            <param name="expression">The expression to be shown by the face</param>
            <returns>true if head showed the specified expression. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.Show(System.String,System.Int32)">
            <summary>
            Request head to show the specified expression
            </summary>
            <param name="expression">The expression to be shown by the face</param>
            <param name="timeOut">Amout of time to wait for a head response in milliseconds</param>
            <returns>true if head showed the specified expression. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.Show(System.String,System.Double)">
            <summary>
            Request head to show the specified expression
            </summary>
            <param name="expression">The expression to be shown by the face</param>
            <param name="showTime">The amoun of time in seconds the expression will be shown</param>
            <returns>true if head showed the specified expression. false otherwise</returns>
        </member>
        <member name="M:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.Show(System.String,System.Double,System.Int32)">
            <summary>
            Request head to show the specified expression
            </summary>
            <param name="expression">The expression to be shown by the face</param>
            <param name="showTime">The amoun of time in seconds the expression will be shown</param>
            <param name="timeOut">Amout of time to wait for a head response in milliseconds</param>
            <returns>true if head showed the specified expression. false otherwise</returns>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.CmdMan">
            <summary>
            Gets the CommandManager which this object serves
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.DefaultDelay">
            <summary>
            Gets or Sets the default delay time for head commands
            </summary>
        </member>
        <member name="P:Robotics.PacIto.PacItoCommandManager.PacItoHeadManager.SgnHeadLookAt">
            <summary>
            Gets the Signature object to parse lookat responses
            </summary>
        </member>
        <member name="T:Robotics.Utilities.LogWriter">
            <summary>
            Represents a writer that can write a sequential series of characters as a Log.
            </summary>
        </member>
        <member name="F:Robotics.Utilities.LogWriter.textWriter">
            <summary>
            The text writer to perform write operations
            </summary>
        </member>
        <member name="F:Robotics.Utilities.LogWriter.verbosityTreshold">
            <summary>
            The verbosity treshold
            </summary>
        </member>
        <member name="F:Robotics.Utilities.LogWriter.defaultVerbosity">
            <summary>
            Default verbosity for write operations
            </summary>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.#ctor">
            <summary>
            Initializes a new instance of the LogWriter class
            </summary>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the LogWriter class
            </summary>
            <param name="textWriter">The text writer to perform write operations</param>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.#ctor(System.IO.TextWriter,System.Int32)">
            <summary>
            Initializes a new instance of the LogWriter class
            </summary>
            <param name="textWriter">The text writer to perform write operations</param>
            <param name="defaultVerbosity">Default verbosity for write operations</param>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.Close">
            <summary>
            Closes the current writer and releases any system resources associated with the writer. 
            </summary>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.Dispose">
            <summary>
            Overloaded. Releases all resources used by the TextWriter object.
            </summary>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.  
            </summary>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.Write(System.String)">
            <summary>
            Writes the given data type to a text stream.
            </summary>
            <param name="text">The string to write</param>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.Write(System.Int32,System.String)">
            <summary>
            Writes the given data type to a text stream.
            </summary>
            <param name="level">The verbosity level</param>
            <param name="text">The string to write</param>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.WriteLine(System.String)">
            <summary>
            If the provided verbosity level is smaller than the verbosity treshold, writes some data as specified by the overloaded parameters, followed by a line terminator.
            </summary>
            <param name="text">The string to write</param>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.WriteLine(System.Int32,System.String)">
            <summary>
            If the provided verbosity level is smaller than the verbosity treshold, writes some data as specified by the overloaded parameters, followed by a line terminator.
            </summary>
            <param name="level">The verbosity level</param>
            <param name="text">The string to write</param>
        </member>
        <member name="M:Robotics.Utilities.LogWriter.WriteLine">
            <summary>
            Writes a line terminator.
            </summary>
        </member>
        <member name="P:Robotics.Utilities.LogWriter.DefaultVerbosity">
            <summary>
            Gets or sets the default verbosity for write operations
            </summary>
        </member>
        <member name="P:Robotics.Utilities.LogWriter.Encoding">
            <summary>
              When overridden in a derived class, returns the Encoding in which the output is written. 
            </summary>
        </member>
        <member name="P:Robotics.Utilities.LogWriter.FormatProvider">
            <summary>
            Gets an object that controls formatting. 
            </summary>
        </member>
        <member name="P:Robotics.Utilities.LogWriter.NewLine">
            <summary>
            Gets or sets the line terminator string used by the current LogWriter. 
            </summary>
        </member>
        <member name="P:Robotics.Utilities.LogWriter.VerbosityTreshold">
            <summary>
            gets or sets the verbosity treshold
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.ISensorError">
            <summary>
            Represents an object that contains information about an error of a sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.ISensorError.ErrorCode">
            <summary>
            Gets the error code returned by the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.ISensorError.ErrorDescription">
            <summary>
            Gets a description of the error
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.IntSharedVariable">
            <summary>
            Gets access to an INTEGER variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.Deserialize(System.String,System.Int32@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.Serialize(System.Int32,System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.IntSharedVariable.TypeName">
            <summary>
            Returns "int"
            </summary>
        </member>
        <member name="T:Robotics.API.Module">
            <summary>
            Encapsulates a CommandManager, ConnectionManager and other objects required
            to create a module for connection to Blackboard. This class is designed for 
            COM Interop
            </summary>
        </member>
        <member name="T:Robotics.API.IModule">
            <summary>
            Represents a Module object for COM Interop
            </summary>
        </member>
        <member name="M:Robotics.API.IModule.Initialize(System.String,System.Int32)">
            <summary>
            Initializes the module
            </summary>
            <param name="moduleName">The name of the module</param>
            <param name="port">The connection port for tcp server</param>
            <returns>Zero if the object was initialized successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.IModule.RegFuncForACE(System.String,Robotics.API.CommandExecuterMethod,System.Boolean)">
            <summary>
            Registers a method or function to work as an asynchronous command executer
            </summary>
            <param name="commandName">The name of the command that the AsyncFunctionCE will execute</param>
            <param name="executerMethod">The method/function that will perform the command execution</param>
            <param name="parametersRequired">Indicates if the method or function requires parameters to be executed</param>
            <returns>Zero if the method or function was registered successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.IModule.RegFuncForSCE(System.String,Robotics.API.CommandExecuterMethod,System.Boolean)">
            <summary>
            Registers a method or function to work as a synchronous command executer
            </summary>
            <param name="commandName">The name of the command that the AsyncFunctionCE will execute</param>
            <param name="executerMethod">The method/function that will perform the command execution</param>
            <param name="parametersRequired">Indicates if the method or function requires parameters to be executed</param>
            <returns>Zero if the method or function was registered successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.IModule.Start">
            <summary>
            Starts the module engine
            </summary>
            <returns>Zero if the method or function was started successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.IModule.Stop">
            <summary>
            Stops the module engine
            </summary>
            <returns>Zero if the method or function was stopped successfully, otherwise it returns the error number</returns>
        </member>
        <member name="P:Robotics.API.IModule.ConnectionManager">
            <summary>
            Gets the ConnectionManager object that the module uses to manage connections
            </summary>
        </member>
        <member name="P:Robotics.API.IModule.CommandManager">
            <summary>
            Gets the CommandManager object that the module uses to manage and execute commands
            </summary>
        </member>
        <member name="F:Robotics.API.Module.initialized">
            <summary>
            Flag that indicates if the module has been initialized
            </summary>
        </member>
        <member name="M:Robotics.API.Module.#ctor">
            <summary>
            Initializes a new instance of Module
            </summary>
        </member>
        <member name="M:Robotics.API.Module.GetErrorCode(System.Exception)">
            <summary>
            Gets an error code based on an Exeption object
            </summary>
            <param name="exception">The exception to get the error code from</param>
            <returns>An integer that represents the exception</returns>
        </member>
        <member name="M:Robotics.API.Module.Initialize(System.String,System.Int32)">
            <summary>
            Initializes the module
            </summary>
            <param name="moduleName">The name of the module</param>
            <param name="port">The connection port for tcp server</param>
            <returns>Zero if the object was initialized successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.Module.RegFuncForACE(System.String,Robotics.API.CommandExecuterMethod,System.Boolean)">
            <summary>
            Registers a method or function to work as an asynchronous command executer
            </summary>
            <param name="commandName">The name of the command that the AsyncFunctionCE will execute</param>
            <param name="executerMethod">The method/function that will perform the command execution</param>
            <param name="parametersRequired">Indicates if the method or function requires parameters to be executed</param>
            <returns>Zero if the method or function was registered successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.Module.RegFuncForSCE(System.String,Robotics.API.CommandExecuterMethod,System.Boolean)">
            <summary>
            Registers a method or function to work as a synchronous command executer
            </summary>
            <param name="commandName">The name of the command that the AsyncFunctionCE will execute</param>
            <param name="executerMethod">The method/function that will perform the command execution</param>
            <param name="parametersRequired">Indicates if the method or function requires parameters to be executed</param>
            <returns>Zero if the method or function was registered successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.Module.Start">
            <summary>
            Starts the module engine
            </summary>
            <returns>Zero if the method or function was started successfully, otherwise it returns the error number</returns>
        </member>
        <member name="M:Robotics.API.Module.Stop">
            <summary>
            Stops the module engine
            </summary>
            <returns>Zero if the method or function was stopped successfully, otherwise it returns the error number</returns>
        </member>
        <member name="P:Robotics.API.Module.ConnectionManager">
            <summary>
            Gets the ConnectionManager object that the module uses to manage connections
            </summary>
        </member>
        <member name="P:Robotics.API.Module.CommandManager">
            <summary>
            Gets the CommandManager object that the module uses to manage and execute commands
            </summary>
        </member>
        <member name="T:Robotics.API.AsyncCommandExecuter">
            <summary>
            Serves as base class for classes which allow execute a Command asynchronously
            </summary>
        </member>
        <member name="T:Robotics.API.CommandExecuter">
            <summary>
            Serves as base class for classes which allow execute a Command
            </summary>
        </member>
        <member name="T:Robotics.API.ICommandExecuter">
            <summary>
            Serves as base class for classes which allow execute a Command
            </summary>
        </member>
        <member name="M:Robotics.API.ICommandExecuter.Abort">
            <summary>
            Aborts the command execution
            If a response is required, a failure response will be generated and sent automatically
            </summary>
            <returns>true if command was aborted successfully, false otherwise</returns>
            <remarks>Not all implementations derived of CommandExecuter may be abortables</remarks>
        </member>
        <member name="M:Robotics.API.ICommandExecuter.DefaultParameterParser(System.String[])">
            <summary>
            When overriden, receives the parameters of an analyzed command by the default Signature object as an array of strings
            </summary>
            <param name="parameters">Array of strings containing the parameters of the command</param>
        </member>
        <member name="M:Robotics.API.ICommandExecuter.Execute(Robotics.API.Command)">
            <summary>
            Executes the provided Command
            </summary>
            <param name="command">Command to execute</param>
        </member>
        <member name="E:Robotics.API.ICommandExecuter.ConsoleUpdated">
            <summary>
            Occurs when text has been writted to the console
            </summary>
        </member>
        <member name="E:Robotics.API.ICommandExecuter.ExecutionStarted">
            <summary>
            Occurs when the execution of the command has started by the CommandManager
            but before the method that manages the command execution be executed
            </summary>
        </member>
        <member name="E:Robotics.API.ICommandExecuter.ExecutionAborted">
            <summary>
            Occurs when the execution of the command has been aborted and a failure response has been sent
            </summary>
        </member>
        <member name="E:Robotics.API.ICommandExecuter.ExecutionFinished">
            <summary>
            Occurs when the execution of the command has finished its execution and the response has been sent
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandExecuter.Busy">
            <summary>
            Gets a value that indicates if the CommandExecuter is busy
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandExecuter.CommandManager">
            <summary>
            Gets the CommandManager object to which this CommandExecuter is bound to
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandExecuter.CommandName">
            <summary>
            Gets the name of the command that the CommandExecuter will execute
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandExecuter.IsRunning">
            <summary>
            Gets a value that indicates if the CommandExecuter is running
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandExecuter.ParametersRequired">
            <summary>
            Gets a value indicating if the executer requires parameters
            </summary>
        </member>
        <member name="P:Robotics.API.ICommandExecuter.ResponseRequired">
            <summary>
            Stores a value that indicates if the executer must generate and send a response
            </summary>
        </member>
        <member name="F:Robotics.API.CommandExecuter.cmdMan">
            <summary>
            Stores the CommandManager object to which this CommandExecuter is bound to
            </summary>
        </member>
        <member name="F:Robotics.API.CommandExecuter.commandName">
            <summary>
            Stores the name of the command that the CommandExecuter will execute
            </summary>
        </member>
        <member name="F:Robotics.API.CommandExecuter.responseRequired">
            <summary>
            Stores a value that indicates if the executer must generate and send a response
            </summary>
        </member>
        <member name="F:Robotics.API.CommandExecuter.signature">
            <summary>
            Stores the signature asociated to this command
            </summary>
        </member>
        <member name="M:Robotics.API.CommandExecuter.#ctor(Robotics.API.Signature)">
            <summary>
            Initializes a new instance of CommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.#ctor(Robotics.API.Signature,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of CommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.#ctor(System.String)">
            <summary>
            Initializes a new instance of CommandExecuter
            </summary>
            <param name="commandName">The name of the command that the CommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.#ctor(System.String,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of CommandExecuter
            </summary>
            <param name="commandName">The name of the command that the CommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.Abort">
            <summary>
            Aborts the command execution
            If a response is required, a failure response will be generated and sent automatically
            </summary>
            <returns>true if command was aborted successfully, false otherwise</returns>
            <remarks>Not all implementations derived of CommandExecuter may be abortables</remarks>
        </member>
        <member name="M:Robotics.API.CommandExecuter.DefaultParameterParser(System.String[])">
            <summary>
            When overriden, receives the parameters of an analyzed command by the default Signature object as an array of strings
            </summary>
            <param name="parameters">Array of strings containing the parameters of the command</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.Execute(Robotics.API.Command)">
            <summary>
            Executes the provided Command
            </summary>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.Console(System.String)">
            <summary>
            Output console
            </summary>
            <param name="text">The text to be written</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.OnConsoleUpdated(System.String)">
            <summary>
            Raises the OnConsoleUpdated Event
            </summary>
            <param name="text">The text sent to the Console</param>
            <remarks>The OnConsoleUpdated method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnConsoleUpdated in a derived class, be sure to call the base class's OnConsoleUpdated method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.CommandExecuter.OnExecutionAborted(Robotics.API.Command)">
            <summary>
            Raises the ExecutionAborted Event and sends a failure response
            </summary>
            <param name="command">The command which execution was aborted</param>
            <remarks>The OnExecutionAborted method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnExecutionAborted in a derived class, be sure to call the base class's OnExecutionAborted method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.CommandExecuter.OnExecutionFinished(Robotics.API.Command,Robotics.API.Response)">
            <summary>
            Raises the ExecutionFinished Event
            </summary>
            <param name="command">The command which execution was finished</param>
            <param name="response">The response generated by the execution of the command (if any)</param>
            <remarks>The OnExecutionFinished method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnExecutionFinished in a derived class, be sure to call the base class's OnExecutionFinished method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.CommandExecuter.OnExecutionStarted(Robotics.API.Command)">
            <summary>
            Raises the ExecutionStarted event
            </summary>
            <param name="command">The command which execution has been started</param>
            <remarks>The OnExecutionStarted method also allows derived classes to handle the event without attaching a delegate.
            This is the preferred technique for handling the event in a derived class.
            When overriding OnExecutionStarted in a derived class, be sure to call the base class's OnExecutionStarted method so that registered
            delegates receive the event</remarks>
        </member>
        <member name="M:Robotics.API.CommandExecuter.ParseParameters(Robotics.API.Command)">
            <summary>
            Uses the asociated Signature object to parse the provided Command object parameters and execute the corresponding method
            </summary>
            <param name="command">The Command object which parameters will be parsed</param>
            <returns>true if parameters was parsed successfully and the corresponding method executed, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.CommandExecuter.SendCommand(Robotics.API.Command)">
            <summary>
            Sends a command through the asociated ConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="command">Command to be sent</param>
            <returns>true if command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.CommandExecuter.SendResponse(System.Boolean,Robotics.API.Command)">
            <summary>
            Creates a response and sends it through the asociated ConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="success">Indicates if command succeded</param>
            <param name="command">Command to respond</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.SendResponse(System.Boolean,Robotics.API.Command,Robotics.API.Response@)">
            <summary>
            Creates a response and sends it through the asociated ConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="success">Indicates if command succeded</param>
            <param name="command">Command to respond</param>
            <param name="response">Generated response</param>
        </member>
        <member name="M:Robotics.API.CommandExecuter.SendResponse(Robotics.API.Response)">
            <summary>
            Sends a Response through the asociated ConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="response">Response object to be sent</param>
        </member>
        <member name="E:Robotics.API.CommandExecuter.ConsoleUpdated">
            <summary>
            Occurs when text has been writted to the console
            </summary>
        </member>
        <member name="E:Robotics.API.CommandExecuter.ExecutionStarted">
            <summary>
            Occurs when the execution of the command has started by the CommandManager
            but before the method that manages the command execution be executed
            </summary>
        </member>
        <member name="E:Robotics.API.CommandExecuter.ExecutionAborted">
            <summary>
            Occurs when the execution of the command has been aborted and a failure response has been sent
            </summary>
        </member>
        <member name="E:Robotics.API.CommandExecuter.ExecutionFinished">
            <summary>
            Occurs when the execution of the command has finished its execution and the response has been sent
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuter.Busy">
            <summary>
            Gets a value that indicates if the CommandExecuter is busy
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuter.CommandManager">
            <summary>
            Gets the CommandManager object to which this CommandExecuter is bound to
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuter.CommandName">
            <summary>
            Gets the name of the command that the CommandExecuter will execute
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuter.IsRunning">
            <summary>
            Gets a value that indicates if the CommandExecuter is running
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuter.ParametersRequired">
            <summary>
            Gets a value indicating if the executer requires parameters
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuter.ResponseRequired">
            <summary>
            Stores a value that indicates if the executer must generate and send a response
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuter.Signature">
            <summary>
            Gets or sets the signature used to parse the command arguments
            </summary>
        </member>
        <member name="F:Robotics.API.AsyncCommandExecuter.busy">
            <summary>
            Indicates if the executer is busy
            </summary>
        </member>
        <member name="F:Robotics.API.AsyncCommandExecuter.asyncExecutionThread">
            <summary>
            Thread for async execution of the command
            </summary>
        </member>
        <member name="F:Robotics.API.AsyncCommandExecuter.running">
            <summary>
            Flag that indicates if the asyncExecutionThread is running
            </summary>
        </member>
        <member name="F:Robotics.API.AsyncCommandExecuter.parametersRequired">
            <summary>
            Indicates if the executer requires parameters
            </summary>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.#ctor(Robotics.API.Signature)">
            <summary>
            Initializes a new instance of AsyncCommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.#ctor(Robotics.API.Signature,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of AsyncCommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.#ctor(System.String)">
            <summary>
            Initializes a new instance of AsyncCommandExecuter for the asynchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the AsyncCommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.#ctor(System.String,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of AsyncCommandExecuter for the asynchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the AsyncCommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.Abort">
            <summary>
            Aborts the command execution
            If a response is required, a failure response will be generated and sent automatically
            </summary>
            <returns>true if command was aborted successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.AsyncExecutionThreadTask(System.Object)">
            <summary>
            Asynchronously executes the provided command
            </summary>
            <param name="oCommand">Object which contains the command to be executed</param>
            <remarks>This method is provided to validate the casting and execution of a valid command object by the AsyncTask method</remarks>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.AsyncExecutionThreadTask(Robotics.API.Command,Robotics.API.Response@)">
            <summary>
            Asynchronously executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <param name="response">Response sent as result of command execution</param>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.AsyncTask(Robotics.API.Command)">
            <summary>
            When overriden executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <returns>The Response object result of provided command execution. If no response is required, must return null</returns>
            <remarks>If the command execution is aborted the execution of this method is
            canceled and a failure response is sent if required</remarks>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.BeginParallelSendAndWait">
            <summary>
            Prepares the async command executer to perform multiple send-and-wait operations
            </summary>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.CommitParallelSendAndWait(System.Int32,Robotics.API.CommandResponsePair[]@)">
            <summary>
            Executes all pending send-and-wait operations
            </summary>
            <param name="timeOut">The overall timeout for parallel command execution</param>
            <param name="results">Array of Command/Response pairs result of parallel execution</param>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.EnqueueCommand(Robotics.API.Command)">
            <summary>
            Enqueues a command for a parallel send-and-wait operation
            </summary>
            <param name="command">Command to enqueue</param>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.SendAndWait(Robotics.API.Command,System.Int32,Robotics.API.Response@)">
            <summary>
            Sends a Command and waits for response
            The Command is sent through the asociated AsyncConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="command">Command to be sent</param>
            <param name="timeOut">The timeout for command execution</param>
            <param name="response">The response received</param>
            <returns>true if command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.SendAndWait(Robotics.API.Command[],System.Int32,Robotics.API.CommandResponsePair[]@)">
            <summary>
            Sends multiple commands and waits for its response
            The Command is sent through the asociated AsyncConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="commands">Array of Command objects which contains commands to be sent</param>
            <param name="timeOut">The overall timeout for command execution</param>
            <param name="results">Array of Response objects generated from responses received</param>
            <returns>true if at least one command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.AsyncCommandExecuter.Execute(Robotics.API.Command)">
            <summary>
            Executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <remarks>If the command execution is aborted a failure response is sent if required</remarks>
        </member>
        <member name="P:Robotics.API.AsyncCommandExecuter.Busy">
            <summary>
            Gets a value that indicates if the AsyncCommandExecuter is busy
            </summary>
        </member>
        <member name="P:Robotics.API.AsyncCommandExecuter.IsRunning">
            <summary>
            Gets a value that indicates if the CommandExecuter is running
            </summary>
        </member>
        <member name="P:Robotics.API.AsyncCommandExecuter.ParametersRequired">
            <summary>
            Gets a value indicating if the executer requires parameters
            </summary>
        </member>
        <member name="T:Robotics.API.MiscSharedVariables.KnownHumanFaces">
            <summary>
            Gets access to an HumanFaceProfile variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.#ctor(Robotics.API.CommandManager,System.String,Robotics.HAL.Sensors.KnownHumanFace[],System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.#ctor(System.String)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.#ctor(System.String,Robotics.HAL.Sensors.KnownHumanFace[])">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.Deserialize(System.String,Robotics.HAL.Sensors.KnownHumanFace[]@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.Deserialize(System.String,System.Int32@,Robotics.HAL.Sensors.KnownHumanFace@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="cc">Read header for the serializedData string</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.Serialize(Robotics.HAL.Sensors.KnownHumanFace[],System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.KnownHumanFaces.Serialize(Robotics.HAL.Sensors.KnownHumanFace,System.Text.StringBuilder)">
            <summary>
            Sserializes the provided object into a StrinBuilder object
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="sb">The StringBuilder object where the serialized data will be written</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.KnownHumanFaces.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.KnownHumanFaces.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.KnownHumanFaces.TypeName">
            <summary>
            Returns "string"
            </summary>
        </member>
        <member name="T:Robotics.API.SharedVariablesLoadedEventHandler">
            <summary>
            Represent the method that will handle the SharedVariablesLoaded of a CommandManager
            </summary>
            <param name="cmdMan">The CommandManager object which raises the event</param>
        </member>
        <member name="T:Robotics.API.AsyncSendAndWaitCaller">
            <summary>
            Handles asynchronous calls to the SendAndWait Method
            </summary>
            <param name="command">Command to be sent</param>
            <param name="timeOut">The timeout for command execution</param>
            <param name="response">The response received</param>
            <returns>true if command was sent and its response received. false otherwise</returns>
        </member>
        <member name="T:Robotics.Runnable">
            <summary>
            Represents a class which executes in a separate thread
            </summary>
        </member>
        <member name="T:Robotics.IRunnable">
            <summary>
            Implements an object which executes in a separate thread
            </summary>
        </member>
        <member name="M:Robotics.IRunnable.Abort">
            <summary>
            Aborts the execution of the asynchronous task of the IRunnable object
            </summary>
        </member>
        <member name="M:Robotics.IRunnable.Run">
            <summary>
            Executes the asynchronous task of the IRunnable object
            </summary>
        </member>
        <member name="M:Robotics.IRunnable.Signal">
            <summary>
            Unblocks the thread that is waiting for a signal. It is commonly used to synchronize threads
            </summary>
        </member>
        <member name="E:Robotics.IRunnable.ExecutionAborted">
            <summary>
            Occurs when the execution of the IRunnable object is aborted
            </summary>
        </member>
        <member name="E:Robotics.IRunnable.ExecutionCompleted">
            <summary>
            Occurs when the execution of the IRunnable object is completed
            </summary>
        </member>
        <member name="E:Robotics.IRunnable.ExecutionStarted">
            <summary>
            Occurs when the execution of the IRunnable object is started
            </summary>
        </member>
        <member name="P:Robotics.IRunnable.IsRuning">
            <summary>
            Gets or sets a value indicating whether the IRunnable object is running
            </summary>
        </member>
        <member name="P:Robotics.IRunnable.RunInBackground">
            <summary>
            Gets or sets a value indicating whether the IRunnable object executes or not in a background thread
            </summary>
        </member>
        <member name="F:Robotics.Runnable.mainThread">
            <summary>
            The thread that executes the async task
            </summary>
        </member>
        <member name="F:Robotics.Runnable.mainThreadTask">
            <summary>
            Represents the Task method
            </summary>
        </member>
        <member name="F:Robotics.Runnable.autoEvent">
            <summary>
            Event used to synchronize threads
            </summary>
        </member>
        <member name="F:Robotics.Runnable.runInBackground">
            <summary>
            Indicaties whether the Runnable object executes or not in a background thread
            </summary>
        </member>
        <member name="M:Robotics.Runnable.#ctor">
            <summary>
            Initializes a new instance of a Runnable class
            </summary>
        </member>
        <member name="M:Robotics.Runnable.Abort">
            <summary>
            Aborts the execution of the asynchronous task of the Runnable object
            </summary>
        </member>
        <member name="M:Robotics.Runnable.Run">
            <summary>
            Executes the asynchronous task of the Runnable object
            </summary>
        </member>
        <member name="M:Robotics.Runnable.MainThreadTask">
            <summary>
            Raises events and executes the Task method
            </summary>
        </member>
        <member name="M:Robotics.Runnable.OnExecutionAborted">
            <summary>
            Raises the ExecutionAborted event.
            When overriding OnExecutionAborted in a derived class, be sure to call the base class's OnExecutionAborted method so that registered delegates receive the event. 
            </summary>
        </member>
        <member name="M:Robotics.Runnable.OnExecutionCompleted">
            <summary>
            Raises the ExecutionCompleted event.
            When overriding OnExecutionCompleted in a derived class, be sure to call the base class's OnExecutionCompleted method so that registered delegates receive the event. 
            </summary>
        </member>
        <member name="M:Robotics.Runnable.OnExecutionStarted">
            <summary>
            Raises the ExecutionStarted event.
            When overriding OnExecutionStarted in a derived class, be sure to call the base class's OnExecutionStarted method so that registered delegates receive the event. 
            </summary>
        </member>
        <member name="M:Robotics.Runnable.Signal">
            <summary>
            Unblocks the thread that is waiting for a signal. It is commonly used to synchronize threads
            </summary>
        </member>
        <member name="M:Robotics.Runnable.Wait">
            <summary>
            Blocks the thread until a signal is received (another thread calls the Signal method)
            </summary>
        </member>
        <member name="M:Robotics.Runnable.Wait(System.Int32)">
            <summary>
            Blocks the thread until a signal is received (another thread calls the Signal method) or the specified time elapses
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or -1 to wait indefinitely</param>
        </member>
        <member name="M:Robotics.Runnable.Wait(System.TimeSpan)">
            <summary>
            Blocks the thread until a signal is received (another thread calls the Signal method) or the specified time elapses
            </summary>
            <param name="timeout">A TimeSpan that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely</param>
        </member>
        <member name="M:Robotics.Runnable.Task">
            <summary>
            When overriden, executes the asynchronous task
            </summary>
        </member>
        <member name="E:Robotics.Runnable.ExecutionAborted">
            <summary>
            Occurs when the execution of the Runnable object is aborted
            </summary>
        </member>
        <member name="E:Robotics.Runnable.ExecutionCompleted">
            <summary>
            Occurs when the execution of the Runnable object is completed
            </summary>
        </member>
        <member name="E:Robotics.Runnable.ExecutionStarted">
            <summary>
            Occurs when the execution of the Runnable object is started
            </summary>
        </member>
        <member name="P:Robotics.Runnable.MainThread">
            <summary>
            Gets the thread that executes the async task
            </summary>
        </member>
        <member name="P:Robotics.Runnable.RunInBackground">
            <summary>
            Gets or sets a value indicating whether the Runnable object executes or not in a background thread
            </summary>
        </member>
        <member name="P:Robotics.Runnable.IsRuning">
            <summary>
            Gets or sets a value indicating whether the Runnable object is running
            </summary>
        </member>
        <member name="T:Robotics.StringEventHandler">
            <summary>
            Represents the method that will handle an event that receives a string as parameter
            </summary>
            <param name="str">String to pass</param>
        </member>
        <member name="T:Robotics.StringArrayEventHandler">
            <summary>
            Represents the method that will handle an event that receives an array of strings as parameter
            </summary>
            <param name="str">String to pass</param>
        </member>
        <member name="T:Robotics.DoubleEventHandler">
            <summary>
            Represents the method that will handle an event that receives a double as parameter 
            </summary>
            <param name="str">double to pass</param>
        </member>
        <member name="T:Robotics.VoidEventHandler">
            <summary>
            Represents the method that will handle an event that receives no parameters
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.SynchronousPipe`1">
            <summary>
            Implements a synchronous pipe which can be used to communicate two Filter objects.
            A synchronous pipe will synchronize two filters passing the written data directly to the reader.
            </summary>
            <typeparam name="T">The type of data transmited through the pipe</typeparam>
        </member>
        <member name="T:Robotics.Paralelism.IPipe`1">
            <summary>
            Represents a pipe which can be used to communicate two Filter objects.
            </summary>
            <typeparam name="T">The type of data transmited through the pipe</typeparam>
        </member>
        <member name="M:Robotics.Paralelism.IPipe`1.Read">
            <summary>
            Reads data from the pipe.
            </summary>
            <returns>The data written on the other side of the pipe</returns>
        </member>
        <member name="M:Robotics.Paralelism.IPipe`1.Write(`0)">
            <summary>
            Writes data to the pipe.
            </summary>
            <param name="data">The data to be readed on the other side of the pipe</param>
        </member>
        <member name="M:Robotics.Paralelism.IPipe`1.TryRead(System.Int32,`0@)">
            <summary>
            Tries to read data from the pipe before the timeout elapses.
            </summary>
            <param name="timeout">The maximum amount of time in milliseconds to wait for the read operation to complete</param>
            <param name="data">When this method returns contains a data written on the other side of the pipe
            if the read succeded, or the default value of T if the timeout elapsed</param>
            <returns>true if the read operation suceeded, false otherwise.</returns>
        </member>
        <member name="M:Robotics.Paralelism.IPipe`1.TryWrite(`0,System.Int32)">
            <summary>
            Writes data to the pipe before the timeout elapses.
            </summary>
            <param name="timeout">The maximum amount of time in milliseconds to wait for the write operation to complete</param>
            <param name="data">The data to be readed by the other side of the pipe.</param>
            <returns>true if the write operation suceeded, false otherwise.</returns>
        </member>
        <member name="P:Robotics.Paralelism.IPipe`1.Capacity">
            <summary>
            Gets the maximum capacity of the pipe
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.SynchronousPipe`1.buffer">
            <summary>
            Temporary stores data
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.SynchronousPipe`1.readEvent">
            <summary>
            Event used for synchronization on write
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.SynchronousPipe`1.rLock">
            <summary>
            Object used for synchronous access to the read method
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.SynchronousPipe`1.writeEvent">
            <summary>
            Event used for synchronization on write
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.SynchronousPipe`1.wLock">
            <summary>
            Object used for synchronous access to the write method
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.SynchronousPipe`1.#ctor">
            <summary>
            Initializes a new instance of SynchronousPipe
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.SynchronousPipe`1.Read">
            <summary>
            Reads data from the pipe.
            It blocks the thread until another thread writes data
            </summary>
            <returns>The data written on the other side of the pipe</returns>
        </member>
        <member name="M:Robotics.Paralelism.SynchronousPipe`1.Write(`0)">
            <summary>
            Writes data to the pipe.
            It blocks the thread until another thread reads data
            </summary>
            <param name="data">The data to be read on the other side of the pipe</param>
        </member>
        <member name="M:Robotics.Paralelism.SynchronousPipe`1.TryRead(System.Int32,`0@)">
            <summary>
            Tries to read data from the pipe before the timeout elapses.
            It blocks the thread until another thread writes data
            </summary>
            <param name="timeout">The maximum amount of time in milliseconds to wait for a writer
            on the other side of the pipe</param>
            <param name="data">When this method returns contains the data written on the other side of the pipe
            if the read succeded, or the default value of T if the timeout elapses</param>
            <returns>true if the read operation suceeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.Paralelism.SynchronousPipe`1.TryWrite(`0,System.Int32)">
            <summary>
            Tries to write data to the pipe before the timeout elapses.
            It blocks the thread until another thread reads data
            </summary>
            <param name="timeout">The maximum amount of time in milliseconds to wait for a reader
            on the other side of the pipe</param>
            <param name="data">The data to be readed on the other side of the pipe</param>
            <returns>true if the write operation suceeded, false otherwise</returns>
        </member>
        <member name="P:Robotics.Paralelism.SynchronousPipe`1.Capacity">
            <summary>
            Gets the maximum capacity of the pipe
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.FunctionState">
            <summary>
            Encapsulates information to use a class method as a state of a state machine
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.IState">
            <summary>
            Represents a state of a state machine
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.IState.Execute">
            <summary>
            Executes the current state of the state machine
            </summary>
            <returns>The zero-based index of the next state to be executed</returns>
        </member>
        <member name="P:Robotics.StateMachines.IState.StateNumber">
            <summary>
            Gets the zero-based index of the state
            </summary>
            <returns></returns>
        </member>
        <member name="P:Robotics.StateMachines.IState.IsAcceptState">
            <summary>
            Gets a value indicating if the state is an accept state in the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.FunctionState.isAcceptState">
            <summary>
            Indicates if the state is an accept state of the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.FunctionState.stateFunction">
            <summary>
            SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.FunctionState.stateFunctionParameters">
            <summary>
            The parameters to be pased to the state function
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.FunctionState.stateNumber">
            <summary>
            The zero-based index of the state
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.FunctionState.#ctor(System.Int32,Robotics.StateMachines.SMStateFuncion)">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateNumber">The zero-based index of the state</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.FunctionState.#ctor(System.Int32,Robotics.StateMachines.SMStateFuncion,System.Boolean)">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateNumber">The zero-based index of the state</param>
            <param name="isAccept">Indicates if the state is an accept state of the state machine</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.FunctionState.#ctor(System.Int32,Robotics.StateMachines.SMStateFuncion,System.Object)">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateNumber">The zero-based index of the state</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
            <param name="stateFunctionParameters">The parameters to be pased to the state function</param>
        </member>
        <member name="M:Robotics.StateMachines.FunctionState.#ctor(System.Int32,Robotics.StateMachines.SMStateFuncion,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateNumber">The zero-based index of the state</param>
            <param name="isAccept">Indicates if the state is an accept state of the state machine</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
            <param name="stateFunctionParameters">The parameters to be pased to the state function</param>
        </member>
        <member name="M:Robotics.StateMachines.FunctionState.Execute">
            <summary>
            Executes the current state of the state machine
            </summary>
            <returns>The zero-based index of the next state to be executed</returns>
        </member>
        <member name="P:Robotics.StateMachines.FunctionState.IsAcceptState">
            <summary>
            Gets a value indicating if the state is an accept state of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.FunctionState.StateFunction">
            <summary>
            Gets the SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.FunctionState.StateFunctionParameters">
            <summary>
            Gets or sets the parameters to be pased to the state function
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.FunctionState.StateNumber">
            <summary>
            Gets the zero-based index of the state
            </summary>
            <returns>The zero-based index of the state</returns>
        </member>
        <member name="T:Robotics.HAL.Ray">
            <summary>
            Represents a inifinite length ray
            </summary>
        </member>
        <member name="T:Robotics.HAL.IIntersectable">
            <summary>
            Represents a intersectable object
            </summary>
        </member>
        <member name="T:Robotics.HAL.IPositionable">
            <summary>
            Represents a physical which has a position
            </summary>
        </member>
        <member name="M:Robotics.HAL.IPositionable.Distance(Robotics.HAL.IPositionable)">
            <summary>
            Calculates the distance between this instance and another IPositionable object
            </summary>
            <param name="p">IPositionable object</param>
            <returns>Vector3 that represents the distance vector between two IPositionable objects</returns>
        </member>
        <member name="P:Robotics.HAL.IPositionable.Position">
            <summary>
            Gets or sets the position of the centroid of the Ipositionable object
            </summary>
        </member>
        <member name="M:Robotics.HAL.IIntersectable.Intersects(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of IIntersectable intersects with another
            </summary>
            <param name="other">IIntersectable object to check intersection with</param>
            <returns>true if there is intersection, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IIntersectable.Contains(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of IIntersectable contains the provided IIntersectable instance
            </summary>
            <param name="other">IIntersectable object to check contention with</param>
            <returns>true if the IIntersectable object provided is completely contained within, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.IIntersectable.Contains(Robotics.HAL.IPositionable)">
            <summary>
            Checks if this instance of IIntersectable contains the provided IPositionable instance
            </summary>
            <param name="position">IPositionable object to check contention with</param>
            <returns>true if the IPositionable object provided is inside this instance, false otherwise</returns>
        </member>
        <member name="F:Robotics.HAL.Ray.position">
            <summary>
            The position of the ray
            </summary>
        </member>
        <member name="F:Robotics.HAL.Ray.director">
            <summary>
            The director vector of the ray
            </summary>
        </member>
        <member name="M:Robotics.HAL.Ray.#ctor">
            <summary>
            Initializes a new instance of Ray
            </summary>
        </member>
        <member name="M:Robotics.HAL.Ray.#ctor(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of Ray
            </summary>
            <param name="rayPosition">The posotion of the ray</param>
            <param name="rayDirection">The direction of the ray</param>
        </member>
        <member name="M:Robotics.HAL.Ray.Intersects(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of Ray intersects with another
            </summary>
            <param name="other">IIntersectable object to check intersection with</param>
            <returns>true if there is intersection, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Ray.Contains(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of Ray contains the provided IIntersectable instance
            </summary>
            <param name="other">IIntersectable object to check contention with</param>
            <returns>true if the IIntersectable object provided is completely contained within, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Ray.Contains(Robotics.HAL.IPositionable)">
            <summary>
            Checks if this instance of Ray contains the point provided by the IPositionable instance
            </summary>
            <param name="position">IPositionable object to check contention with</param>
            <returns>true if the IPositionable object provided is inside this instance, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Ray.Distance(Robotics.HAL.IPositionable)">
            <summary>
            Calculates the distance between this instance and another IPositionable object
            </summary>
            <param name="p">IPositionable object</param>
            <returns>Vector3 that represents the distance vector between two IPositionable objects</returns>
        </member>
        <member name="M:Robotics.HAL.Ray.Distance(Robotics.HAL.Ray)">
            <summary>
            Calculates the distance vector between two rays
            </summary>
            <param name="other">Ray to calculate the distance with</param>
            <returns>Distance between two rays</returns>
        </member>
        <member name="M:Robotics.HAL.Ray.Angle(Robotics.HAL.Ray)">
            <summary>
            Calculates the angle between two rays
            </summary>
            <param name="other">Ray to calculate the angle with</param>
            <returns>Angle between two rays</returns>
        </member>
        <member name="P:Robotics.HAL.Ray.Position">
            <summary>
            Gets or sets the position vector of the ray
            </summary>
        </member>
        <member name="P:Robotics.HAL.Ray.Director">
            <summary>
            Gets or sets the director vector of the ray
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.SensorErrorEventHandler`1">
            <summary>
            Represents the method that will handle the Error event of a ISensor derived class
            </summary>
            <param name="sensor">The ISensor object which raises the event</param>
            <param name="error">The ISensorError object that contains information about the error</param>
        </member>
        <member name="T:Robotics.HAL.Sensors.SensorReadingCompletedEventHandler`2">
            <summary>
            Represents the method that will handle the ReadComplete event of a ISensor derived class
            </summary>
            <param name="sensor">The ISensor object which raises the event</param>
            <param name="read">Array of readings obtained from the sensor</param>
        </member>
        <member name="T:Robotics.HAL.Sensors.ISensor">
            <summary>
            Represents a generic sensor
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.ISensor.Connect">
            <summary>
            Connects to the sensor device
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.ISensor.Disconnect">
            <summary>
            Disconnects from the sensor device
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.ISensor.Start">
            <summary>
            Starts the continous asynchronous read of the sensor
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.ISensor.Stop">
            <summary>
            Stops the continous asynchronous read of the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.ISensor.IsOpen">
            <summary>
            Gets a value indicating if the communication port with the device is open
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.ISensor.Started">
            <summary>
            Gets a value indicating if the continous asynchronous read operation of the sensor has been started
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.ISensor`2">
            <summary>
            Represents a generic sensor
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.ISensor`2.Read(`1[]@)">
            <summary>
            Syncronusly reads the sensor
            </summary>
            <returns>Array of sensor readings</returns>
        </member>
        <member name="P:Robotics.HAL.Sensors.ISensor`2.LastReadings">
            <summary>
            Gets the last reading array obtained from the sensor
            </summary>
        </member>
        <member name="E:Robotics.HAL.Sensors.ISensor`2.Error">
            <summary>
            Raises when an error occurs
            </summary>
        </member>
        <member name="E:Robotics.HAL.Sensors.ISensor`2.ReadCompleted">
            <summary>
            Raises when the sensor completes an asynchronous read operation
            </summary>
        </member>
        <member name="T:Robotics.API.Command">
            <summary>
            Represents a Command to be executed
            </summary>
        </member>
        <member name="T:Robotics.API.BaseMessage">
            <summary>
            Provides the baase methods for basic commands and it's responses
            </summary>
        </member>
        <member name="T:Robotics.API.IBaseMessage">
            <summary>
            Provides the baase methods for basic commands and it's responses
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.EscapedParameters">
            <summary>
            Gets the parameters string with quotes escaped
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.MessageSource">
            <summary>
            Gets the object source of the message, like a ConnectionManager or a Form
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.MessageSourceMetadata">
            <summary>
            Gets or sets the aditional data provided by the source of the message, like an IPEndPoint or a Delegate
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.SourceModule">
            <summary>
            Gets or Sets the source module of the command
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.DestinationModule">
            <summary>
            Gets or Sets the destination module of the command
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.CommandName">
            <summary>
            Gets or Sets the command name
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.Parameters">
            <summary>
            Gets or Sets the command paramenters
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.Id">
            <summary>
            Gets or Sets the command id
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.HasParams">
            <summary>
            Gets a value indicating id the Command contains params
            </summary>
        </member>
        <member name="P:Robotics.API.IBaseMessage.StringToSend">
            <summary>
            Gets a string which can be sent to a module
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.messageSource">
            <summary>
            Stores the Source of the message, like a ConnectionManager or a Form capable of manage responses
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.messageSourceMetadata">
            <summary>
            Stores aditional data provided by the source of the message, like an IPEndPoint or a Delegate
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.sourceModule">
            <summary>
            Stores the source module of the command
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.destinationModule">
            <summary>
            Stores the destination module of the command
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.command">
            <summary>
            Stores the command name
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.parameters">
            <summary>
            Stores the command paramenters
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.id">
            <summary>
            Stores the command id
            </summary>
        </member>
        <member name="F:Robotics.API.BaseMessage.rxIsSystemCommandName">
            <summary>
            Stores the Regular Expression used to match the known system control commands
            </summary>
        </member>
        <member name="M:Robotics.API.BaseMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
        </member>
        <member name="M:Robotics.API.BaseMessage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.BaseMessage.#ctor(Robotics.API.IMessageSource,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.BaseMessage.#ctor(Robotics.API.IMessageSource,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="messageSourceMetadata">Aditional data provided by the source of the message, like an IPEndPoint or a Delegate</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.BaseMessage.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="source">The source module of the command</param>
            <param name="destination">The destination module of the command</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.BaseMessage.#ctor(Robotics.API.IMessageSource,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="source">The source module of the command</param>
            <param name="destination">The destination module of the command</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.BaseMessage.#ctor(Robotics.API.IMessageSource,System.Object,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="messageSourceMetadata">Aditional data provided by the source of the message, like an IPEndPoint or a Delegate</param>
            <param name="source">The source module of the command</param>
            <param name="destination">The destination module of the command</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.BaseMessage.ToString">
            <summary>
            Returns a String that represents the current Object. (Inherited from Object.)
            </summary>
            <returns>String that represents the current Object</returns>
        </member>
        <member name="M:Robotics.API.BaseMessage.CompareTo(Robotics.API.BaseMessage)">
            <summary>
            Compares this BaseMessage object with other BaseMessage object. The comparison is made comparing the command names
            </summary>
            <param name="other">BaseMessage object to compare with</param>
            <returns>true if the name of the commands is the same, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.BaseMessage.CompareTo(System.Object)">
            <summary>
            Compares this BaseMessage object with other object. The comparison is made comparing the command names
            </summary>
            <param name="obj">BaseMessage object to compare with</param>
            <returns>true if the name of the commands is the same, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.BaseMessage.CompareByName(Robotics.API.BaseMessage,Robotics.API.BaseMessage)">
            <summary>
            Compares two messages based on its command name
            </summary>
            <param name="m1">BaseMessage object to compare</param>
            <param name="m2">BaseMessage object to compare</param>
            <returns></returns>
        </member>
        <member name="P:Robotics.API.BaseMessage.EscapedParameters">
            <summary>
            Gets the parameters string with quotes escaped
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.MessageSource">
            <summary>
            Gets the object source of the message, like a ConnectionManager or a Form
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.MessageSourceMetadata">
            <summary>
            Gets or sets the aditional data provided by the source of the message, like an IPEndPoint or a Delegate
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.SourceModule">
            <summary>
            Gets or Sets the source module of the command
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.DestinationModule">
            <summary>
            Gets or Sets the destination module of the command
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.CommandName">
            <summary>
            Gets or Sets the command name
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.Parameters">
            <summary>
            Gets or Sets the command paramenters
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.Id">
            <summary>
            Gets or Sets the command id
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.HasParams">
            <summary>
            Gets a value indicating id the Command contains params
            </summary>
        </member>
        <member name="P:Robotics.API.BaseMessage.StringToSend">
            <summary>
            Gets a string which can be sent to a module
            </summary>
        </member>
        <member name="F:Robotics.API.Command.rxIsCommand">
            <summary>
            Regular expression used in the IsCommand method
            </summary>
        </member>
        <member name="F:Robotics.API.Command.rxParse">
            <summary>
            Regular expression used in the Parse method
            </summary>
        </member>
        <member name="M:Robotics.API.Command.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
        </member>
        <member name="M:Robotics.API.Command.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.Command.#ctor(Robotics.API.IMessageSource,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.Command.#ctor(Robotics.API.IMessageSource,System.Object,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="messageSourceMetadata">Aditional data provided by the source of the message, like an IPEndPoint or a Delegate</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.Command.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="source">The source module of the command</param>
            <param name="destination">The destination module of the command</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.Command.#ctor(Robotics.API.IMessageSource,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="source">The source module of the command</param>
            <param name="destination">The destination module of the command</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.Command.#ctor(Robotics.API.IMessageSource,System.Object,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of Command
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="messageSourceMetadata">Aditional data provided by the source of the message, like an IPEndPoint or a Delegate</param>
            <param name="source">The source module of the command</param>
            <param name="destination">The destination module of the command</param>
            <param name="command">The command name</param>
            <param name="parameters">The command parameters</param>
            <param name="id">The command id</param>
        </member>
        <member name="M:Robotics.API.Command.IsMatch(Robotics.API.Response)">
            <summary>
            Gets a value indicating if provided Response is a response for current command
            </summary>
            <param name="response">Response to check</param>
            <returns>true if provided Response is a response for command, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Command.ToString">
            <summary>
            Returns a String that represents the current Object. (Inherited from Object.)
            </summary>
            <returns>String that represents the current Object</returns>
        </member>
        <member name="M:Robotics.API.Command.op_Implicit(Robotics.API.Command)~System.String">
            <summary>
            Implicitly converts the Message to a string which can be sent to a module
            </summary>
            <param name="c">Command to be converted</param>
            <returns>A string well formated</returns>
        </member>
        <member name="M:Robotics.API.Command.IsCommand(System.String)">
            <summary>
            Checks if input string is a command
            </summary>
            <param name="s">string to analyze</param>
            <returns>true if input is command, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Command.Parse(System.String)">
            <summary>
            Converts the string representation of a command to a Command object.
            <param name="s">A string containing the command to convert</param>
            </summary>
            <returns>A command object that represents the command contained in s</returns>
        </member>
        <member name="M:Robotics.API.Command.TryParse(System.String,Robotics.API.Command@)">
            <summary>
            Converts the string representation of a command to a Command object.
            A return value indicates whether the conversion succeded or not.
            <param name="s">A string containing the command to convert</param>
            <param name="result">When this method returns, contains the Command equivalent to the command
            contained in s, if the conversion succeeded, or null if the conversion failed.
            The conversion fails if the s parameter is a null reference (Nothing in Visual Basic) or is not of the correct format.
            This parameter is passed uninitialized</param>
            </summary>
            <returns>true if conversion was successfull, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Command.Parse(Robotics.API.IMessageSource,System.String)">
            <summary>
            Converts the string representation of a command to a Command object.
            <param name="source">The IMessageSource object source of the command parsed</param>
            <param name="s">A string containing the command to convert</param>
            </summary>
            <returns>A command object that represents the command contained in s</returns>
        </member>
        <member name="M:Robotics.API.Command.TryParse(Robotics.API.IMessageSource,System.String,Robotics.API.Command@)">
            <summary>
            Converts the string representation of a command to a Command object.
            A return value indicates whether the conversion succeded or not.
            <param name="source">The IMessageSource object source of the command parsed</param>
            <param name="s">A string containing the command to convert</param>
            <param name="result">When this method returns, contains the Command equivalent to the command
            contained in s, if the conversion succeeded, or null if the conversion failed.
            The conversion fails if the s parameter is a null reference (Nothing in Visual Basic) or is not of the correct format.
            This parameter is passed uninitialized</param>
            </summary>
            <returns>true if conversion was successfull, false otherwise</returns>
        </member>
        <member name="P:Robotics.API.Command.IsSystemCommand">
            <summary>
            Gets a value indicating if the Command object represents a system command
            </summary>
        </member>
        <member name="T:System.Net.Sockets.TcpClientConnectionMode">
            <summary>
            Enumerates the connection modes for a SocketTcpClient
            </summary>
        </member>
        <member name="F:System.Net.Sockets.TcpClientConnectionMode.Normal">
            <summary>
            Performs a normal connection
            </summary>
        </member>
        <member name="F:System.Net.Sockets.TcpClientConnectionMode.Fast">
            <summary>
            Performs a fast connection
            </summary>
        </member>
        <member name="T:System.Net.Sockets.TcpClientConnectedEventHandler">
            <summary>
            Represents the method that will handle the ClientConnected event of a SocketTcpServer object
            </summary>
            <param name="s">The Socket for the client connected</param>
        </member>
        <member name="T:System.Net.Sockets.TcpClientDisconnectedEventHandler">
            <summary>
            Represents the method that will handle the ClientConnected event of a SocketTcpServer object
            </summary>
            <param name="ep">The endpoint of the disconnected client</param>
        </member>
        <member name="T:System.Net.Sockets.TcpDataReceivedEventHandler">
            <summary>
            Represents the method that will handle the DataReceived event of a SocketTcpServer object
            </summary>
            <param name="p">The Tcp Packet with the data received</param>
        </member>
        <member name="T:System.Net.Sockets.UdpDataReceivedEventHandler">
            <summary>
            Represents the method that will handle the DataReceived event of a SocketUdp object
            </summary>
            <param name="e">A UdpDataReceivedEventArgs object that contains the event data</param>
        </member>
        <member name="T:System.Net.Sockets.UdpErrorReceivedEventHandler">
            <summary>
            Represents the method that will handle the ErrorReceived event of a SocketUdp object
            </summary>
            <param name="e">The SocketException produced by the error</param>
        </member>
        <member name="T:Robotics.Mathematics.Matrix4">
            <summary>
            Represents a 4x4 bidimentional matrix
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.Matrix">
            <summary>
            Represents a NxM bidimentional matrix
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor">
            <summary>
            Initializes a new instance of Matrix
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(Robotics.Mathematics.Matrix)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="m">A source to take values from</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="m">Number of rows</param>
            <param name="n">Number of columns</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(Robotics.Mathematics.Matrix,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="m">A source to take values from</param>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(System.Double[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
            <param name="array">The array of values to fill the matrix with. The number of provided values must match the number of values the matrix can store</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
            <param name="list">The list of values to fill the matrix with. The number of provided values must match the number of values the matrix can store</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(Robotics.Mathematics.Vector2,System.Boolean)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="v">A source vector to take values from</param>
            <param name="column">Indicates if a column matrix must be created from the input vector, use false to create a row matrix</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(Robotics.Mathematics.Vector3,System.Boolean)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="v">A source vector to take values from</param>
            <param name="column">Indicates if a column matrix must be created from the input vector, use false to create a row matrix</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(Robotics.Mathematics.Vector4,System.Boolean)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="v">A source vector to take values from</param>
            <param name="column">Indicates if a column matrix must be created from the input vector, use false to create a row matrix</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.#ctor(Robotics.Mathematics.Vector,System.Boolean)">
            <summary>
            Initializes a new instance of Matrix
            </summary>
            <param name="v">A source vector to take values from</param>
            <param name="column">Indicates if a column matrix must be created from the input vector, use false to create a row matrix</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Identity(System.Int32)">
            <summary>
            Returns an instance of the identity matrix
            </summary>
            <param name="rank">rank of the square identity matrix</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Zero(System.Int32,System.Int32)">
            <summary>
            Returns a matrix with all its values set to zero
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.One(System.Int32,System.Int32)">
            <summary>
            Returns a matrix with all its values set to one
            </summary>
            <param name="rows">Number of rows</param>
            <param name="columns">Number of columns</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.AddRows(System.Int32,System.Int32)">
            <summary>
            Adds one row to another
            targetRow = targetRow + sourceRow
            </summary>
            <param name="targetRow">The row to which the source row will be added</param>
            <param name="sourceRow">Source row which will be added to the target row</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.AddRows(System.Int32,System.Int32,System.Double)">
            <summary>
            Adds one scaled row to another
            targetRow = targetRow + sourceRow * scalar
            </summary>
            <param name="targetRow">The row to which the source row will be added</param>
            <param name="sourceRow">Source row which multiple will be added to the target row</param>
            <param name="scalar">Scale factor for the source row</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.GetColumn(System.Int32)">
            <summary>
            Gets the specified Column as an Mx1 matrix
            </summary>
            <param name="col">Index of column to get</param>
            <returns>The specified column as an array of doubles</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.GetColumnArray(System.Int32)">
            <summary>
            Gets the specified Column as an array of doubles
            </summary>
            <param name="col">Index of column to get</param>
            <returns>The specified column as an array of doubles</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.GetRow(System.Int32)">
            <summary>
            Gets the specified Row as an 1xN matrix
            </summary>
            <param name="row">Index of row to get</param>
            <returns>The specified row as an array of doubles</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.GetRowArray(System.Int32)">
            <summary>
            Gets the specified Row as an array of doubles
            </summary>
            <param name="row">Index of row to get</param>
            <returns>The specified row as an array of doubles</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Minor(System.Int32,System.Int32)">
            <summary>
            Gets the Minor value for a given element
            </summary>
            <param name="column">Column of the element for which calculate the minor</param>
            <param name="row">Row of the element for which calculate the minor</param>
            <returns>Minor value</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.MultiplyRow(System.Int32,System.Double)">
            <summary>
            Multiplies the specified row of this Matrix by a scalar value
            </summary>
            <param name="row">Row to multiply by provided scalar value</param>
            <param name="scalar">Scalar value to multiply by</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.SubMatrix(System.Int32,System.Int32)">
            <summary>
            Gets the sumbatrix obtained from remove the i-th row and j-th column of this Matrix
            </summary>
            <param name="column">Column to remove</param>
            <param name="row">Row to remove</param>
            <returns>Sumbatrix obtained from remove the i-th row and j-th column of this Matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.SwitchRow(System.Int32,System.Int32)">
            <summary>
            Switches two rows in the matrix
            </summary>
            <param name="i">Index of row to switch</param>
            <param name="j">Index of row to switch</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.SwitchColumn(System.Int32,System.Int32)">
            <summary>
            Switches two columns in the matrix
            </summary>
            <param name="i">Index of column to switch</param>
            <param name="j">Index of column to switch</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.TriangularU">
            <summary>
            Calculates the lower triangle matrix
            </summary>
            <returns>A triangular Matrix with all the entries above the main diagonal are zero</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.TriangularL">
            <summary>
            Calculates the lower triangle matrix
            </summary>
            <returns>A triangular Matrix with all the entries below the main diagonal are zero</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Equals(System.Object)">
            <summary>
            Compares equality with other objects
            </summary>
            <param name="obj">Object to compare</param>
            <returns>true if objects are equal, false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.GetHashCode">
            <summary>
            Gets the hash code for the matrix object
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.ToString">
            <summary>
            Gets the string representation of this matrix
            </summary>
            <returns>string representation of the matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Add(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Adds two matrices
            </summary>
            <param name="value1">Source matrix</param>
            <param name="value2">Source matrix</param>
            <returns>Sum of the source matrices</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Divide(Robotics.Mathematics.Matrix,System.Double)">
            <summary>
            Divides a matrix by a scalar value
            </summary>
            <param name="value">Source matrix</param>
            <param name="divider">The divisor</param>
            <returns>The source matrix divided by divider</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Divide(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Calculates the product of a matrix by the inverse of the other
            </summary>
            <param name="matrix">Source matrix</param>
            <param name="inverted">Source matrix</param>
            <returns>The product of the two matrices</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Calculates the product of two matrices
            </summary>
            <param name="value1">Source matrix</param>
            <param name="value2">Source matrix</param>
            <returns>The dot product of the two matrices</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Matrix,System.Double)">
            <summary>
            Multiplies a matrix by a scalar value
            </summary>
            <param name="matrix">Source matrix</param>
            <param name="scalar">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Substract(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Subtracts a matrix from a matrix
            </summary>
            <param name="value1">Source matrix</param>
            <param name="value2">Source matrix</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Solve(Robotics.Mathematics.Matrix,System.Double[])">
            <summary>
            Solves a NxN linear equation system 
            </summary>
            <param name="coefficients">Coefficient matrix</param>
            <param name="independentTerms">Vector of independent terms</param>
            <returns>Vector solution or null if system has no solution</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Solve(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Solves a NxN linear equation system 
            </summary>
            <param name="coefficients">Coefficient matrix</param>
            <param name="independentTerms">Vector of independent terms</param>
            <returns>Matrix with solution or Matrix.Null if system has no solution</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector3)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector4)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector2)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector4)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector2)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector3)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.Multiply(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the product of two vectors as a matrix
            </summary>
            <param name="value1">Source vector (column vector)</param>
            <param name="value2">Source vector (row vector)</param>
            <returns>Matrix generated by the product of the vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_UnaryNegation(Robotics.Mathematics.Matrix)">
            <summary>
            Negates the matrix
            </summary>
            <param name="a">Matrix to substract</param>
            <returns>Matrix result of difference</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Addition(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Add two Matrices
            </summary>
            <param name="a">Matrix to add</param>
            <param name="b">Matrix to add</param>
            <returns>Matrix result of sum</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Subtraction(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Substract two Matrices
            </summary>
            <param name="a">Matrix to substract</param>
            <param name="b">Matrix to substract</param>
            <returns>Matrix result of difference</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Matrix,System.Double)">
            <summary>
            Multiplicates a matrix for a scalar
            </summary>
            <param name="matrix">Matrix to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix result of multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(System.Double,Robotics.Mathematics.Matrix)">
            <summary>
            Multiplicates a matrix for a scalar
            </summary>
            <param name="matrix">Matrix to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix result of multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Multiplicates two Matrices
            </summary>
            <param name="a">Matrix to multiplicate</param>
            <param name="b">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Division(Robotics.Mathematics.Matrix,System.Double)">
            <summary>
            Divides a matrix for a scalar
            </summary>
            <param name="matrix">Matrix to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix result of division</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Division(System.Double,Robotics.Mathematics.Matrix)">
            <summary>
            Divides a matrix for a scalar
            </summary>
            <param name="matrix">Matrix to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix result of division</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_LogicalNot(Robotics.Mathematics.Matrix)">
            <summary>
            Returns a the inverse matrix
            </summary>
            <param name="value">Source matrix</param>
            <returns>Inverse matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Equality(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Tests matrices for equality
            </summary>
            <param name="value1">Source matrix</param>
            <param name="value2">Source matrix</param>
            <returns>true if the matrices are equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Inequality(Robotics.Mathematics.Matrix,Robotics.Mathematics.Matrix)">
            <summary>
            Tests matrices for inequality
            </summary>
            <param name="value1">Source matrix</param>
            <param name="value2">Source matrix</param>
            <returns>true if the matrices are not equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Vector2,Robotics.Mathematics.Matrix)">
            <summary>
            Multiplicates a row vector with a matrix
            </summary>
            <param name="v">Vector2 to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Vector3,Robotics.Mathematics.Matrix)">
            <summary>
            Multiplicates a row vector with a matrix
            </summary>
            <param name="v">Vector3 to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Vector4,Robotics.Mathematics.Matrix)">
            <summary>
            Multiplicates a row vector with a matrix
            </summary>
            <param name="v">Vector4 to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Matrix,Robotics.Mathematics.Vector2)">
            <summary>
            Multiplicates a Matrix with a column vector
            </summary>
            <param name="v">Vector2 to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Matrix,Robotics.Mathematics.Vector3)">
            <summary>
            Multiplicates a Matrix with a column vector
            </summary>
            <param name="v">Vector3 to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Matrix,Robotics.Mathematics.Vector4)">
            <summary>
            Multiplicates a Matrix with a column vector
            </summary>
            <param name="v">Vector4 to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Matrix,Robotics.Mathematics.Vector)">
            <summary>
            Multiplicates a Matrix with a column vector
            </summary>
            <param name="v">Vector to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Multiply(Robotics.Mathematics.Vector,Robotics.Mathematics.Matrix)">
            <summary>
            Multiplicates a row vector with a matrix
            </summary>
            <param name="v">Vector to multiplicate</param>
            <param name="m">Matrix to miltiplicate</param>
            <returns>Matrix product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Explicit(Robotics.Mathematics.Matrix)~Robotics.Mathematics.Vector2">
            <summary>
            Cast a matrix to a Vector2
            </summary>
            <param name="m">Matrix to cast</param>
            <returns>A Vector2 containing the first 2 elements of the casted Matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Explicit(Robotics.Mathematics.Matrix)~Robotics.Mathematics.Vector3">
            <summary>
            Cast a matrix to a Vector3
            </summary>
            <param name="m">Matrix to cast</param>
            <returns>A Vector3 containing the first 3 elements of the casted Matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Explicit(Robotics.Mathematics.Matrix)~Robotics.Mathematics.Vector4">
            <summary>
            Cast a matrix to a Vector4
            </summary>
            <param name="m">Matrix to cast</param>
            <returns>A Vector4 containing the first 4 elements of the casted Matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Explicit(Robotics.Mathematics.Matrix)~Robotics.Mathematics.Vector">
            <summary>
            Cast a matrix to a Vector
            </summary>
            <param name="m">Matrix to cast</param>
            <returns>A Vector containing elements of the casted Matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Implicit(Robotics.Mathematics.Matrix)~System.Int32">
            <summary>
            Casts the Matrix object to a int
            If the Matrix object is a square matrix, the determinant is returned.
            If the Matrix object is NOT a square matrix, the element located at the first row and first column is returned
            </summary>
            <param name="matrix">Matrix to cast</param>
            <returns>32 bit integer that represents the determinant or the first element of the matrix object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Implicit(Robotics.Mathematics.Matrix)~System.Double">
            <summary>
            Casts the Matrix object to a double
            If the Matrix object is a square matrix, the determinant is returned.
            If the Matrix object is NOT a square matrix, the element located at the first row and first column is returned
            </summary>
            <param name="matrix">Matrix to cast</param>
            <returns>double that represents the determinant or the first element of the matrix object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix.op_Explicit(Robotics.Mathematics.Matrix)~System.Double[]">
            <summary>
            Casts the Matrix object to an array of doubles
            The elements of the matrix are stored in the array as a merge of its rows
            </summary>
            <param name="matrix">Matrix to cast</param>
            <returns>double[] containing all elements of the matrix</returns>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Null">
            <summary>
             Returns a Zero-dimension matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Adjugate">
            <summary>
            Calculates the transpose of the matrix of cofactors
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Rows">
            <summary>
            Gets the number of rows in the matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Cofactor">
            <summary>
            Calculates the cofactor (adjunt) matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Columns">
            <summary>
            Gets the number of columns in the matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.IsSquare">
            <summary>
            Gets a value indicating if matrix is square
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.FastDeterminant">
            <summary>
            Calculates the determinant of the matrix.
            It computes the determinant by reducing the matrix to reduced echelon form using row operations.
            The function is very fast and efficient but may oerflow in some cases returning NaN.
            In such cases use the Matrix.Determinant property which computes determinent using minors
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.FastInverse">
            <summary>
            Gets the inverse matrix
            The function returns the inverse of the current matrix using Reduced Echelon Form method
            The function is very fast and efficient but may cause overflow in some cases returning Null
            In such cases use the Inverse property which computes inverse using adjugate / determinant
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Minors">
            <summary>
            Returns the minors matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Transpose">
            <summary>
            Gets the transpose matrix 
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Inverse">
            <summary>
            Gets the inverse matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the value at specified location
            </summary>
            <param name="row">Zero-based Row of the desired value</param>
            <param name="col">Zero-based Column of the desired value</param>
            <returns></returns>
        </member>
        <member name="P:Robotics.Mathematics.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the specified row
            </summary>
            <param name="row">Zero-based index of the Row to get</param>
            <returns></returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.#ctor(Robotics.Mathematics.Matrix4)">
            <summary>
            Initializes a new instance of Matrix4
            </summary>
            <param name="m">A source to take values from</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Matrix4
            </summary>
            <param name="m11">Value to initialize m11 to</param>
            <param name="m12">Value to initialize m12 to</param>
            <param name="m13">Value to initialize m13 to</param>
            <param name="m14">Value to initialize m14 to</param>
            <param name="m21">Value to initialize m21 to</param>
            <param name="m22">Value to initialize m22 to</param>
            <param name="m23">Value to initialize m23 to</param>
            <param name="m24">Value to initialize m24 to</param>
            <param name="m31">Value to initialize m31 to</param>
            <param name="m32">Value to initialize m32 to</param>
            <param name="m33">Value to initialize m33 to</param>
            <param name="m34">Value to initialize m34 to</param>
            <param name="m41">Value to initialize m41 to</param>
            <param name="m42">Value to initialize m42 to</param>
            <param name="m43">Value to initialize m43 to</param>
            <param name="m44">Value to initialize m44 to</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.#ctor(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of Matrix4
            </summary>
            <param name="row1">Value to initialize first row of the matrix to</param>
            <param name="row2">Value to initialize second row of the matrix to</param>
            <param name="row3">Value to initialize third row of the matrix to</param>
            <param name="row4">Value to initialize fourth row of the matrix to</param>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.#ctor">
            <summary>
            Initializes a new instance of Matrix4
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.ToString">
            <summary>
            Gets the string representation of this matrix
            </summary>
            <returns>string representation of the matrix</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.op_Addition(Robotics.Mathematics.Matrix4,Robotics.Mathematics.Matrix4)">
            <summary>
            Add two Matrices
            </summary>
            <param name="a">Matrix4 to add</param>
            <param name="b">Matrix4 to add</param>
            <returns>Matrix4 result of sum</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.op_Subtraction(Robotics.Mathematics.Matrix4,Robotics.Mathematics.Matrix4)">
            <summary>
            Substract two Matrices
            </summary>
            <param name="a">Matrix4 to substract</param>
            <param name="b">Matrix4 to substract</param>
            <returns>Matrix4 result of difference</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.op_Multiply(Robotics.Mathematics.Matrix4,System.Double)">
            <summary>
            Multiplicates a matrix for a scalar
            </summary>
            <param name="matrix">Matrix4 to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix4 result of multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.op_Multiply(System.Double,Robotics.Mathematics.Matrix4)">
            <summary>
            Multiplicates a matrix for a scalar
            </summary>
            <param name="matrix">Matrix4 to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix4 result of multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.op_Multiply(Robotics.Mathematics.Matrix4,Robotics.Mathematics.Matrix4)">
            <summary>
            Multiplicates two Matrices
            </summary>
            <param name="a">Matrix4 to multiplicate</param>
            <param name="b">Matrix4 to miltiplicate</param>
            <returns>Matrix4 product</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.op_Division(Robotics.Mathematics.Matrix4,System.Double)">
            <summary>
            Divides a matrix for a scalar
            </summary>
            <param name="matrix">Matrix4 to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix4 result of division</returns>
        </member>
        <member name="M:Robotics.Mathematics.Matrix4.op_Division(System.Double,Robotics.Mathematics.Matrix4)">
            <summary>
            Divides a matrix for a scalar
            </summary>
            <param name="matrix">Matrix4 to multiplicate</param>
            <param name="scalar">Scalar value to multiplicate the matrix with</param>
            <returns>Matrix4 result of division</returns>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.Identity">
            <summary>
            Returns an instance of the identity matrix
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.Zero">
            <summary>
            Returns a matrix with all its values set to zero
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.One">
            <summary>
            Returns a matrix with all its values set to one
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="T:Robotics.API.Response">
            <summary>
            Represents the response of a command
            </summary>
        </member>
        <member name="F:Robotics.API.Response.success">
            <summary>
            Stores the result contained in response
            </summary>
        </member>
        <member name="F:Robotics.API.Response.rxIsResponse">
            <summary>
            Regular expression used in the IsResponse method
            </summary>
        </member>
        <member name="F:Robotics.API.Response.rxParse">
            <summary>
            Regular expression used in the Parse method
            </summary>
        </member>
        <member name="M:Robotics.API.Response.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
            <param name="id">The response id</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(Robotics.API.IMessageSource,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="command">The command name</param>
            <param name="success">The result contained in response</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(Robotics.API.IMessageSource,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(Robotics.API.IMessageSource,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
            <param name="id">The response id</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(Robotics.API.IMessageSource,System.Object,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="messageSourceMetadata">Aditional data provided by the source of the message, like an IPEndPoint or a Delegate</param>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
            <param name="id">The response id</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="source">The source module of the response</param>
            <param name="destination">The destination module of the response</param>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
            <param name="id">The response id</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(Robotics.API.IMessageSource,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="source">The source module of the response</param>
            <param name="destination">The destination module of the response</param>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
            <param name="id">The response id</param>
        </member>
        <member name="M:Robotics.API.Response.#ctor(Robotics.API.IMessageSource,System.Object,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of Response
            </summary>
            <param name="messageSource">The Source of the message, like a ConnectionManager or a Form capable of manage responses</param>
            <param name="messageSourceMetadata">Aditional data provided by the source of the message, like an IPEndPoint or a Delegate</param>
            <param name="source">The source module of the response</param>
            <param name="destination">The destination module of the response</param>
            <param name="command">The command name</param>
            <param name="parameters">The response parameters</param>
            <param name="success">The result contained in response</param>
            <param name="id">The response id</param>
        </member>
        <member name="M:Robotics.API.Response.ToString">
            <summary>
            Returns a String that represents the current Object. (Inherited from Object.)
            </summary>
            <returns>String that represents the current Object</returns>
        </member>
        <member name="M:Robotics.API.Response.op_Implicit(Robotics.API.Response)~System.String">
            <summary>
            Implicitly converts the Message to a string which can be sent to a module
            </summary>
            <param name="c">Response to be converted</param>
            <returns>A string well formated</returns>
        </member>
        <member name="M:Robotics.API.Response.CreateFromCommand(Robotics.API.Command,System.Boolean)">
            <summary>
            Creates a response from a command data
            </summary>
            <param name="command">The command to use as base for the response</param>
            <param name="result">true if command succeded, false otherwise</param>
            <returns>A generic response for the command with same parameters</returns>
        </member>
        <member name="M:Robotics.API.Response.IsResponse(System.String)">
            <summary>
            Checks if input string is a command response
            </summary>
            <param name="s">string to analyze</param>
            <returns>true if input is command response, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Response.Parse(System.String)">
            <summary>
            Converts the string representation of a response to a Response object.
            <param name="s">A string containing the response to convert</param>
            </summary>
            <returns>A response object that represents the response contained in s</returns>
        </member>
        <member name="M:Robotics.API.Response.TryParse(System.String,Robotics.API.Response@)">
            <summary>
            Converts the string representation of a response to a Response object.
            A return value indicates whether the conversion succeded or not.
            <param name="s">A string containing the response to convert</param>
            <param name="result">When this method returns, contains the Response equivalent to the response
            contained in s, if the conversion succeeded, or null if the conversion failed.
            The conversion fails if the s parameter is a null reference (Nothing in Visual Basic) or is not of the correct format.
            This parameter is passed uninitialized</param>
            </summary>
            <returns>true if conversion was successfull, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Response.Parse(Robotics.API.IMessageSource,System.String)">
            <summary>
            Converts the string representation of a response to a Response object.
            <param name="source">The IMessageSource object source of the command parsed</param>
            <param name="s">A string containing the response to convert</param>
            </summary>
            <returns>A response object that represents the response contained in s</returns>
        </member>
        <member name="M:Robotics.API.Response.TryParse(Robotics.API.IMessageSource,System.String,Robotics.API.Response@)">
            <summary>
            Converts the string representation of a response to a Response object.
            A return value indicates whether the conversion succeded or not.
            <param name="source">The IMessageSource object source of the command parsed</param>
            <param name="s">A string containing the response to convert</param>
            <param name="result">When this method returns, contains the Response equivalent to the response
            contained in s, if the conversion succeeded, or null if the conversion failed.
            The conversion fails if the s parameter is a null reference (Nothing in Visual Basic) or is not of the correct format.
            This parameter is passed uninitialized</param>
            </summary>
            <returns>true if conversion was successfull, false otherwise</returns>
        </member>
        <member name="P:Robotics.API.Response.Success">
            <summary>
            Gets the result contained in response
            </summary>
        </member>
        <member name="P:Robotics.API.Response.StringToSend">
            <summary>
            Gets a string which can be sent to a module
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.MWExecutionStatus">
            <summary>
            Enumerates the execution result of a ManagerWorkers object
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.MWExecutionStatus.ExecutionAborted">
            <summary>
            Execution was aborted
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.MWExecutionStatus.ExecutionCanceled">
            <summary>
            Execution was canceled
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.MWExecutionStatus.ExecutionCompleted">
            <summary>
            Execution completed normally
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.MWExecutionStatus.ExecutionInProgress">
            <summary>
            Execution is still in progress
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.MWExecutionStatus.Unknown">
            <summary>
            Execution result is Unknown
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.ManagerWorkers`4">
            <summary>
            Serves as base class for a Manager/Workers implementation
            </summary>
            <typeparam name="TManagerData">The type of data used by the manager</typeparam>
            <typeparam name="TManagerResult">The type of data produced by the manager</typeparam>
            <typeparam name="TWorkerData">The type of data used by the workers</typeparam>
            <typeparam name="TWorkerResult">The type of data produced by the workers</typeparam>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.availiableWorker">
            <summary>
            Event used to notify there is at leas one worker availiable
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.allWorkersFree">
            <summary>
            Event used to notify when all workers become free
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.abortRequested">
            <summary>
            Indicates whether an abort of the work has been requested
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.cancelRequested">
            <summary>
            Indicates whether the manager/workers has been requested to cancel the current operation
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.lastExecutionStatus">
            <summary>
            The status of the last execution
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.lastExecutionResult">
            <summary>
            The result of the last execution
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.numWorkers">
            <summary>
            Number of availiable workers
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.oLock">
            <summary>
            Object used to synchronize the acces to the start, cancel and abort methods
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.runInBackground">
            <summary>
            Indicates if the manager and worker threads will be executed as background threads
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.running">
            <summary>
            Indicates whether the manager/workers are running
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.workFinished">
            <summary>
            Used to synchronize the completition of the execution
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.managerThreadTask">
            <summary>
            Represents the ManagerThreadTask method
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.managerThread">
            <summary>
            The manager thread
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.busyWorkers">
            <summary>
            Stores the busy workers
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.idleWorkers">
            <summary>
            Stores the idle workers
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.workersLock">
            <summary>
            Lock used to access the busyWorkers and idleWorkers objects
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.#ctor">
            <summary>
            Initializes a new instance of ManagerWorkers class.
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of ManagerWorkers class
            </summary>
            <param name="numWorkers">Number of workers to use</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.Abort">
            <summary>
            Aborts the manager/workers execution.
            It calls the Abort method for all, manager and worker threads.
            If the execution has not been started yet it has no effect.
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.Cancel">
            <summary>
            Stops the manager/workers execution.
            If the execution has not been started yet it has no effect.
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.Start(`0)">
            <summary>
            Starts the manager/workers execution.
            If the execution has been started it has no effect.
            </summary>
            <param name="managerData">The data to be used by the manager thread during its execution</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.WaitFinished">
            <summary>
            Blocks the thread until the execution is finished due to work completition, cancelation of abort.
            If the execution has not been started, it returns immediately.
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.WaitFinished(System.Int32)">
            <summary>
            Blocks the thread until the execution is finished due to work completition, cancelation of abort or the specified time elapses.
            If the execution has not been started, it returns immediately.
            </summary>
            <param name="timeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.AssignWork(`2)">
            <summary>
            Assigns work to a free worker. If there is no free workers will block the thread until one becomes availiable
            </summary>
            <param name="data">The data to be used by the worker</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.AssignWorkWait(`2,System.Int32)">
            <summary>
            Assigns work to a free worker.
            If there is no free workers will block the thread until one becomes availiable or the specified time elapses.
            </summary>
            <param name="data">The data to be used by the worker</param>
            <param name="timeout">The number of milliseconds to wait for a worker to become availiable.
            Use zero to return immediately. Use -1 to wait indefinitely.</param>
            <returns>true if the work was assigned, false otherwise</returns>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.FreeWorker(Robotics.Paralelism.ManagerWorkers{`0,`1,`2,`3}.Worker)">
            <summary>
            Moves the worker from the busyWorkers list to the idleWorkers queue
            </summary>
            <param name="worker">The worker to move</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.ManagerThreadTask(System.Object)">
            <summary>
            Performs the manager task by calling the ManagerTask method.
            When it completes, enqueues the worker in the Owner.idleWorkers queue.
            </summary>
            <param name="o">Object that contains the task data to be used by the manager thread</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.OnExecutionAborted">
            <summary>
            Raises the ExecutionAborted event. 
            When overriding in a derived class, be sure to call the base class's method so that registered delegates receive the event. 
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.OnExecutionCompleted">
            <summary>
            Raises the ExecutionCompleted event. 
            When overriding in a derived class, be sure to call the base class's method so that registered delegates receive the event. 
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.OnExecutionStarted">
            <summary>
            Raises the ExecutionStarted event. 
            When overriding in a derived class, be sure to call the base class's method so that registered delegates receive the event. 
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.SetupLists">
            <summary>
            Sets up the busyWorkers and idleWorkers lists
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.WaitAllWorkers">
            <summary>
            Blocks the thread until all workers finish their tasks.
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.WaitWorker">
            <summary>
            Blocks the thread until a worker finish its task and becomes availiable.
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.WaitWorker(System.Int32)">
            <summary>
            Blocks the thread until a worker finish its task becoming availiable or the specified time elapses.
            </summary>
            <param name="timeout">The number of milliseconds to wait for a worker to become availiable.
            Use zero to return immediately. Use -1 to wait indefinitely.</param>
            <returns>true if a worker becomes availiable before the timeout, false otherwise</returns>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.ManagerTask(`0)">
            <summary>
            When overriden in a derived class, performs the manager task
            </summary>
            <param name="managerData">The data to be used by the manager</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.WorkerTask(Robotics.Paralelism.WorkerTaskObject{`0,`1,`2,`3})">
            <summary>
            When overriden in a derived class, performs the worker task
            </summary>
            <param name="taskObject">Object that contains the task data with which execute the task</param>
        </member>
        <member name="E:Robotics.Paralelism.ManagerWorkers`4.ExecutionAborted">
            <summary>
            Occurs when the execution of manager/workers is canceled or aborted
            </summary>
        </member>
        <member name="E:Robotics.Paralelism.ManagerWorkers`4.ExecutionCompleted">
            <summary>
            Occurs when the execution of manager/workers completes
            </summary>
        </member>
        <member name="E:Robotics.Paralelism.ManagerWorkers`4.ExecutionStarted">
            <summary>
            Occurs when the execution of manager/workers starts
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.AbortRequested">
            <summary>
            Gets a value indicating whether an abort of the work has been requested
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.CancelRequested">
            <summary>
            Gets a value indicating whether the manager/workers has been requested to cancel the current operation
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.IsRunning">
            <summary>
            Gets a value indicating whether manager/workers are running
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.LastExecutionStatus">
            <summary>
            Gets the status of the last execution 
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.LastExecutionResult">
            <summary>
            Gets the result of the last execution 
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.NumWorkers">
            <summary>
            Gets or sets the number of workers.
            If the manager/workers has been started, it has no effect
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.RunInBackground">
            <summary>
            Gts a value indicating if the manager and worker threads will be executed as background threads.
            If the manager/workers has been started, it has no effect
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.ManagerWorkers`4.Worker">
            <summary>
            A worker for the Manager-Worker class
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.Worker.autoEvent">
            <summary>
            Event used to synchronize threads
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.Worker.owner">
            <summary>
            The ManagerWorkers object which controls this worker
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.Worker.runInBackground">
            <summary>
            Indicaties whether the Runnable object executes or not in a background thread
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.Worker.workerNumber">
            <summary>
            The number of the worker
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.Worker.workerThread">
            <summary>
            The thread used to perform the worker task
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ManagerWorkers`4.Worker.workerThreadTask">
            <summary>
            Represents the WorkerThreadTask method
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.Worker.#ctor(Robotics.Paralelism.ManagerWorkers{`0,`1,`2,`3},System.Int32)">
            <summary>
            Initializes a new instance of Worker
            </summary>
            <param name="owner">The ManagerWorkers object which controls this worker</param>
            <param name="workerNumber">The number of the worker</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.Worker.DoWork(Robotics.Paralelism.WorkerTaskObject{`0,`1,`2,`3})">
            <summary>
            Configures the thread and begins the execution of the Owner.WorkerTask method.
            </summary>
            <param name="taskObject">Object that contains the task data to be used during the worker execution</param>
        </member>
        <member name="M:Robotics.Paralelism.ManagerWorkers`4.Worker.WorkerThreadTask(System.Object)">
            <summary>
            Performs the worker task by calling the Owner.WorkerTask method.
            When it completes, enqueues the worker in the Owner.idleWorkers queue.
            </summary>
            <param name="o">Object that contains the task data to be used during the worker execution</param>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.Worker.IsRuning">
            <summary>
            Gets or sets a value indicating whether the Runnable object is running
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.Worker.Owner">
            <summary>
            Gets the ManagerWorkers object which controls this worker
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.Worker.RunInBackground">
            <summary>
            Gets or sets a value indicating whether the Worker object executes or not in a background thread
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.Worker.WorkerDataType">
            <summary>
            Gets the type o the data used by this object
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.Worker.WorkerNumber">
            <summary>
            Gets the number of the worker
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ManagerWorkers`4.Worker.WorkerThread">
            <summary>
            Gets the thread that executes the async task
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.ManagerWorkers">
            <summary>
            Serves as base class for a Manager/Workers implementation
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.HokuyoLaserException">
            <summary>
            Represents errors that occur during hokuyo laser operation
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserException.status">
            <summary>
            Status of the Hokuyo device
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaserException.#ctor">
            <summary>
            Initializes a new instance of the HokuyoLaserException class
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaserException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HokuyoLaserException class with a specified error message
            </summary>
            <param name="message">The message that describes the error</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaserException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the HokuyoLaserException class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaserException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the HokuyoLaserException class with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="status">The status reported by the hokuyo device.</param>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaserException.Status">
            <summary>
            Gets the status reported by the hokuyo device.
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.VectorComponentChangedEH`1">
            <summary>
            Represents the function that handles the ComponentChanged event of a Vector
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:Robotics.Mathematics.Vector">
            <summary>
            Represents a n dimension Vector
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.Vector.v">
            <summary>
            Array that stores the data of the vector
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of Vector
            </summary>
            <param name="dimension">Dimension of the vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of Vector
            </summary>
            <param name="dimension">Dimension of the vector</param>
            <param name="value">Value to initialize both components to</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.#ctor(Robotics.Mathematics.Vector2)">
            <summary>
            Creates a Vector of dimension 2 from a Vector2
            </summary>
            <param name="value">Two dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.#ctor(Robotics.Mathematics.Vector3)">
            <summary>
            Creates a Vector of dimension 3 from a Vector3
            </summary>
            <param name="value">Three dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.#ctor(Robotics.Mathematics.Vector4)">
            <summary>
            Creates a Vector of dimension 4 from a Vector4
            </summary>
            <param name="value">Four dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of Vector
            </summary>
            <param name="value">Initial values for the vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.#ctor(Robotics.Mathematics.Vector)">
            <summary>
            Creates a Vector from another Vector
            This is a copy constructor
            </summary>
            <param name="value">Base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.OnComponentChanged">
            <summary>
            Raises the ComponentChanged event
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Normalize">
            <summary>
            Turns the current vector into a unit vector
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector.ToString">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object
            </summary>
            <param name="obj">Object to make the comparison with</param>
            <returns>true if the current instance is equal to the specified object; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.GetHashCode">
            <summary>
            Gets the hash code of the vector object
            </summary>
            <returns>Hash code of the vector object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.One(System.Int32)">
            <summary>
            Returns a Vector with both of its components set to one
            </summary>
            <param name="dimension">Dimension of the vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Zero(System.Int32)">
            <summary>
            Returns a Vector with all of its components set to zero
            </summary>
            <param name="dimension">Dimension of the vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Add(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.CanberraDistance(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the Canberra Distance between two vectors.
            The Canberra distance between two vectors is the sum of abs(pi - qi)/(abs(pi) + abs(qi))
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The Canberra Distance between the vectors.</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.ChebyshevDistance(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the Chebyshev Distance between two vectors.
            The Chebyshev distance between two vectors is the greatest of their differences along any coordinate dimension.
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The Chebyshev Distance between the vectors.</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Divide(Robotics.Mathematics.Vector,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scalar">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Dot(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.ManhattanDistance(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the Manhattan Distance between two vectors.
            The Manhattan distance between two vectors is the sum of the absolute differences of their coordinates.
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The Manhattan Distance between the vectors.</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Multiply(Robotics.Mathematics.Vector,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scalar">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Negate(Robotics.Mathematics.Vector)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Pow(Robotics.Mathematics.Vector,System.Double)">
            <summary>
            Raises each component of a vector to the specified power
            </summary>
            <param name="baseVector">Source vector to be raised to a power</param>
            <param name="power">A double-precision floating-point number that specifies a power</param>
            <returns>A vector with each component raised to the power scalar</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Pow(System.Double,Robotics.Mathematics.Vector)">
            <summary>
            Raises a scalar to the specified power by each component of a vector
            </summary>
            <param name="baseScalar">A double-precision floating-point number to be raised to a power</param>
            <param name="power">A vector that specifies an array of powers</param>
            <returns>A vector with each component equals to he base scalar raised to the power of each vector component</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.Substract(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_LogicalNot(Robotics.Mathematics.Vector)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Equality(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Tests vectors for equality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Inequality(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Tests vectors for inequality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are not equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Addition(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_UnaryNegation(Robotics.Mathematics.Vector)">
            <summary>
            Inverts the vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The source vector with each component multiplied by -1</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Subtraction(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Multiply(Robotics.Mathematics.Vector,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scalar">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Multiply(System.Double,Robotics.Mathematics.Vector)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="scalar">Scalar value</param>
            <param name="value">Source vector</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Multiply(Robotics.Mathematics.Vector,Robotics.Mathematics.Vector)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_ExclusiveOr(Robotics.Mathematics.Vector,System.Double)">
            <summary>
            Raises each component of a vector to the specified power
            </summary>
            <param name="baseVector">Source vector to be raised to a power</param>
            <param name="power">A double-precision floating-point number that specifies a power</param>
            <returns>A vector with each component raised to the power scalar</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_ExclusiveOr(System.Double,Robotics.Mathematics.Vector)">
            <summary>
            Raises a scalar to the specified power by each component of a vector
            </summary>
            <param name="baseScalar">A double-precision floating-point number to be raised to a power</param>
            <param name="power">A vector that specifies an array of powers</param>
            <returns>A vector with each component equals to he base scalar raised to the power of each vector component</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Division(Robotics.Mathematics.Vector,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scalar">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Explicit(Robotics.Mathematics.Vector)~System.Double">
            <summary>
            Gets the lenght of the vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The length of the vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector.op_Explicit(Robotics.Mathematics.Vector)~System.String">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <param name="value">Source vector</param>
            <returns>String that represents the object</returns>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Dimension">
            <summary>
            Calculates the dimension of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Length">
            <summary>
            Calculates the number of elements of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Magnitude">
            <summary>
            Calculates the n-dimensional cartesian length of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Norm1">
            <summary>
            Calculates Norm1 (sum of the absolute values of each component) of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Norm2">
            <summary>
            Calculates Norm2 (the n-dimensional cartesian length) of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.NormInfinite">
            <summary>
            Calculates Infinite Norm (maximum component value) of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Unitary">
            <summary>
            Gets the unitary vector of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Size">
            <summary>
            Calculates the dimension of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector.Item(System.Int32)">
            <summary>
            Gets or sets the value at specified location
            </summary>
            <param name="index">Index of desired element</param>
            <returns></returns>
        </member>
        <member name="E:Robotics.Mathematics.Vector.ComponentChanged">
            <summary>
            Raises when the value of a component of the vector changes
            </summary>
        </member>
        <member name="T:Robotics.API.MiscSharedVariables.LaserReadingArrayShV">
            <summary>
            Gets access to an array of LaserReading variable stored in the Blackboard
            </summary>
        </member>
        <member name="F:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.SplitChars">
            <summary>
            Chars used to split strings
            </summary>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.#ctor(Robotics.API.CommandManager,System.String,Robotics.HAL.Sensors.Telemetric.LaserReading[],System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="values">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.#ctor(System.String)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.#ctor(System.String,Robotics.HAL.Sensors.Telemetric.LaserReading[])">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="values">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.Deserialize(System.String,Robotics.HAL.Sensors.Telemetric.LaserReading[]@)">
            <summary>
            Deserializes an array of doubles from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="values">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.Deserialize(System.String,System.Int32,System.Int32,Robotics.HAL.Sensors.Telemetric.LaserReading[]@)">
            <summary>
            Deserializes an array of from a string which starts with "double[]" and is followed only by double representations
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="rows">Number of matrix rows</param>
            <param name="cols">Number of matrix columns</param>
            <param name="values">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.Serialize(Robotics.HAL.Sensors.Telemetric.LaserReading[],System.String@)">
            <summary>
            Serializes the provided object to a string
            </summary>
            <param name="values">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.LaserReadingArrayShV.TypeName">
            <summary>
            Returns "int"
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.LaserError">
            <summary>
            Information about a lasser measurement error
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserError.errorCode">
            <summary>
            Laser error code
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserError.errorDescription">
            <summary>
            Error message
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserError.#ctor">
            <summary>
            Initializes a new instance of LaserError object
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserError.#ctor(System.String)">
            <summary>
            Initializes a new instance of LaserError object
            </summary>
            <param name="message">The error message</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.LaserError.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of LaserError object
            </summary>
            <param name="errorCode">The code error</param>
            <param name="message">The error message</param>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserError.ErrorCode">
            <summary>
            Gets the error code
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.LaserError.ErrorDescription">
            <summary>
            Gets the error description message
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.KnownHumanFace">
            <summary>
            Represents a known human Face
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.KnownHumanFace.name">
            <summary>
            The asociated name to the human face
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.KnownHumanFace.patterns">
            <summary>
            The number of patterns trained asociated to the face name
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.KnownHumanFace.#ctor">
            <summary>
            Initializes a new instance of HumanFace
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.KnownHumanFace.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of HumanFace
            </summary>
            <param name="name">The asociated name to the human face</param>
            <param name="patterns">The number of patterns trained asociated to the face name</param>
        </member>
        <member name="P:Robotics.HAL.Sensors.KnownHumanFace.Name">
            <summary>
            Gets or sets the asociated name to the human face
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.KnownHumanFace.Patterns">
            <summary>
            Gets or sets the number of patterns trained asociated to the face name
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.StringSharedVariable">
            <summary>
            Gets access to an string variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.Deserialize(System.String,System.String@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or null if the deserialization failed.</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.Serialize(System.String,System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or null if the serialization failed.</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.SerializeString(System.String)">
            <summary>
            Serializes the provided string by escaping all double quotes (if any) and enclosing it by escaped double quotes
            </summary>
            <param name="value">String to serialize</param>
            <returns>Serialized string</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.DeserializeString(System.String,System.String@)">
            <summary>
            Deserializes the provided string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or null if the deserialization failed.</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.StringSharedVariable.TypeName">
            <summary>
            Returns "string"
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable">
            <summary>
            Gets access to a Matrix variable stored in the Blackboard
            </summary>
        </member>
        <member name="F:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.SplitChars">
            <summary>
            Chars used to split strings
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.#ctor(Robotics.API.CommandManager,System.String,Robotics.Mathematics.Matrix,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.#ctor(System.String,Robotics.Mathematics.Matrix)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.Deserialize(System.String,Robotics.Mathematics.Matrix@)">
            <summary>
            Deserializes an array of doubles from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.Deserialize(System.String,System.Int32,System.Int32,Robotics.Mathematics.Matrix@)">
            <summary>
            Deserializes an array of from a string which starts with "double[]" and is followed only by double representations
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="rows">Number of matrix rows</param>
            <param name="cols">Number of matrix columns</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.Serialize(Robotics.Mathematics.Matrix,System.String@)">
            <summary>
            Serializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.MatrixSharedVariable.TypeName">
            <summary>
            Returns "int"
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable">
            <summary>
            Gets access to an DOUBLE variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of DoubleSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of DoubleSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.Deserialize(System.String,System.Double@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.Serialize(System.Double,System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.DoubleSharedVariable.TypeName">
            <summary>
            Returns "double"
            </summary>
        </member>
        <member name="T:Robotics.DataStructures.SelfBalancedBST`1">
            <summary>
            Implements a Self-Balanced Binary Search Tree
            </summary>
        </member>
        <member name="T:Robotics.DataStructures.BinarySearchTree`1">
            <summary>
            Implements a Binary Search Tree
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTree`1.root">
            <summary>
            Root node of the Binary Search Tree
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTree`1.balanced">
            <summary>
            Indicates if the tree is balanced
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTree`1.count">
            <summary>
            Stores the number of elements in the BinarySearchTree
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTree`1.width">
            <summary>
            Stores the with of the BinarySearchTree
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTree`1.height">
            <summary>
            Stores the height of the BinarySearchTree
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTree`1.changed">
            <summary>
            Indicates if the structure of the tree has changed
            </summary>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.#ctor">
            <summary>
            Initializes a new instance of BinarySearchTreeNode
            </summary>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.#ctor(Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Initializes a new instance of BinarySearchTreeNode
            </summary>
            <param name="root">Root node of the Binary Search Tree</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.#ctor(`0)">
            <summary>
            Initializes a new instance of BinarySearchTreeNode
            </summary>
            <param name="root">The value of the root node of the Binary Search Tree</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Add(`0)">
            <summary>
            Adds the specified item to the BinarySearchTree
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Add(Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Adds the specified BinarySearchTreeNode and all its childs to the BinarySearchTree
            The order is not preserved
            </summary>
            <param name="item">item to add</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Analyze">
            <summary>
            Analyzes the BinarySearchTree and calculates the number of nodes and its height
            </summary>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Balance">
            <summary>
            Balances the BinarySearchTree
            </summary>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.InOrderTraversal">
            <summary>
            Returns a list of BinarySearchTreeNode as result of an in-order traverse of the the BinarySearchTree
            </summary>
            <returns>List of BinarySearchTreeNode</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Remove(`0)">
            <summary>
            Deletes a node from the BinarySearchTree, but not its childs
            </summary>
            <param name="value">true if node was found and deleted, false otherwise</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Search(`0)">
            <summary>
            Searchs a value within the BinarySearchTree
            </summary>
            <param name="value">Value to search for</param>
            <returns>true if value was found, false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Search(`0,Robotics.DataStructures.BinarySearchTreeNode{`0}@)">
            <summary>
            Searchs a value within the BinarySearchTree
            </summary>
            <param name="value">Value to search for</param>
            <param name="node">The BinarySearchTreeNode where the value was found, or null if value was not found.</param>
            <returns>true if value was found, false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.ToArray">
            <summary>
            Returns the ordered content of the BinarySearchTree as an array
            </summary>
            <returns>The ordered content of the BinarySearchTree as an array</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Clear">
            <summary>
            Removes all items from the BinarySearchTree
            </summary>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.Contains(`0)">
            <summary>
            Determines whether the BinarySearchTree contains a specific value.
            This is an homonimus of the BinarySearchTree.Search method
            </summary>
            <param name="item">The object to locate in the ICollection</param>
            <returns>true if item is found in the ICollection; otherwise, false.</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the BinarySearchTree to an Array, starting at a particular Array index
            The copy is performed with elements retrieved in in-order traversal
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from BinarySearchTree. The Array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTree`1.InOrderTraversal(Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Returns a list of BinarySearchTreeNode as result of an in-order traverse of the the BinarySearchTree
            </summary>
            <param name="node">BinarySearchTreeNode to start with</param>
            <returns>List of BinarySearchTreeNode</returns>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.Count">
            <summary>
            Gets the number of elements contained in the BinarySearchTree
            This is a O(n) operation
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.IsBalanced">
            <summary>
            Gets a value indicating if the BinarySearchTree is balanced
            A Balanced Binary Tree is a tree in which the height of the two subtrees of every node never differ by more than 1.
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.IsEmpty">
            <summary>
            Gets a value indicating if the BinarySearchTree is null (root is null)
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.IsFull">
            <summary>
            Gets a value indicating if the BinarySearchTree is full
            A Full Binary Tree is a tree in which every node other than the leaves has two children.
            This is an O(n) operation
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.IsPerfect">
            <summary>
            Gets a value indicating if the BinarySearchTree is full
            A Perfect Binary Tree is a full binary tree in which all leaves are at the same depth or same level.
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the BinarySearchTree is read-only.
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.Maximum">
            <summary>
            Gets the maximum value stored in the BinarySearchTree
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTree`1.Minimum">
            <summary>
            Gets the minimum value stored in the BinarySearchTree
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.Vector4">
            <summary>
            Represents a 4 dimension Vector
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.#ctor">
            <summary>
            Initializes a new instance of Vector4
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.#ctor(System.Double)">
            <summary>
            Initializes a new instance of Vector4
            </summary>
            <param name="value">Value to initialize both components to</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.#ctor(Robotics.Mathematics.Vector2)">
            <summary>
            Creates a Vector4 from a Vector2 with the z-axis and w-axis value set to zero
            </summary>
            <param name="value">Two dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.#ctor(Robotics.Mathematics.Vector3)">
            <summary>
            Creates a Vector4 from a Vector3 with the w-axis value set to zero
            </summary>
            <param name="value">Three dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.#ctor(Robotics.Mathematics.Vector)">
            <summary>
            Creates a Vector4 from a Vector with first 4 elements of provided vector or 0 if vector is smaller
            </summary>
            <param name="value">N dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector4
            </summary>
            <param name="x">Initial value for the x-component of the vector</param>
            <param name="y">Initial value for the y-component of the vector</param>
            <param name="z">Initial value for the z-component of the vector</param>
            <param name="w">Initial value for the w-component of the vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.OnComponentChanged">
            <summary>
            Raises the ComponentChanged event
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.Add(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.Divide(Robotics.Mathematics.Vector4,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="divider">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.Dot(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.Multiply(Robotics.Mathematics.Vector4,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scaleFactor">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.Negate(Robotics.Mathematics.Vector4)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.Substract(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_LogicalNot(Robotics.Mathematics.Vector4)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Equality(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Tests vectors for equality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Inequality(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Tests vectors for inequality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are not equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Addition(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Subtraction(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Multiply(Robotics.Mathematics.Vector4,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scaleFactor">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Multiply(System.Double,Robotics.Mathematics.Vector4)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="scaleFactor">Scalar value</param>
            <param name="value">Source vector</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Multiply(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Division(Robotics.Mathematics.Vector4,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value1">Source vector</param>
            <param name="divider">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Division(Robotics.Mathematics.Vector4,Robotics.Mathematics.Vector4)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Divisor vector</param>
            <returns>The result of dividing the vectors</returns>
            <remarks>Division of a vector by another vector is not mathematically defined.
            This method simply divides each component of a by the matching component of b.</remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Explicit(Robotics.Mathematics.Vector4)~Robotics.Mathematics.Vector2">
            <summary>
            Gets the equivalent R3 vector (sets the z-axis and w-axis coordinates to v[2]ero)
            </summary>
            <param name="value">Source vector</param>
            <returns>The 2-coordinate equivalent vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Explicit(Robotics.Mathematics.Vector4)~Robotics.Mathematics.Vector3">
            <summary>
            Gets the equivalent R3 vector (sets the w-axis coordinate to v[2]ero)
            </summary>
            <param name="value">Source vector</param>
            <returns>The 2-coordinate equivalent vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Implicit(Robotics.Mathematics.Vector2)~Robotics.Mathematics.Vector4">
            <summary>
            Gets the equivalent R4 vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The 4-coordinate equivalent vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Implicit(Robotics.Mathematics.Vector3)~Robotics.Mathematics.Vector4">
            <summary>
            Gets the equivalent R4 vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The 4-coordinate equivalent vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Explicit(Robotics.Mathematics.Vector4)~System.Double">
            <summary>
            Gets the lenght of the vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The length of the vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.op_Explicit(Robotics.Mathematics.Vector4)~System.String">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <param name="value">Source vector</param>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.ToString">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object
            </summary>
            <param name="obj">Object to make the comparison with</param>
            <returns>true if the current instance is equal to the specified object; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector4.GetHashCode">
            <summary>
            Gets the hash code of the vector object
            </summary>
            <returns>Hash code of the vector object</returns>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.UnitX">
            <summary>
            Returns the unit vector for the x-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.UnitY">
            <summary>
            Returns the unit vector for the y-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.UnitZ">
            <summary>
            Returns the unit vector for the z-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.UnitW">
            <summary>
            Returns the unit vector for the z-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.Unitary">
            <summary>
            Gets the unitary vector of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.W">
            <summary>
            Gets or sets the W coordinate of the vector (Fourth dimension)
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.X">
            <summary>
            Gets or sets the X coordinate of the vector (First dimension)
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.Y">
            <summary>
            Gets or sets Y coordinate of the vector (Second dimension)
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.Z">
            <summary>
            Gets or sets Z coordinate of the vector (Third dimension)
            </summary>
        </member>
        <member name="E:Robotics.Mathematics.Vector4.ComponentChanged">
            <summary>
            Raises when the value of a component of the vector changes
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.One">
            <summary>
            Returns a Vector with both of its components set to one
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector4.Zero">
            <summary>
            Returns a Vector with all of its components set to zero
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.MathUtil">
            <summary>
            Contains commonly used precalculated values
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.E">
            <summary>
            Represents the mathematical constant e.
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.Log10E">
            <summary>
            Represents the log base ten of e. 
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.Log2E">
            <summary>
            Represents the log base two of e. 
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.Pi">
            <summary>
            Represents the value of pi. 
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.PiOver2">
            <summary>
            Represents the value of pi divided by two. 
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.PiOver4">
            <summary>
            Represents the value of pi divided by four. 
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.PiOver6">
            <summary>
            Represents the value of pi divided by six. 
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.MathUtil.TwoPi">
            <summary>
            Represents the value of pi times two. 
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Abs(System.Decimal)">
            <summary>
            Returns the absolute value of a Decimal number. 
            </summary>
            <param name="value">A number in the range System.Decimal.MinValue ≤ value ≤ System.Decimal.MaxValue. </param>
            <returns>A Decimal, x, such that 0 ≤ x ≤ System.Decimal.MaxValue. </returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Abs(System.Double)">
            <summary>
            Returns the absolute value of a Double number. 
            </summary>
            <param name="value">A number in the range System.Double.MinValue = value = System.Double.MaxValue. </param>
            <returns>A Double, x, such that 0 = x = System.Double.MaxValue. </returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Abs(System.Int16)">
            <summary>
            Returns the absolute value of a Int16 number. 
            </summary>
            <param name="value">A number in the range System.Int16.MinValue = value = System.Int16.MaxValue. </param>
            <returns>A Double, x, such that 0 = x = System.Int16.MaxValue. </returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Abs(System.Int32)">
            <summary>
            Returns the absolute value of a Int32 number. 
            </summary>
            <param name="value">A number in the range System.Int32.MinValue = value = System.Int32.MaxValue. </param>
            <returns>A Double, x, such that 0 = x = System.Int32.MaxValue. </returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Abs(System.Int64)">
            <summary>
            Returns the absolute value of a Int64 number. 
            </summary>
            <param name="value">A number in the range System.Int64.MinValue = value = System.Int64.MaxValue. </param>
            <returns>A Double, x, such that 0 = x = System.Int64.MaxValue. </returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Abs(System.SByte)">
            <summary>
            Returns the absolute value of a SByte number. 
            </summary>
            <param name="value">A number in the range System.SByte.MinValue = value = System.SByte.MaxValue. </param>
            <returns>A Double, x, such that 0 = x = System.SByte.MaxValue. </returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Abs(System.Single)">
            <summary>
            Returns the absolute value of a Single number. 
            </summary>
            <param name="value">A number in the range System.Single.MinValue = value = System.Single.MaxValue. </param>
            <returns>A Double, x, such that 0 = x = System.Single.MaxValue. </returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Distance(System.Double,System.Double)">
            <summary>
            Calculates the absolute value of the difference of two values. 
            </summary>
            <param name="value1">Source value.</param>
            <param name="value2">Source value.</param>
            <returns>Distance between the two values.</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two values
            </summary>
            <param name="value1">Source value</param>
            <param name="value2">Source value</param>
            <param name="amount">Value between 0 and 1 indicating the weight of value2</param>
            <returns>Interpolated value</returns>
            <remarks>This method performs the linear interpolation based on the following formula.
            value1 + (value2 - value1) * amount
            Passing amount a value of 0 will cause value1 to be returned, a value of 1 will cause value2 to be returned.
            </remarks>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.Double[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.Byte[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.Decimal[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.Single[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.Int32[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.Int64[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.SByte[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.Int16[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.UInt32[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Max(System.UInt16[])">
            <summary>
            Returns the greater of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The greater value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.Double[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.Byte[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.Decimal[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.Single[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.Int32[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.Int64[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.SByte[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.Int16[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.UInt32[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Min(System.UInt16[])">
            <summary>
            Returns the lesser of n values. 
            </summary>
            <param name="values">List of values</param>
            <returns>The lesser value</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.ToDegrees(System.Double)">
            <summary>
            Converts radians to degrees. 
            </summary>
            <param name="radians">The angle in radians.</param>
            <returns>The angle in degrees.</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees.</param>
            <returns>The angle in radians.</returns>	
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Acos(System.Double)">
            <summary>
            Returns the angle whose cosine is the specified number.
            Values returned by this method are precalculated.
            </summary>
            <param name="d">A number representing a cosine, where -1 ≤ d ≤ 1.</param>
            <returns>An angle, θ, measured in radians, such that 0 ≤ θ ≤ π -or- NaN if d &lt; -1 or d &gt; 1.</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Asin(System.Double)">
            <summary>
            Returns the angle whose sine is the specified number.
            Values returned by this method are precalculated.
            </summary>
            <param name="d">A number representing a sine, where -1 ≤ d ≤ 1. </param>
            <returns>An angle, θ, measured in radians, such that -π/2 ≤ θ ≤π /2 -or- NaN if d &lt; -1 or d &gt; 1.</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Cos(System.Double)">
            <summary>
            Returns the cosine of the specified angle.
            Values returned by this method are precalculated.
            </summary>
            <param name="radians">An angle, measured in radians. </param>
            <returns>The cosine of  the provided angle. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Sin(System.Double)">
            <summary>
            Returns the sine of the specified angle.
            Values returned by this method are precalculated.
            </summary>
            <param name="radians">An angle, measured in radians. </param>
            <returns>The sine of the provided angle. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN</returns>
        </member>
        <member name="M:Robotics.Mathematics.MathUtil.Tan(System.Double)">
            <summary>
            Returns the tangent of the specified angle
            Values returned by this method are precalculated.
            </summary>
            <param name="radians">An angle, measured in radians. </param>
            <returns>The sine of the provided angle. If a is equal to NaN, NegativeInfinity, or PositiveInfinity, this method returns NaN</returns>
        </member>
        <member name="T:Robotics.ProducerConsumer`1">
            <summary>
            Implements a producer/consumer. 
            </summary>
            <typeparam name="T">Specifies the type of elements in the queue</typeparam>
        </member>
        <member name="F:Robotics.ProducerConsumer`1.queue">
            <summary>
            The Queue object used to store data
            </summary>
        </member>
        <member name="F:Robotics.ProducerConsumer`1.count">
            <summary>
            Number of elements contained in the ProducerConsumer. It allows read the number of elements in the queue asynchronously
            </summary>
        </member>
        <member name="F:Robotics.ProducerConsumer`1.capacity">
            <summary>
             The number of elements that the ProducerConsumer can store
            </summary>
        </member>
        <member name="F:Robotics.ProducerConsumer`1.fixedSize">
            <summary>
            Indicates if the ProducerConsumer has fixed size
            </summary>
        </member>
        <member name="F:Robotics.ProducerConsumer`1.discardExcedent">
            <summary>
            Indicates if the the last element of the queue will be discarded when a new element is stored in a fixed size ProducerConsumer object.
            </summary>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.#ctor">
            <summary>
            Initializes a new instance of the ProducerConsumer class.
            </summary>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProducerConsumer class.
            </summary>
            <param name="capacity">The maximum number of elements that the ProducerConsumer can contain</param>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ProducerConsumer class.
            </summary>
            <param name="capacity">The maximum number of elements that the ProducerConsumer can contain</param>
            <param name="fixedSize">Indicates if the ProducerConsumer has fixed size</param>
            <param name="discardExcedent">Indicates if the the last element of the queue will be discarded when a new element is stored in a fixed size ProducerConsumer object.</param>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.Clear">
            <summary>
            Removes all objects from the ProducerConsumer queue
            </summary>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.Produce(`0)">
            <summary>
            Adds an object to the end of the queue of the ProducerConsumer
            </summary>
            <param name="item">The object to add to the ProducerConsumer. The value can be a null reference (Nothing in Visual Basic) for reference types</param>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.Consume">
            <summary>
            Removes and returns the object at the beginning of the queue of the ProducerConsumer
            </summary>
            <returns>The object that is removed from the beginning of the queue of the ProducerConsumer.</returns>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.Consume(System.Int32)">
            <summary>
            Removes and returns the object at the beginning of the queue of the ProducerConsumer
            If the specified time-out interval elapses, the thread enters the ready queue and returns the default value of the type. 
            </summary>
            <param name="timeOut">The number of milliseconds to wait for an element</param>
            <returns>The object that is removed from the beginning of the queue of the ProducerConsumer.</returns>
        </member>
        <member name="M:Robotics.ProducerConsumer`1.ToArray">
            <summary>
            Copies the ProducerConsumer&lt;T&gt; elements to a new array.
            </summary>
            <returns>A new array containing elements copied from the ProducerConsumer</returns>
        </member>
        <member name="P:Robotics.ProducerConsumer`1.Count">
            <summary>
            Gets the number of elements contained in the ProducerConsumer
            </summary>
        </member>
        <member name="P:Robotics.ProducerConsumer`1.Capacity">
            <summary>
            Gets the number of elements that the Queue can store
            </summary>
        </member>
        <member name="P:Robotics.ProducerConsumer`1.DiscardExcedent">
            <summary>
            Gets a value indicating if the the last element of the queue will be discarded when a new element is stored in a fixed size ProducerConsumer object.
            If the ProducerConsumer has fixed size and this value is set to false, the Produce method will block untill there is space in the queue
            </summary>
            <remarks>This value has not effect on non fixed size ProducerConsumer objects</remarks>
        </member>
        <member name="P:Robotics.ProducerConsumer`1.FixedSize">
            <summary>
            Gets a value indicating if the ProducerConsumer has fixed size
            </summary>
            <remarks>A fixed size ProducerConsumer object will not increase the size of its queue.
            The exceding contained objects may be discarded depending on the value of the DiscardExcedent property</remarks>
        </member>
        <member name="T:Robotics.Paralelism.ParallelPipesAndFilters`2">
            <summary>
            
            </summary>
            <typeparam name="TInput">The type of the input data</typeparam>
            <typeparam name="TOutput">The type of the output data</typeparam>
        </member>
        <member name="F:Robotics.Paralelism.ParallelPipesAndFilters`2.inputPipe">
            <summary>
            The pipe for data input
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.ParallelPipesAndFilters`2.outputPipe">
            <summary>
            The pipe for data output
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ParallelPipesAndFilters`2.InputPipe">
            <summary>
            Gets or sets the pipe for data input
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.ParallelPipesAndFilters`2.OutputPipe">
            <summary>
            Gets or sets the pipe for data output
            </summary>
        </member>
        <member name="T:Robotics.HAL.MobileBase">
            <summary>
            Represents a robot's mobile base
            </summary>
        </member>
        <member name="T:Robotics.HAL.OrientedBoundingBox">
            <summary>
            Implements an oriented Bounding Box
            </summary>
        </member>
        <member name="F:Robotics.HAL.OrientedBoundingBox.depth">
            <summary>
            The depth of the BoundingBox object (Length over the y-axis)
            </summary>
        </member>
        <member name="F:Robotics.HAL.OrientedBoundingBox.height">
            <summary>
            The height of the BoundingBox object (Length over the z-axis)
            </summary>
        </member>
        <member name="F:Robotics.HAL.OrientedBoundingBox.width">
            <summary>
            The width of the BoundingBox object (Length over the x-axis)
            </summary>
        </member>
        <member name="F:Robotics.HAL.OrientedBoundingBox.roll">
            <summary>
            The roll of the BoundingBox object (rotation over the z-axis)
            </summary>
        </member>
        <member name="F:Robotics.HAL.OrientedBoundingBox.pitch">
            <summary>
            The pitch of the BoundingBox object (rotation over the y-axis)
            </summary>
        </member>
        <member name="F:Robotics.HAL.OrientedBoundingBox.yaw">
            <summary>
            The yaw of the BoundingBox object (rotation over the x-axis)
            </summary>
        </member>
        <member name="M:Robotics.HAL.OrientedBoundingBox.#ctor">
            <summary>
            Initializes a new instance of BoundingBox
            </summary>
        </member>
        <member name="M:Robotics.HAL.OrientedBoundingBox.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of BoundingBox
            </summary>
            <param name="depth">The roll of the BoundingBox object</param>
            <param name="height">The pitch of the BoundingBox object</param>
            <param name="width">The yaw of the BoundingBox object</param>
        </member>
        <member name="M:Robotics.HAL.OrientedBoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of BoundingBox
            </summary>
            <param name="depth">The depth of the BoundingBox object</param>
            <param name="height">The height of the BoundingBox object</param>
            <param name="width">The width of the BoundingBox object</param>
            <param name="roll">The roll of the BoundingBox object</param>
            <param name="pitch">The pitch of the BoundingBox object</param>
            <param name="yaw">The yaw of the BoundingBox object</param>
        </member>
        <member name="M:Robotics.HAL.OrientedBoundingBox.Distance(Robotics.HAL.IPositionable)">
            <summary>
            Calculates the distance between this instance and another IPositionable object
            </summary>
            <param name="p">IPositionable object</param>
            <returns>Vector3 that represents the distance vector between two IPositionable objects</returns>
        </member>
        <member name="M:Robotics.HAL.OrientedBoundingBox.Intersects(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of IIntersectable intersects with another
            </summary>
            <param name="other">IIntersectable object to check intersection with</param>
            <returns>true if there is intersection, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.OrientedBoundingBox.Contains(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of IIntersectable contains the provided IIntersectable instance
            </summary>
            <param name="other">IIntersectable object to check contention with</param>
            <returns>true if the IIntersectable object provided is completely contained within, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.OrientedBoundingBox.Contains(Robotics.HAL.IPositionable)">
            <summary>
            Checks if this instance of IIntersectable contains the provided IPositionable instance
            </summary>
            <param name="position">IPositionable object to check contention with</param>
            <returns>true if the IPositionable object provided is inside this instance, false otherwise</returns>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Depth">
            <summary>
            Gets or sets the depth of the BoundingBox object (Length over the y-axis)
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Height">
            <summary>
            Gets or sets the height of the BoundingBox object (Length over the z-axis)
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Width">
            <summary>
            Gets or sets the width of the BoundingBox object (Length over the x-axis)
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Roll">
            <summary>
            Gets or sets the roll of the BoundingBox object (rotation over the z-axis)
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Pitch">
            <summary>
            Gets or sets the pitch of the BoundingBox object (rotation over the y-axis)
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Yaw">
            <summary>
            Gets or sets the yaw of the BoundingBox object (rotation over the x-axis)
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Vertexes">
            <summary>
            Gets the 8 vertexes of the oriented bounding box
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Homogeneous">
            <summary>
            Gets the homogeneous matrix which contains the position and orientation of the bounding box
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.OrientationMatrix3D">
            <summary>
            Gets the 3-dimentional orientation matrix of the OrientedBoundingBox object
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.OrientationMatrix4D">
            <summary>
            Gets the 4-dimentional orientation matrix of the OrientedBoundingBox object
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.QuickHomogeneous">
            <summary>
            Gets the omogeneous matrix which contains the position and orientation of the bounding box
            This matrix is calculated using precalculated values of trigonometric functions
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.QuickOrientation3D">
            <summary>
            Gets the 3-dimentional orientation matrix of the OrientedBoundingBox object
            calculated using pre-calculated sin/cos values
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.QuickOrientation4D">
            <summary>
            Gets the 4-dimentional orientation matrix of the OrientedBoundingBox object
            calculated using pre-calculated sin/cos values
            </summary>
        </member>
        <member name="P:Robotics.HAL.OrientedBoundingBox.Position">
            <summary>
            Gets or sets the position of the centroid of the Intersectable object
            </summary>
        </member>
        <member name="F:Robotics.HAL.MobileBase.robotDiameter">
            <summary>
            Stores the robot diameter, in meters
            </summary>
        </member>
        <member name="F:Robotics.HAL.MobileBase.maxForwardSpeed">
            <summary>
            Stores the maximum forward speed of the robot, in radians per second
            </summary>
        </member>
        <member name="F:Robotics.HAL.MobileBase.maxBackwardSpeed">
            <summary>
            Stores the minimum forward speed of the robot, in radians per second
            </summary>
        </member>
        <member name="F:Robotics.HAL.MobileBase.position">
            <summary>
            Stores the position of the robot, in meters
            </summary>
        </member>
        <member name="F:Robotics.HAL.MobileBase.orientation">
            <summary>
            Stores the orientation of the robot, in radians between [-Pi, Pi]
            </summary>
        </member>
        <member name="M:Robotics.HAL.MobileBase.#ctor">
            <summary>
            Initializes a new instance of Robot
            </summary>
        </member>
        <member name="M:Robotics.HAL.MobileBase.#ctor(Robotics.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of Robot
            </summary>
            <param name="position">Initial position of the robot</param>
        </member>
        <member name="M:Robotics.HAL.MobileBase.#ctor(Robotics.Mathematics.Vector3,System.Double)">
            <summary>
            Initializes a new instance of Robot
            </summary>
            <param name="position">Initial position of the robot</param>
            <param name="orientation">Initial orientation of the robot</param>
        </member>
        <member name="M:Robotics.HAL.MobileBase.Break">
            <summary>
            Immediatly stops the robot and aplies the break if any.
            </summary>
        </member>
        <member name="M:Robotics.HAL.MobileBase.ExecuteLowLevelMV(System.Double@,System.Double@,System.Double@)">
            <summary>
            Request to the robot to execute a MV command
            </summary>
            <param name="distance">Distance in meters the robot must advance.
            This parameter is passed by reference, its value will be modified with the total distance advanced by the robot</param>
            <param name="angle">Angle in radians the robot must turn.
            This parameter is passed by reference, its value will be modified with the total angle turned by the robot</param>
            <param name="time">Time of command execution.
            This parameter is passed by reference, its value will be modified with the total execution time</param>
            <returns>true if command is supported by the robot, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.MobileBase.ResetRobotBase">
            <summary>
            Resets the base of the robot to its initial state.
            </summary>
            <remarks>This command stops the robot and clear the encoder values.</remarks>
        </member>
        <member name="M:Robotics.HAL.MobileBase.Stop">
            <summary>
            Sets the speed of the robot to zero
            </summary>
        </member>
        <member name="P:Robotics.HAL.MobileBase.RobotDiameter">
            <summary>
            Gets the robot diameter, in meters
            </summary>
        </member>
        <member name="P:Robotics.HAL.MobileBase.MaxForwardSpeed">
            <summary>
            Gets the maximum forward speed of the robot, in radians per second
            </summary>
        </member>
        <member name="P:Robotics.HAL.MobileBase.MaxBackwardSpeed">
            <summary>
            Gets the minimum forward speed of the robot, in radians per second
            </summary>
        </member>
        <member name="P:Robotics.HAL.MobileBase.Position">
            <summary>
            Gets or sets the position of the robot, in meters
            </summary>
        </member>
        <member name="P:Robotics.HAL.MobileBase.Orientation">
            <summary>
            Gets or sets the orientation of the robot, in radians between [-Pi, Pi]
            </summary>
        </member>
        <member name="T:Robotics.API.AsyncFunctionCE">
            <summary>
            Asynchronously executes a function or method as a command executer
            </summary>
        </member>
        <member name="F:Robotics.API.AsyncFunctionCE.executerMethod">
            <summary>
            Represents the method/function that will perform the command execution
            </summary>
        </member>
        <member name="F:Robotics.API.AsyncFunctionCE.parametersRequired">
            <summary>
            Indicates if the executer requires parameters
            </summary>
        </member>
        <member name="M:Robotics.API.AsyncFunctionCE.#ctor(System.String,Robotics.API.CommandExecuterMethod,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncFunctionCE for the asynchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the AsyncFunctionCE will execute</param>
            <param name="executerMethod">The method/function that will perform the command execution</param>
            <param name="parametersRequired">Indicates if the executer requires parameters</param>
        </member>
        <member name="M:Robotics.API.AsyncFunctionCE.AsyncTask(Robotics.API.Command)">
            <summary>
            Calls the executer method
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <returns>The Response object result of provided command execution. If no response is required, must return null</returns>
            <remarks>If the command execution is aborted the execution of this method is
            canceled and a failure response is sent if required</remarks>
        </member>
        <member name="M:Robotics.API.AsyncFunctionCE.DefaultParameterParser(System.String[])">
            <summary>
            When overriden, receives the parameters of an analyzed command by the default Signature object as an array of strings
            </summary>
            <param name="parameters">Array of strings containing the parameters of the command</param>
        </member>
        <member name="P:Robotics.API.AsyncFunctionCE.ParametersRequired">
            <summary>
            Gets a value indicating if the executer requires parameters
            </summary>
        </member>
        <member name="T:Robotics.API.CommandResponsePair">
            <summary>
            Encapsulates a Command/Response pair
            </summary>
        </member>
        <member name="F:Robotics.API.CommandResponsePair.command">
            <summary>
            Asociated Command object
            </summary>
        </member>
        <member name="F:Robotics.API.CommandResponsePair.response">
            <summary>
            Asociated Response object
            </summary>
        </member>
        <member name="M:Robotics.API.CommandResponsePair.#ctor(Robotics.API.Command,Robotics.API.Response)">
            <summary>
            Initializes a new CommandResponsePair
            </summary>
            <param name="command">Asociated Command object</param>
            <param name="response">Asociated Response object</param>
        </member>
        <member name="P:Robotics.API.CommandResponsePair.Command">
            <summary>
            Gets the asociated Command object
            </summary>
        </member>
        <member name="P:Robotics.API.CommandResponsePair.Response">
            <summary>
            Gets the asociated Response object
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.Vector3">
            <summary>
            Represents a 3 dimension Vector
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.#ctor">
            <summary>
            Initializes a new instance of Vector3
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.#ctor(System.Double)">
            <summary>
            Initializes a new instance of Vector3
            </summary>
            <param name="value">Value to initialize both components to</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.#ctor(Robotics.Mathematics.Vector2)">
            <summary>
            Creates a Vector3 from a Vector2 with the z-axis value set to zero
            </summary>
            <param name="value">Two dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.#ctor(Robotics.Mathematics.Vector)">
            <summary>
            Creates a Vector3 from a Vector with first 3 elements of provided vector or 0 if vector is smaller
            </summary>
            <param name="value">N dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector3
            </summary>
            <param name="x">Initial value for the x-component of the vector</param>
            <param name="y">Initial value for the y-component of the vector</param>
            <param name="z">Initial value for the z-component of the vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.OnComponentChanged">
            <summary>
            Raises the ComponentChanged event
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Add(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Cross(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Calculates the cross product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Cross product of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Divide(Robotics.Mathematics.Vector3,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="divider">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Dot(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Multiply(Robotics.Mathematics.Vector3,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scaleFactor">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Negate(Robotics.Mathematics.Vector3)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Substract(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_LogicalNot(Robotics.Mathematics.Vector3)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Equality(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Tests vectors for equality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Inequality(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Tests vectors for inequality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are not equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Addition(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Subtraction(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Multiply(Robotics.Mathematics.Vector3,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scaleFactor">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Multiply(System.Double,Robotics.Mathematics.Vector3)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="scaleFactor">Scalar value</param>
            <param name="value">Source vector</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Multiply(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_ExclusiveOr(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Calculates the cross product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Cross product of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Division(Robotics.Mathematics.Vector3,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value1">Source vector</param>
            <param name="divider">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Division(Robotics.Mathematics.Vector3,Robotics.Mathematics.Vector3)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Divisor vector</param>
            <returns>The result of dividing the vectors</returns>
            <remarks>Division of a vector by another vector is not mathematically defined.
            This method simply divides each component of a by the matching component of b.</remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Explicit(Robotics.Mathematics.Vector3)~Robotics.Mathematics.Vector2">
            <summary>
            Gets the equivalent R3 vector (sets the z-axis coordinate to Zero)
            </summary>
            <param name="value">Source vector</param>
            <returns>The 2-coordinate equivalent vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Implicit(Robotics.Mathematics.Vector2)~Robotics.Mathematics.Vector3">
            <summary>
            Gets the equivalent R3 vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The 3-coordinate equivalent vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Explicit(Robotics.Mathematics.Vector3)~System.Double">
            <summary>
            Gets the lenght of the vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The length of the vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.op_Explicit(Robotics.Mathematics.Vector3)~System.String">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <param name="value">Source vector</param>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.CartesianToSpherical(Robotics.Mathematics.Vector3)">
            <summary>
            Converts a Vector3 from cartesian representation to spherical representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector3 in spherical representation</returns>
            <remarks>
            Cartesian	Cilindric	Spherical
            	X	=	radius	 =	rho (radius)
            	Y	=	theta	 =	theta (x-y angle)
            	Z	=		Z	 =	phi
            </remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.CartesianToCilindric(Robotics.Mathematics.Vector3)">
            <summary>
            Converts a Vector3 from cartesian representation to cilindric representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector3 in cilindric representation</returns>
            <remarks>
            Cartesian	Cilindric	Spherical
            	X	=	radius	 =	rho (radius)
            	Y	=	theta	 =	theta (x-y angle)
            	Z	=		Z	 =	phi
            </remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.SphericalToCartesian(Robotics.Mathematics.Vector3)">
            <summary>
            Converts a Vector3 from spherical representation to cartesian representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector3 in spherical representation</returns>
            <remarks>
            Cartesian	Cilindric	Spherical
            	X	=	radius	 =	rho (radius)
            	Y	=	theta	 =	theta (x-y angle)
            	Z	=		Z	 =	phi
            </remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.CilindricToCartesian(Robotics.Mathematics.Vector3)">
            <summary>
            Converts a Vector3 from cilindric representation to cartesian representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector3 in cartesian representation</returns>
            <remarks>
            Cartesian	Cilindric	Spherical
            	X	=	radius	 =	rho (radius)
            	Y	=	theta	 =	theta (x-y angle)
            	Z	=		Z	 =	phi
            </remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.CilindricToSpherical(Robotics.Mathematics.Vector3)">
            <summary>
            Converts a Vector3 from cilindric representation to spherical representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector3 in cilindric representation</returns>
            <remarks>
            Cartesian	Cilindric	Spherical
            	X	=	radius	 =	rho (radius)
            	Y	=	theta	 =	theta (x-y angle)
            	Z	=		Z	 =	phi
            </remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.SphericalToCilindric(Robotics.Mathematics.Vector3)">
            <summary>
            Converts a Vector3 from spherical representation to cilindric representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector3 in spherical representation</returns>
            <remarks>
            Cartesian	Cilindric	Spherical
            	X	=	radius	 =	rho (radius)
            	Y	=	theta	 =	theta (x-y angle)
            	Z	=		Z	 =	phi
            </remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.ToString">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object
            </summary>
            <param name="obj">Object to make the comparison with</param>
            <returns>true if the current instance is equal to the specified object; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector3.GetHashCode">
            <summary>
            Gets the hash code of the vector object
            </summary>
            <returns>Hash code of the vector object</returns>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.UnitX">
            <summary>
            Returns the unit vector for the x-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.UnitY">
            <summary>
            Returns the unit vector for the y-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.UnitZ">
            <summary>
            Returns the unit vector for the z-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.Unitary">
            <summary>
            Gets the unitary vector of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.X">
            <summary>
            X coordinate of the vector (First dimension)
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.Y">
            <summary>
            Y coordinate of the vector (Second dimension)
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.Z">
            <summary>
            Z coordinate of the vector (Third dimension)
            </summary>
        </member>
        <member name="E:Robotics.Mathematics.Vector3.ComponentChanged">
            <summary>
            Raises when the value of a component of the vector changes
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.One">
            <summary>
            Returns a Vector3 with both of its components set to one
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector3.Zero">
            <summary>
            Returns a Vector3 with all of its components set to zero
            </summary>
        </member>
        <member name="T:Robotics.API.SyncCommandExecuter">
            <summary>
            Serves as base class for classes which allow execute a Command synchronously
            </summary>
            <remarks>A SyncCommandExecuter blocks the CommandManager trhead until the execution of the command
            has been finished; therefore no other commands will be parsed or executed. If the execution of the command
            requires to wait for an event to occur (like incoming data) or takes more than a few lines of code
            or will take more than a few microseconds to execute, use instead an AsyncCommandExecuter.</remarks>
        </member>
        <member name="F:Robotics.API.SyncCommandExecuter.busy">
            <summary>
            Indicates if the executer is busy
            </summary>
        </member>
        <member name="F:Robotics.API.SyncCommandExecuter.running">
            <summary>
            Flag that indicates if the asyncExecutionThread is running
            </summary>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.#ctor(Robotics.API.Signature)">
            <summary>
            Initializes a new instance of SyncCommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.#ctor(Robotics.API.Signature,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of SyncCommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.#ctor(System.String)">
            <summary>
            Initializes a new instance of SyncCommandExecuter for the synchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the SyncCommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.#ctor(System.String,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of SyncCommandExecuter for the aynchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the SyncCommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.Abort">
            <summary>
            Aborts the command execution
            </summary>
            <returns>false, since SyncCommandExecuter objects usually cannot be aborted</returns>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.SyncTask(Robotics.API.Command)">
            <summary>
            When overriden executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <returns>The Response object result of provided command execution. If no response is required, must return null</returns>
            <remarks>If the command execution is aborted the execution of this method is
            canceled and a failure response is sent if required</remarks>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.Execute(Robotics.API.Command)">
            <summary>
            Executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <remarks>If the command execution is aborted a failure response is sent if required</remarks>
        </member>
        <member name="M:Robotics.API.SyncCommandExecuter.DefaultParameterParser(System.String[])">
            <summary>
            When overriden, receives the parameters of an analyzed command by the default Signature object as an array of strings
            </summary>
            <param name="parameters">Array of strings containing the parameters of the command</param>
        </member>
        <member name="P:Robotics.API.SyncCommandExecuter.Busy">
            <summary>
            Gets a value that indicates if the SyncCommandExecuter is busy
            </summary>
        </member>
        <member name="P:Robotics.API.SyncCommandExecuter.IsRunning">
            <summary>
            Gets a value that indicates if the CommandExecuter is running
            </summary>
        </member>
        <member name="P:Robotics.API.SyncCommandExecuter.ParametersRequired">
            <summary>
            Gets a value indicating if the executer requires parameters
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.LongSharedVariable">
            <summary>
            Gets access to a LONG INTEGER variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of LongSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of LongSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of LongSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.#ctor(System.String,System.Int64)">
            <summary>
            Initializes a new instance of LongSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.Deserialize(System.String,System.Int64@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.Serialize(System.Int64,System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.LongSharedVariable.TypeName">
            <summary>
            Returns "long"
            </summary>
        </member>
        <member name="T:Robotics.HAL.LinearDevice">
            <summary>
            Represents a device which can detect or move over a line (X-axis)
            </summary>
        </member>
        <member name="P:Robotics.HAL.LinearDevice.AbsoluteMaximumLinearStep">
            <summary>
            Gets the Absolute last step the device can reach
            </summary>
        </member>
        <member name="P:Robotics.HAL.LinearDevice.LinearResolution">
            <summary>
            Gets the smallest distance the device can detect or move
            </summary>
        </member>
        <member name="P:Robotics.HAL.LinearDevice.LinearResolutionBits">
            <summary>
            Gets the linear resolution bits
            </summary>
        </member>
        <member name="P:Robotics.HAL.LinearDevice.LinearStepZero">
            <summary>
            Step in which the Zero is located
            </summary>
        </member>
        <member name="P:Robotics.HAL.LinearDevice.StepsPerMeter">
            <summary>
            Gets the number of steps per meter
            </summary>
        </member>
        <member name="P:Robotics.HAL.LinearDevice.ValidMinimumLinearStep">
            <summary>
            Gets the First Step of the Measurement Range 
            </summary>
        </member>
        <member name="P:Robotics.HAL.LinearDevice.ValidMaximumLinearStep">
            <summary>
            Gets the Last Step of the Measurement Range 
            </summary>
        </member>
        <member name="T:Robotics.API.ICommand">
            <summary>
            Represents a Command to be executed
            </summary>
        </member>
        <member name="M:Robotics.API.ICommand.IsMatch(Robotics.API.Response)">
            <summary>
            Gets a value indicating if provided Response is a response for current command
            </summary>
            <param name="response">Response to check</param>
            <returns>true if provided Response is a response for command, false otherwise</returns>
        </member>
        <member name="P:Robotics.API.ICommand.IsSystemCommand">
            <summary>
            Gets a value indicating if the Command object represents a system command
            </summary>
        </member>
        <member name="T:Robotics.API.IResponse">
            <summary>
            Represents the response of a command
            </summary>
        </member>
        <member name="P:Robotics.API.IResponse.Success">
            <summary>
            Gets the result contained in response
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.Vector2">
            <summary>
            Represents a 1 dimension Vector
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.#ctor">
            <summary>
            Initializes a new instance of Vector2
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.#ctor(System.Double)">
            <summary>
            Initializes a new instance of Vector2
            </summary>
            <param name="value">Value to initialize both components to</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.#ctor(Robotics.Mathematics.Vector)">
            <summary>
            Creates a Vector2 from a Vector with first 2 elements of provided vector or 0 if vector is smaller
            </summary>
            <param name="value">N dimensions base vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of Vector2
            </summary>
            <param name="x">Initial value for the x-component of the vector</param>
            <param name="y">Initial value for the y-component of the vector</param>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.OnComponentChanged">
            <summary>
            Raises the ComponentChanged event
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Add(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Cross(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Calculates the cross product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Cross product of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Divide(Robotics.Mathematics.Vector2,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value1">Source vector</param>
            <param name="divider">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Dot(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Multiply(Robotics.Mathematics.Vector2,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scaleFactor">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Negate(Robotics.Mathematics.Vector2)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Substract(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_LogicalNot(Robotics.Mathematics.Vector2)">
            <summary>
            Returns a vector pointing in the opposite direction
            </summary>
            <param name="value">Source vector</param>
            <returns>Vector pointing in the opposite direction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Equality(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Tests vectors for equality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Inequality(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Tests vectors for inequality
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>true if the vectors are not equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Addition(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Adds two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Sum of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Subtraction(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Subtracts a vector from a vector
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Multiply(Robotics.Mathematics.Vector2,System.Double)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="value">Source vector</param>
            <param name="scaleFactor">Scalar value</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Multiply(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Calculates the dot product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>The dot product of the two vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Multiply(System.Double,Robotics.Mathematics.Vector2)">
            <summary>
            Multiplies a vector by a scalar value
            </summary>
            <param name="scaleFactor">Scalar value</param>
            <param name="value">Source vector</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_ExclusiveOr(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Calculates the cross product of two vectors
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Source vector</param>
            <returns>Cross product of the source vectors</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Division(Robotics.Mathematics.Vector2,System.Double)">
            <summary>
            Divides a vector by a scalar value
            </summary>
            <param name="value1">Source vector</param>
            <param name="divider">The divisor</param>
            <returns>The source vector divided by b</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Division(Robotics.Mathematics.Vector2,Robotics.Mathematics.Vector2)">
            <summary>
            Divides the components of a vector by the components of another vector.
            </summary>
            <param name="value1">Source vector</param>
            <param name="value2">Divisor vector</param>
            <returns>The result of dividing the vectors</returns>
            <remarks>Division of a vector by another vector is not mathematically defined.
            This method simply divides each component of a by the matching component of b.</remarks>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Implicit(Robotics.Mathematics.Vector2)~System.Drawing.PointF">
            <summary>
            Converts the Vector2 to a System.Drawing.PointF structure
            </summary>
            <param name="value">Vector2 to convert</param>
            <returns>System.Drawing.PointF structure</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Explicit(Robotics.Mathematics.Vector2)~System.Double">
            <summary>
            Gets the lenght of the vector
            </summary>
            <param name="value">Source vector</param>
            <returns>The length of the vector</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.op_Explicit(Robotics.Mathematics.Vector2)~System.String">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <param name="value">Source vector</param>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Polar(Robotics.Mathematics.Vector2)">
            <summary>
            Converts a Vector2 to its Polar representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector in radius (X) angle (Y) representation</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Cartesian(Robotics.Mathematics.Vector2)">
            <summary>
            Converts a Vector2 to its Cartesian representation
            </summary>
            <param name="value">Source value.</param>
            <returns>Vector in cartesian representation</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.ToString">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object
            </summary>
            <param name="obj">Object to make the comparison with</param>
            <returns>true if the current instance is equal to the specified object; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Vector2.GetHashCode">
            <summary>
            Gets the hash code of the vector object
            </summary>
            <returns>Hash code of the vector object</returns>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.UnitX">
            <summary>
            Returns the unit vector for the x-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.UnitY">
            <summary>
            Returns the unit vector for the y-axis
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.Unitary">
            <summary>
            Gets the unitary vector of the vector
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.X">
            <summary>
            X coordinate of the vector (First dimension)
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.Y">
            <summary>
            Y coordinate of the vector (Second dimension)
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.Angle">
            <summary>
            Returns the inclination angle of the vector
            </summary>
        </member>
        <member name="E:Robotics.Mathematics.Vector2.ComponentChanged">
            <summary>
            Raises when the value of a component of the vector changes
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.One">
            <summary>
            Returns a Vector2 with both of its components set to one
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Vector2.Zero">
            <summary>
            Returns a Vector2 with all of its components set to zero
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.StateMachineBase">
            <summary>
            Serves as base class to execute state machines
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.IStateMachine">
            <summary>
            Represents a state machine
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.RunNextStep">
            <summary>
            Executes the current step and advances the state machine to the next step
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.RunToNextAcceptState">
            <summary>
            Executes the state machine untill it reaches an accept state
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.RunToNextAcceptState(System.Int32)">
            <summary>
            Executes the state machine untill it reaches an accept state or a maximum number of steps
            are executed
            </summary>
            <param name="maxSteps">The maximum number of steps allowed for the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.RunUntillFinished">
            <summary>
            Executes the state machine untill it reaches the final state
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.RunUntillFinished(System.Int32)">
            <summary>
            Executes the state machine untill it reaches the final state or a maximum number of steps
            are executed
            </summary>
            <param name="maxSteps">The maximum number of steps allowed for the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.Reset">
            <summary>
            Resets the state machine
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.SetFinalState(Robotics.StateMachines.IState)">
            <summary>
            Sets the final state of the state machine. If the final state does not belong to the state machine it is added.
            </summary>
            <param name="state">The final state of the state machine.</param>
        </member>
        <member name="M:Robotics.StateMachines.IStateMachine.SetFinalState(System.Int32)">
            <summary>
            Sets the final state of the state machine.
            </summary>
            <param name="stateIndex">The index of the final state of the state machine.</param>
        </member>
        <member name="P:Robotics.StateMachines.IStateMachine.StateCount">
            <summary>
            Gets the number of states of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.IStateMachine.CurrentStateIndex">
            <summary>
            Gets the zero-based index of the current state of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.IStateMachine.CurrentStateIsAccept">
            <summary>
            Gets a value indicating if the current state is an accept state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.IStateMachine.CurrentStateIsFinal">
            <summary>
            Gets a value indicating if the current state is the final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.IStateMachine.Finished">
            <summary>
            Gets a value indicating if the state machine reached its final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.IStateMachine.FinalStateIndex">
            <summary>
            Gets the index of the final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.IStateMachine.ExecutingState">
            <summary>
            Gets a value indicating if the state machine is currently executing a state
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.RunNextStep">
            <summary>
            Executes the current step and advances the state machine to the next step
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.RunToNextAcceptState">
            <summary>
            Executes the state machine untill it reaches an accept state (the accept state is NOT executed)
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.RunToNextAcceptState(System.Int32)">
            <summary>
            Executes the state machine untill it reaches an accept state or a maximum number of steps
            are executed (the accept state is NOT executed)
            </summary>
            <param name="maxSteps">The maximum number of steps allowed for the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.RunUntillFinished">
            <summary>
            Executes the state machine untill it reaches a final state
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.RunUntillFinished(System.Int32)">
            <summary>
            Executes the state machine untill it reaches a final state or a maximum number of steps
            are executed
            </summary>
            <param name="maxSteps">The maximum number of steps allowed for the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.Reset">
            <summary>
            Resets the state machine
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.SetFinalState(Robotics.StateMachines.IState)">
            <summary>
            Sets the final state of the state machine. If the final state does not belong to the state machine it is added.
            </summary>
            <param name="state">The final state of the state machine.</param>
        </member>
        <member name="M:Robotics.StateMachines.StateMachineBase.SetFinalState(System.Int32)">
            <summary>
            Sets the final state of the state machine.
            </summary>
            <param name="stateIndex">The index of the final state of the state machine.</param>
        </member>
        <member name="P:Robotics.StateMachines.StateMachineBase.StateCount">
            <summary>
            Gets the number of states of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.StateMachineBase.CurrentStateIndex">
            <summary>
            Gets or sets the zero-based index of the current state of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.StateMachineBase.CurrentStateIsAccept">
            <summary>
            Gets a value indicating if the current state is an accept state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.StateMachineBase.CurrentStateIsFinal">
            <summary>
            Gets a value indicating if the current state is the final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.StateMachineBase.ExecutingState">
            <summary>
            Gets a value indicating if the state machine is currently executing a state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.StateMachineBase.FinalStateIndex">
            <summary>
            Gets the index of the final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.StateMachineBase.Finished">
            <summary>
            Gets a value indicating if the state machine reached its final state
            </summary>
        </member>
        <member name="T:Robotics.API.SharedVariableSubscriptionReport`1">
            <summary>
            Represents a modification report of a shared variable
            </summary>
            <typeparam name="T">The type of data stored in the shared variable</typeparam>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionReport`1.variable">
            <summary>
            The SharedVariable object that generates this report
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionReport`1.reportType">
            <summary>
            The type of report received
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionReport`1.subscriptionType">
            <summary>
            The type of subscription of the report received
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionReport`1.writer">
            <summary>
            The name of the module that performed the write or create operation
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionReport`1.value">
            <summary>
            The value of the data contained in the report
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariableSubscriptionReport`1.#ctor(Robotics.API.SharedVariable,Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.String,`0)">
            <summary>
            Initializes a new instance of SharedVariableSubscriptionReport
            </summary>
            <param name="variable">The SharedVariable object that generates this report</param>
            <param name="subscriptionType">The type of subscription of the report received</param>
            <param name="reportType">The type of report received</param>
            <param name="writer">The name of the module that performed the write or create operation</param>
            <param name="value">The value of the data contained in the report</param>
        </member>
        <member name="M:Robotics.API.SharedVariableSubscriptionReport`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Robotics.API.SharedVariableSubscriptionReport`1.Variable">
            <summary>
            Gets the SharedVariable object that generates this report
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableSubscriptionReport`1.ReportType">
            <summary>
            Gets the type of report received
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableSubscriptionReport`1.SubscriptionType">
            <summary>
            Gets the type of subscription of the report received
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableSubscriptionReport`1.WriterName">
            <summary>
            Gets the name of the module that performed the write or create operation
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableSubscriptionReport`1.Value">
            <summary>
            Gets the value of the data contained in the report
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable">
            <summary>
            Gets access to an ARRAY OF DOUBLES variable stored in the Blackboard
            </summary>
        </member>
        <member name="F:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.SplitChars">
            <summary>
            Chars used to split strings
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.#ctor(Robotics.API.CommandManager,System.String,Robotics.Mathematics.Vector,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.#ctor(System.String,Robotics.Mathematics.Vector)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.Deserialize(System.String,Robotics.Mathematics.Vector@)">
            <summary>
            Deserializes an array of doubles from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.Serialize(Robotics.Mathematics.Vector,System.String@)">
            <summary>
            Serializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.VectorSharedVariable.TypeName">
            <summary>
            Returns "Vector"
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable">
            <summary>
            Gets access to an ARRAY OF INTEGERS variable stored in the Blackboard
            </summary>
        </member>
        <member name="F:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.SplitChars">
            <summary>
            Chars used to split strings
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Int32[],System.Boolean)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.#ctor(System.String,System.Int32[])">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.Deserialize(System.String,System.Int32[]@)">
            <summary>
            Deserializes an array of integers from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="values">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.Serialize(System.Int32[],System.String@)">
            <summary>
            Serializes the provided object to a string
            </summary>
            <param name="values">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.IsArray">
            <summary>
            Returns true
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.IntArraySharedVariable.TypeName">
            <summary>
            Returns "int"
            </summary>
        </member>
        <member name="T:Robotics.API.MultipleCommandExecuter">
            <summary>
            Serves as base class for classes which allow the asynchronous concurrent execution of
            multiple instances of the same command
            </summary>
        </member>
        <member name="F:Robotics.API.MultipleCommandExecuter.asyncExecutionThreadList">
            <summary>
            Thread for async execution of the command
            </summary>
        </member>
        <member name="F:Robotics.API.MultipleCommandExecuter.parametersRequired">
            <summary>
            Indicates if the executer requires parameters
            </summary>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.#ctor(Robotics.API.Signature)">
            <summary>
            Initializes a new instance of MultipleCommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.#ctor(Robotics.API.Signature,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of MultipleCommandExecuter
            </summary>
            <param name="signature">The Signature object for the command that the CommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.#ctor(System.String)">
            <summary>
            Initializes a new instance of MultipleCommandExecuter for the asynchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the MultipleCommandExecuter will execute</param>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.#ctor(System.String,Robotics.API.CommandManager)">
            <summary>
            Initializes a new instance of MultipleCommandExecuter for the asynchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the MultipleCommandExecuter will execute</param>
            <param name="commandManager">The CommandManager object that will handle the command executed by this CommandExecuter instance</param>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.Abort">
            <summary>
            Aborts the execution of all commands
            If a response is required, a failure response will be generated and sent automatically
            </summary>
            <returns>true if all command executions was aborted successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.AsyncExecutionThreadTask(System.Object)">
            <summary>
            Asynchronously executes the provided command
            </summary>
            <param name="oCommand">Object which contains the command to be executed</param>
            <remarks>This method is provided to validate the casting and execution of a valid command object by the AsyncTask method</remarks>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.AsyncExecutionThreadTask(Robotics.API.Command,Robotics.API.Response@)">
            <summary>
            Asynchronously executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <param name="response">Response sent as result of command execution</param>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.AsyncTask(Robotics.API.Command)">
            <summary>
            When overriden executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <returns>The Response object result of provided command execution. If no response is required, must return null</returns>
            <remarks>If the command execution is aborted the execution of this method is
            canceled and a failure response is sent if required</remarks>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.BeginParallelSendAndWait">
            <summary>
            Prepares the async command executer to perform multiple send-and-wait operations
            </summary>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.CommitParallelSendAndWait(System.Int32,Robotics.API.CommandResponsePair[]@)">
            <summary>
            Executes all pending send-and-wait operations
            </summary>
            <param name="timeOut">The overall timeout for parallel command execution</param>
            <param name="results">Array of Command/Response pairs result of parallel execution</param>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.EnqueueCommand(Robotics.API.Command)">
            <summary>
            Enqueues a command for a parallel send-and-wait operation
            </summary>
            <param name="command">Command to enqueue</param>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.SendAndWait(Robotics.API.Command,System.Int32,Robotics.API.Response@)">
            <summary>
            Sends a Command and waits for response
            The Command is sent through the asociated AsyncConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="command">Command to be sent</param>
            <param name="timeOut">The timeout for command execution</param>
            <param name="response">The response received</param>
            <returns>true if command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.SendAndWait(Robotics.API.Command[],System.Int32,Robotics.API.CommandResponsePair[]@)">
            <summary>
            Sends multiple commands and waits for its response
            The Command is sent through the asociated AsyncConnectionManager of the CommandExecuter object that this instance of CommandExecuter is bound to
            </summary>
            <param name="commands">Array of Command objects which contains commands to be sent</param>
            <param name="timeOut">The overall timeout for command execution</param>
            <param name="results">Array of Response objects generated from responses received</param>
            <returns>true if at least one command was sent and its response received. false otherwise</returns>
        </member>
        <member name="M:Robotics.API.MultipleCommandExecuter.Execute(Robotics.API.Command)">
            <summary>
            Executes the provided command
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <remarks>If the command execution is aborted a failure response is sent if required</remarks>
        </member>
        <member name="P:Robotics.API.MultipleCommandExecuter.Busy">
            <summary>
            Gets a value that indicates if the AsyncCommandExecuter is busy
            </summary>
        </member>
        <member name="P:Robotics.API.MultipleCommandExecuter.IsRunning">
            <summary>
            Gets a value that indicates if the CommandExecuter is running
            </summary>
        </member>
        <member name="P:Robotics.API.MultipleCommandExecuter.ParametersRequired">
            <summary>
            Gets a value indicating if the executer requires parameters
            </summary>
        </member>
        <member name="P:Robotics.API.MultipleCommandExecuter.RunningInstances">
            <summary>
            Gets the number of running instances of this command executer
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketUdp">
            <summary>
            Implementa un Socket UDP en modo Broadcast para 
            manejarlo como si fuera puerto serie
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.#ctor">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketUDP class
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketUDP class
            </summary>
            <param name="port">Connection port</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.Open(System.Int32)">
            <summary>
            Opens a new UDP socket connection
            </summary>
            <param name="port">Port to connect</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.Open">
            <summary>
            Opens a new UDP socket connection
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.Close">
            <summary>
            Closes the port connection and sets the System.Net.Sockets.SocketUDP.IsOpen property to false
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.receiveDataPoll">
            <summary>
            Asynchronusly receives data
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to all IP address in the network
            </summary>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.Send(System.Char[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of characters to all IP address in the network
            </summary>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.Send(System.String)">
            <summary>
            Sends the parameter string to all IP address in the network
            </summary>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendLine(System.String)">
            <summary>
            Sends the specified string and the System.Net.Sockets.SocketUDP.NewLineto all IP address in the network
            </summary>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to specified endpoint
            </summary>
            <param name="destination">Destination endpoint</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPAddress,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPAddress,System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to specified IP address over the specified port in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="port">The port where the packet will arrive</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPEndPoint,System.Char[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of characters to specified endpoint
            </summary>
            <param name="destination">Destination endpoint</param>
            <param name="buffer">The char array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPAddress,System.Char[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of characters to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="buffer">The char array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPAddress,System.UInt16,System.Char[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of characters to specified IP address over the specified port in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="port">The port where the packet will arrive</param>
            <param name="buffer">The char array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPEndPoint,System.String)">
            <summary>
            Sends the parameter string to specified endpoint
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPAddress,System.String)">
            <summary>
            Sends the parameter string to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendTo(System.Net.IPAddress,System.UInt16,System.String)">
            <summary>
            Sends the parameter string to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="port">The port where the packet will arrive</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendLineTo(System.Net.IPEndPoint,System.String)">
            <summary>
            Sends the specified string and the System.Net.Sockets.SocketUDP.NewLine to specified endpoint
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendLineTo(System.Net.IPAddress,System.String)">
            <summary>
            Sends the specified string and the System.Net.Sockets.SocketUDP.NewLineto specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdp.SendLineTo(System.Net.IPAddress,System.UInt16,System.String)">
            <summary>
            Sends the specified string and the System.Net.Sockets.SocketUDP.NewLineto specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="port">The port where the packet will arrive</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="E:System.Net.Sockets.SocketUdp.DataReceived">
            <summary>
            Represents the method that will handle the data received event of a SocketUdp object
            </summary>
        </member>
        <member name="E:System.Net.Sockets.SocketUdp.ErrorReceived">
            <summary>
            Represents the method that will handle the error received event of a SocketUdp object
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdp.BufferSize">
            <summary>
            Gets or sets the size of the buffer for incoming data
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdp.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the socket
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdp.LastPacketReceived">
            <summary>
            Returns the last packet arrived the udp port
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdp.LastStringReceived">
            <summary>
            Returns the last packet arrived the udp port encoded as ASCII string
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdp.LastPacketSender">
            <summary>
            Returns the IP address of the sender of the last packet arrived the udp port
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdp.NewLine">
            <summary>
            Gets or sets the value used to interpret the end of a call to the System.Net.Sockets.SocketUDP.SendLine method
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdp.Port">
            <summary>
            Gets or sets the connection port for the socket.
            </summary>
        </member>
        <member name="T:System.Net.Sockets.AsyncStateObject">
            <summary>
            Represents an object used to receive data asynchronously
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AsyncStateObject.buffer">
            <summary>
            Stores the size of the buffer
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AsyncStateObject.bufferSize">
            <summary>
            Stores the size of the buffer
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AsyncStateObject.socket">
            <summary>
            Stores the data source Socket object
            </summary>
        </member>
        <member name="F:System.Net.Sockets.AsyncStateObject.dataReceived">
            <summary>
            Stores the received data
            </summary>
        </member>
        <member name="M:System.Net.Sockets.AsyncStateObject.#ctor(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            Initializes a new instance of AsyncStateObject
            </summary>
            <param name="socket">The data source Socket object</param>
            <param name="bufferSize">The size of the buffer</param>
        </member>
        <member name="M:System.Net.Sockets.AsyncStateObject.Finalize">
            <summary>
            Destroy the object
            </summary>
        </member>
        <member name="M:System.Net.Sockets.AsyncStateObject.Flush(System.Int32)">
            <summary>
            Flushes out the buffer to the DataReceived data storage to allow receive more data 
            </summary>
            <param name="count">Number of bytes in the temporary buffer to flush out</param>
        </member>
        <member name="P:System.Net.Sockets.AsyncStateObject.Buffer">
            <summary>
            Gets the buffer to store temporary data
            </summary>
        </member>
        <member name="P:System.Net.Sockets.AsyncStateObject.BufferSize">
            <summary>
            Stores the size of the buffer
            </summary>
        </member>
        <member name="P:System.Net.Sockets.AsyncStateObject.DataReceived">
            <summary>
            Gets the data received
            </summary>
        </member>
        <member name="P:System.Net.Sockets.AsyncStateObject.Length">
            <summary>
            Gets the length of received data
            </summary>
        </member>
        <member name="P:System.Net.Sockets.AsyncStateObject.Socket">
            <summary>
            Gets the data source Socket object
            </summary>
        </member>
        <member name="T:Robotics.ServiceStatus">
            <summary>
            Enumerates the status of a service
            </summary>
        </member>
        <member name="F:Robotics.ServiceStatus.Idle">
            <summary>
            The service is Idle
            </summary>
        </member>
        <member name="F:Robotics.ServiceStatus.Starting">
            <summary>
            The service is starting but not running yet
            </summary>
        </member>
        <member name="F:Robotics.ServiceStatus.Running">
            <summary>
            The service is running
            </summary>
        </member>
        <member name="F:Robotics.ServiceStatus.Paused">
            <summary>
            The execution of the service has been paused
            </summary>
        </member>
        <member name="F:Robotics.ServiceStatus.Stopping">
            <summary>
            The service has stopped but not idle yet
            </summary>
        </member>
        <member name="T:Robotics.ServiceBase">
            <summary>
            Serves as base class for instances which provides a service which
            run in background and can be started and stopped
            </summary>
        </member>
        <member name="M:Robotics.ServiceBase.#ctor">
            <summary>
            Initialize a new instance of ServiceBase 
            </summary>
        </member>
        <member name="M:Robotics.ServiceBase.BeginStart">
            <summary>
            Begins the execution of the service withot waiting for the background thread to start running
            </summary>
        </member>
        <member name="M:Robotics.ServiceBase.Start">
            <summary>
            Starts the execution of the service
            </summary>
        </member>
        <member name="M:Robotics.ServiceBase.Stop">
            <summary>
            Stops the execution of the service
            </summary>
        </member>
        <member name="M:Robotics.ServiceBase.MainThreadTask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Robotics.ServiceBase.Task">
            <summary>
            When overriden in a derived class, executes the task which brings the service
            </summary>
        </member>
        <member name="P:Robotics.ServiceBase.IsRunning">
            <summary>
            Gets a value indicating whether the ServiceBase object is running
            </summary>
        </member>
        <member name="P:Robotics.ServiceBase.Status">
            <summary>
            Gets the status of the ServiceBase object
            </summary>
        </member>
        <member name="T:Robotics.API.Signature">
            <summary>
            Represents the signature of a BaseMessage object
            </summary>
            <remarks>The sinature of a command describes the parameters and parameter types with 
            which a legal call to the command can be made</remarks>
        </member>
        <member name="F:Robotics.API.Signature.commandName">
            <summary>
            The name of the command this signature is valid for
            </summary>
        </member>
        <member name="F:Robotics.API.Signature.rx">
            <summary>
            Regular expression used to validate the command signature
            </summary>
        </member>
        <member name="F:Robotics.API.Signature.pattern">
            <summary>
            Stores the pattern used to create the Signature object
            </summary>
        </member>
        <member name="F:Robotics.API.Signature.delegateList">
            <summary>
            Stores the correspondance list between delegate number and delegate
            </summary>
        </member>
        <member name="F:Robotics.API.Signature.typeArrayList">
            <summary>
            Stores the list of added arrays of types
            </summary>
        </member>
        <member name="M:Robotics.API.Signature.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Delegate})">
            <summary>
            Initializes a new instance of Signature
            </summary>
            <param name="commandName">The name of command this signature will manage</param>
            <param name="delegateList">List of asociated delegates for parameter parse</param>
            <param name="pattern">The pattern for the regular expression</param>
        </member>
        <member name="M:Robotics.API.Signature.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Delegate},System.Collections.Generic.Dictionary{System.String,System.Type[]})">
            <summary>
            Initializes a new instance of Signature
            </summary>
            <param name="commandName">The name of command this signature will manage</param>
            <param name="pattern">The pattern for the regular expression</param>
            <param name="delegateList">List of asociated delegates for parameter parse</param>
            <param name="typeArrayList">The list of added arrays of types</param>
        </member>
        <member name="M:Robotics.API.Signature.Analyze(Robotics.API.BaseMessage)">
            <summary>
            Analyzes the arguments of the provided BaseMessage object
            </summary>
            <param name="message">The BaseMessage object to match</param>
            <returns>The result of the analisys</returns>
        </member>
        <member name="M:Robotics.API.Signature.GetParameters(Robotics.API.BaseMessage,System.Object[]@)">
            <summary>
            Extracts the arguments of the provided BaseMessage object if it matches the signature
            </summary>
            <param name="message">The BaseMessage object to match</param>
            <param name="parameters">An array containing the parameters stored in the BaseMessage</param>
            <returns>true if the provided BaseMessage object matches the signature and the arguments was extracted, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Signature.IsMatch(Robotics.API.BaseMessage)">
            <summary>
            Indicates whether the command name and parameters specified of the Signature object matches the
            command name and parameters of the provided BaseMessage object
            </summary>
            <param name="message">The BaseMessage object to match</param>
            <returns>true if the message matches the signature; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.Signature.CallIfMatch(Robotics.API.BaseMessage)">
            <summary>
            Executes the appropiate delegate if the provided BaseMessage object matches the signature
            </summary>
            <param name="message">The BaseMessage object to match</param>
            <returns>true if the provided BaseMessage object matches the signature and the appropiate delegate was executed, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Signature.CallIfMatch(Robotics.API.BaseMessage,System.Object@)">
            <summary>
            Executes the appropiate delegate if the provided BaseMessage object matches the signature
            </summary>
            <param name="message">The BaseMessage object to match</param>
            <param name="executionResult">The object resulted of the execution ot the method represented by the asociated delegate</param>
            <returns>true if the provided BaseMessage object matches the signature and the appropiate delegate was executed, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Signature.GetDelegate(System.String,System.String[]@)">
            <summary>
            Gets the asociated delegate which matches the provided parameter signature
            </summary>
            <param name="parameters">Parameters used to get the adequate delegate</param>
            <param name="sParams">Array which contains the extracted parameters for the delegate</param>
            <returns>The Delegate object asociated with the signature. If there is no adequare delegate returns null</returns>
        </member>
        <member name="M:Robotics.API.Signature.GetTypeArray(System.String,System.String[]@)">
            <summary>
            Gets the asociated array of types which matches the provided parameter signature
            </summary>
            <param name="parameters">Parameters used to get the adequate array of types</param>
            <param name="sParams">Array which contains the extracted parameters for the delegate</param>
            <returns>The array of types object asociated with the signature. If there is no adequare delegate returns null</returns>
        </member>
        <member name="M:Robotics.API.Signature.ExtractParameters(System.Delegate,System.String[])">
            <summary>
            Extracts the parameters from a regular expression match for a delegate
            </summary>
            <param name="d">Delegate for get the object types</param>
            <param name="sParams">Array of strings containing the string representation of each parameter</param>
            <returns>The parameters for the Delegate</returns>
        </member>
        <member name="M:Robotics.API.Signature.ExtractParameters(System.Delegate,System.String[],System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            Extracts the parameters from a regular expression match for a delegate
            </summary>
            <param name="d">Delegate for get the object types</param>
            <param name="sParams">Array of strings containing the string representation of each parameter</param>
            <param name="paramsByName">The parameters for the Delegate ordered by name</param>
            <returns>The parameters for the Delegate</returns>
        </member>
        <member name="M:Robotics.API.Signature.ExtractParameters(System.Type[],System.String[])">
            <summary>
            Extracts the parameters from a regular expression match for a delegate
            </summary>
            <param name="typeArray">Array of types from which get the object types</param>
            <param name="sParams">Array of strings containing the string representation of each parameter</param>
            <returns>The parameters for the Delegate</returns>
        </member>
        <member name="M:Robotics.API.Signature.ExtractParameters(System.Type[],System.String[],System.Collections.Generic.Dictionary{System.String,System.Object}@)">
            <summary>
            Extracts the parameters from a regular expression match for a delegate
            </summary>
            <param name="typeArray">Array of types from which get the object types</param>
            <param name="sParams">Array of strings containing the string representation of each parameter</param>
            <param name="paramsByName">The parameters for the Delegate ordered by name</param>
            <returns>The parameters for the Delegate</returns>
        </member>
        <member name="M:Robotics.API.Signature.ParseParameter(System.Type,System.String)">
            <summary>
            Extracts the parameters from a regular expression match
            </summary>
            <param name="type">The expected type of the parameter</param>
            <param name="sParam">The string representation of the parameter</param>
            <returns>Converted parameter value</returns>
        </member>
        <member name="P:Robotics.API.Signature.RegexPattern">
            <summary>
            Gets the regular expression pattern to match parameters
            </summary>
        </member>
        <member name="P:Robotics.API.Signature.CommandName">
            <summary>
            Gets the name of the command this signature is designed for
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.SMStateFuncion">
            <summary>
            Represents a state function of a state machine
            </summary>
            <param name="currentState">The current state of the state machine</param>
            <param name="o">Additional parameters used by the function</param>
            <returns>The number of the next state of the state machine</returns>
        </member>
        <member name="T:Robotics.StateMachines.SMEnumeratedStateFuncion`1">
            <summary>
            Represents a state function of a state machine
            </summary>
            <param name="currentState">The current state of the state machine</param>
            <param name="o">Additional parameters used by the function</param>
            <returns>The number of the next state of the state machine</returns>
        </member>
        <member name="T:Robotics.StateMachines.SimpleStateMachine`1">
            <summary>
            Implements a simple state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.states">
            <summary>
            Stores the a list of states to be executed by the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.currentStateIx">
            <summary>
            Stores the index of the current state of the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.oLock">
            <summary>
            Object used to synchronize the access to the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.executingState">
            <summary>
            Indicates if the state machine is executing a state
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.finalStateIndex">
            <summary>
            The index of the final state
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.running">
            <summary>
            Indicates if the state machine is being executed
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.rwRunning">
            <summary>
            Proivides Synchrnonized access to the running variable
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.executionFinishedEvent">
            <summary>
            Event used to synchronize the asynchronous execution of a state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.executionThread">
            <summary>
            Thread used to execute the state machine asynchronously
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.SimpleStateMachine`1.abortAsyncExecution">
            <summary>
            Flag used to abort the execution of a thread.
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.#ctor">
            <summary>
            Initializes a new instance of FunctionBasedStateMachine
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.AbortAsyncExecution">
            <summary>
            Aborts the async execution of the state machine
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.AddState(`0)">
            <summary>
            Adds a state to the state machine
            </summary>
            <param name="state">State to be added to the step machine</param>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.BeginRunUntillFinished">
            <summary>
            Begins to executes the state machine untill it reaches a final state in an asynchronous thread
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.ExecutionThreadTask">
            <summary>
            Executes the state machine in an asynchronous thread
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.EndRunUntilFinished">
            <summary>
            Waits until the execution of
            the the state machine in an asynchronous thread is finished
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.RemoveState(`0)">
            <summary>
            Removes a state from the state machine
            </summary>
            <param name="state">State to be removed from the step machine</param>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.RemoveState(System.Int32)">
            <summary>
            Removes a state from the state machine
            </summary>
            <param name="stateIndex">Index of the state to be removed the step machine</param>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.RunNextStep">
            <summary>
            Executes the state machine to it's next step
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.RunUntillFinished">
            <summary>
            Executes the state machine untill it reaches a final state
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.RunUntillFinished(System.Int32)">
            <summary>
            Executes the state machine untill it reaches a final state or a maximum number of steps
            are executed
            </summary>
            <param name="maxSteps">The maximum number of steps allowed for the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.RunUntillFinished(System.TimeSpan)">
            <summary>
            Executes the state machine untill it reaches a final state or a maximum number of steps
            are executed
            </summary>
            <param name="timeout">The maximum amount of time that the state machine is allowed to run</param>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.Reset">
            <summary>
            Resets the state machine
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.SetFinalState(Robotics.StateMachines.IState)">
            <summary>
            Sets the final state of the state machine. If the final state does not belong to the state machine it is added.
            </summary>
            <param name="state">The final state of the state machine.</param>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.SetFinalState(`0)">
            <summary>
            Sets the final state of the state machine. If the final state does not belong to the state machine it is added.
            </summary>
            <param name="state">The final state of the state machine.</param>
        </member>
        <member name="M:Robotics.StateMachines.SimpleStateMachine`1.SetFinalState(System.Int32)">
            <summary>
            Sets the final state of the state machine.
            </summary>
            <param name="stateIndex">The index of the final state of the state machine.</param>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.StateCount">
            <summary>
            Gets the number of states of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.CurrentStateIndex">
            <summary>
            Gets the zero-based index of the current state of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.CurrentStateIsAccept">
            <summary>
            Gets a value indicating if the current state is an accept state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.CurrentStateIsFinal">
            <summary>
            Gets a value indicating if the current state is the final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.CurrentState">
            <summary>
            Gets the object that encapsulate the current state of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.Finished">
            <summary>
            Gets a value indicating if the state machine reached its final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.FinalStateIndex">
            <summary>
            Gets the index of the final state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.ExecutingState">
            <summary>
            Gets a value indicating if the state machine is currently executing a state
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.SimpleStateMachine`1.IsRunning">
            <summary>
            Gets a vbalue indicating if the state machine is being executed
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2">
            <summary>
            Represents a Telemetric sensor
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.ITelemetricSensor">
            <summary>
            Serves as base interface for TelemetricSensor class
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.ITelemetricSensor.ErrorCount">
            <summary>
            Gets the number of mistaken readings in the last read
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.ITelemetricSensor.MinimumDistance">
            <summary>
            Gets the minumim distance the sensor can detect
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.ITelemetricSensor.MaximumDistance">
            <summary>
            Gets the maximum distance the sensor can detect
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.ITelemetricSensor.Treshold">
            <summary>
            Gets or sets the proximity threshold used to determinate when the ThresholdExcedeed event is rised
            This value is the distance between the sensor and the closest object
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.treshold">
            <summary>
            The proximity threshold used to determinate when the ThresholdExcedeed event is rised
            This value is the distance between the sensor and the closest object
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.isDisposed">
            <summary>
            Indicates if the current object is being disposed
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.disposing">
            <summary>
            Indicates if the current object is being disposed
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Finalize">
            <summary>
            Free asociated resources
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Connect">
            <summary>
            Connects to the sensor device
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Disconnect">
            <summary>
            Disconnects from the sensor device
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Dispose">
            <summary>
            Defines a method to release allocated unmanaged resources.
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Dispose(System.Boolean)">
            <summary>
            When overriden release allocated resources.
            </summary>
            <param name="disposing">Indicates if Dispose() method (true) was called or it is called by the Garbage Collector (false)</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.OnError(`0,Robotics.HAL.Sensors.ISensorError)">
            <summary>
            Raises the Error event
            </summary>
            <param name="sensor">Sensor to be pased to the event</param>
            <param name="error">IError object containing information about the error</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.OnReadCompleted(`0,`1[])">
            <summary>
            Raises the ReadCompleted event
            </summary>
            <param name="sensor">Sensor to be pased to the event</param>
            <param name="readings">Array of readings taken from the sensor</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.OnTresholdExceeded(`0)">
            <summary>
            Raises the TresholdExceeded event
            </summary>
            <param name="sensor">Sensor to be pased to the event</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Read(`1[]@)">
            <summary>
            Syncronusly reads the sensor
            </summary>
            <param name="readings">When this method returns contains the array of sensor readings if the sensor was readed successfully, null otherwise</param>
            <returns>true if read from the sensor was completed successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Start">
            <summary>
            Starts the continous asynchronous read of the sensor
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Stop">
            <summary>
            Stops the continous asynchronous read of the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Disposing">
            <summary>
            Gets a value indicating whether the sensor class is in the process of disposing.
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.ErrorCount">
            <summary>
            Gets the number of mistaken readings in the last read
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.IsDisposed">
            <summary>
            Gets a value indicating whether the sensor has been disposed of.
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.IsOpen">
            <summary>
            Gets a value indicating if the communication port with the device is open
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.LastReadings">
            <summary>
            Gets the last reading array obtained from the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.MinimumDistance">
            <summary>
            Gets the minumim distance the sensor can detect
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.MaximumDistance">
            <summary>
            Gets the maximum distance the sensor can detect
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Started">
            <summary>
            Gets a value indicating if the continous asynchronous read operation of the sensor has been started
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Treshold">
            <summary>
            Gets or sets the proximity threshold used to determinate when the ThresholdExcedeed event is rised
            This value is the distance between the sensor and the closest object
            </summary>
        </member>
        <member name="E:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.Error">
            <summary>
            Raises when an error occurs
            </summary>
        </member>
        <member name="E:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.ReadCompleted">
            <summary>
            Occurs when a new set of readings is acquired from the sensor
            </summary>
        </member>
        <member name="E:Robotics.HAL.Sensors.Telemetric.TelemetricSensor`2.TresholdExceeded">
            <summary>
            Occurs when the threshold is exceeded
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.HokuyoLaserError">
            <summary>
            Information about a Hokuyo Laser measurement error
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserError.statusCode">
            <summary>
            The Laser status code
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaserError.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of HokuyoLaserError
            </summary>
            <param name="statusCode">The error code</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaserError.#ctor(System.String)">
            <summary>
            Initializes a new instance of HokuyoLaserError
            </summary>
            <param name="errorDescription">The error message</param>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaserError.StatusCode">
            <summary>
            The status returned by the lasser
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaserError.ErrorDescription">
            <summary>
            Gets the error description bases on the status code
            </summary>
        </member>
        <member name="T:Robotics.API.MiscSharedVariables.DetectedHumanFaces">
            <summary>
            Gets access to an HumanFace variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.#ctor(Robotics.API.CommandManager,System.String,Robotics.HAL.Sensors.HumanFace[],System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.#ctor(System.String)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.#ctor(System.String,Robotics.HAL.Sensors.HumanFace[])">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.Deserialize(System.String,Robotics.HAL.Sensors.HumanFace[]@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.Deserialize(System.String,System.Int32@,Robotics.HAL.Sensors.HumanFace@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="cc">Read header for the serializedData string</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.Serialize(Robotics.HAL.Sensors.HumanFace[],System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.DetectedHumanFaces.Serialize(Robotics.HAL.Sensors.HumanFace,System.Text.StringBuilder)">
            <summary>
            Sserializes the provided object into a StrinBuilder object
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="sb">The StringBuilder object where the serialized data will be written</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.DetectedHumanFaces.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.DetectedHumanFaces.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.DetectedHumanFaces.TypeName">
            <summary>
            Returns "string"
            </summary>
        </member>
        <member name="T:Robotics.API.BinaryMessage">
            <summary>
            Implements a Blackboard message using binary format
            </summary>
        </member>
        <member name="T:Robotics.Controls.VideoControl">
            <summary>
            Implements a simple control to show video in a WinForm
            </summary>
        </member>
        <member name="F:Robotics.Controls.VideoControl.image">
            <summary>
            Image to display
            </summary>
        </member>
        <member name="F:Robotics.Controls.VideoControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Robotics.Controls.VideoControl.#ctor">
            <summary>
            Initializes a nre instance of VideoControl
            </summary>
        </member>
        <member name="M:Robotics.Controls.VideoControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Robotics.Controls.VideoControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Robotics.Controls.VideoControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrided. Draws the control contents
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:Robotics.Controls.VideoControl.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overrided. Paints the backgrund of the control
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="P:Robotics.Controls.VideoControl.Image">
            <summary>
            Gets or sets the image displayed by the control
            </summary>
        </member>
        <member name="T:Robotics.API.SignatureAnalysisResult">
            <summary>
            Represents the result of the analysis of the parameters of a BaseMessage object
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureAnalysisResult.asociatedDelegate">
            <summary>
            Stores the delegate selected by the Signature object when the BaseMessage object was parsed
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureAnalysisResult.message">
            <summary>
            The BaseMessage object which originates the result
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureAnalysisResult.parameterNames">
            <summary>
            List of the names of the parameters
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureAnalysisResult.parameters">
            <summary>
            List of parameters
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureAnalysisResult.success">
            <summary>
            Stores a value indicating if the analysis succeded
            </summary>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.#ctor(Robotics.API.BaseMessage,System.Boolean,System.Delegate)">
            <summary>
            Initializes a new instance of SignatureAnalysisResult
            </summary>
            <param name="message">The BaseMessage object which originates the result</param>
            <param name="success">The value indicating if the analysis succeded</param>
            <param name="asociatedDelegate">The delegate selected by the Signature object when the BaseMessage object was parsed</param>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.#ctor(Robotics.API.BaseMessage,System.Boolean,System.Delegate,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of SignatureAnalysisResult
            </summary>
            <param name="message">The BaseMessage object which originates the result</param>
            <param name="success">The value indicating if the analysis succeded</param>
            <param name="asociatedDelegate">The delegate selected by the Signature object when the BaseMessage object was parsed</param>
            <param name="namedParameters">The list of parameters sorted by its name</param>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Execute">
            <summary>
            Executes the method represented by the asociated Delegate object
            </summary>
            <returns>Result of the Delegate execution</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter``1(System.Int32,``0@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <typeparam name="T">The type of the returned data</typeparam>
            <param name="paramNumber">The number of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter``1(System.String,``0@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <typeparam name="T">The type of the returned data</typeparam>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Object@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Byte@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Byte[]@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Char@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Char[]@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Int16@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Int32@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Int64@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.UInt16@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.UInt32@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.UInt64@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Single@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.Double@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.String@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.GetParameter(System.String,System.String[]@)">
            <summary>
            Gets a parameter by its name
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist or type mismatch contains the default value of the type</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update``1(System.Int32,``0@)">
            <summary>
            Updates the provided value with the data contained in the correspodng parameter of the BaseMessage object which parameters was analyzed
            </summary>
            <typeparam name="T">The type of the returned data</typeparam>
            <param name="paramNumber">The number of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist preserves its value</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update``1(System.String,``0@)">
            <summary>
            Updates the provided value with the data contained in the correspodng parameter of the BaseMessage object which parameters was analyzed
            </summary>
            <typeparam name="T">The type of the returned data</typeparam>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value contained in the parameter which name was requested if exists. If the parameter does not exist preserves its value</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Object@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Byte@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Byte[]@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Char@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Char[]@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Int16@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Int32@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Int64@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.UInt16@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.UInt32@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.UInt64@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Single@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.Double@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.String@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="M:Robotics.API.SignatureAnalysisResult.Update(System.String,System.String[]@)">
            <summary>
            Updates the content of the provided variable with the data of the specified parmaeter
            </summary>
            <param name="paramName">The name of the parameter to fetch</param>
            <param name="value">When this method returns, contains the value of the specified parameter if the parameter exists an the types match</param>
            <returns>true if the parameter exists and it's type is the specified, false othewrise</returns>
        </member>
        <member name="P:Robotics.API.SignatureAnalysisResult.AsociatedDelegate">
            <summary>
            Gets the delegate selected by the Signature object when the BaseMessage object was parsed
            </summary>
        </member>
        <member name="P:Robotics.API.SignatureAnalysisResult.Message">
            <summary>
            Gets the BaseMessage object which originates the result
            </summary>
        </member>
        <member name="P:Robotics.API.SignatureAnalysisResult.ParameterCount">
            <summary>
            Gets the number of parameters contained in this SignatureAnalysisResult object
            </summary>
        </member>
        <member name="P:Robotics.API.SignatureAnalysisResult.ParameterNames">
            <summary>
            Gets an array containing the names of the parameters contained in this SignatureAnalysisResult object
            </summary>
        </member>
        <member name="P:Robotics.API.SignatureAnalysisResult.Success">
            <summary>
            Gets a value indicating whether the match between the BaseMessage object and the Signature object is successful
            </summary>
        </member>
        <member name="T:Robotics.Mathematics.Complex">
            <summary>
            Represents a complex number
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.Complex.Real">
            <summary>
            The real part of the complex number
            </summary>
        </member>
        <member name="F:Robotics.Mathematics.Complex.Imaginary">
            <summary>
            The imaginary part of the complex number
            </summary>
        </member>
        <member name="M:Robotics.Mathematics.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of complex
            </summary>
            <param name="real">Initial value for the real part of the complex number</param>
            <param name="imaginary">Initial value for the imaginary part of the complex number</param>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Add(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Adds two complex numbers
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>Sum of the source complex numbers</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Conjugate(Robotics.Mathematics.Complex)">
            <summary>
            Returns the conjugate of a complex number
            </summary>
            <param name="value">Source complex number</param>
            <returns>Conjugate of the source complex number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Divide(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Divides two complex numbers
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>The quotient of the two provided complex numbers</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Multiply(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Multiplies two complex numbers
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>The product of the two provided complex numbers</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Substract(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Subtracts a complex number from a complex number
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Scale(Robotics.Mathematics.Complex,System.Double)">
            <summary>
            Scales a complex number
            </summary>
            <param name="value">Source complex number</param>
            <param name="scaleFactor">Real number</param>
            <returns>Scaled complex number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Sqrt(Robotics.Mathematics.Complex)">
            <summary>
            Calculates the square root of a complex number
            </summary>
            <param name="value">Source complex number</param>
            <returns>square root of the source complex number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_LogicalNot(Robotics.Mathematics.Complex)">
            <summary>
            Returns the conjugate of a complex number
            </summary>
            <param name="value">Source complex number</param>
            <returns>Conjugate of the source complex number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Equality(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Tests complex numbers for equality
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>true if the complex numbers are equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Inequality(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Tests complex numbers for inequality
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>true if the complex numbers are not equal; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Addition(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Adds two complex numbers
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>Sum of the source complex numbers</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Subtraction(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Subtracts a complex number from a complex number
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>Result of the subtraction</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Multiply(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Multiplies two complex numbers
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>The product of the two provided complex numbers</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Division(Robotics.Mathematics.Complex,Robotics.Mathematics.Complex)">
            <summary>
            Divides two complex numbers
            </summary>
            <param name="value1">Source complex number</param>
            <param name="value2">Source complex number</param>
            <returns>The quotient of the two provided complex numbers</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Explicit(Robotics.Mathematics.Complex)~System.Double">
            <summary>
            Gets the real part of the complex number
            </summary>
            <param name="value">Source complex number</param>
            <returns>The real part of the complex number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Implicit(System.Int32)~Robotics.Mathematics.Complex">
            <summary>
            Cast a double as a complex number
            </summary>
            <param name="value">Source number</param>
            <returns>Complex representation of source number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Implicit(System.Int64)~Robotics.Mathematics.Complex">
            <summary>
            Cast a double as a complex number
            </summary>
            <param name="value">Source number</param>
            <returns>Complex representation of source number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Implicit(System.Single)~Robotics.Mathematics.Complex">
            <summary>
            Cast a double as a complex number
            </summary>
            <param name="value">Source number</param>
            <returns>Complex representation of source number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Implicit(System.Double)~Robotics.Mathematics.Complex">
            <summary>
            Cast a double as a complex number
            </summary>
            <param name="value">Source number</param>
            <returns>Complex representation of source number</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.op_Implicit(Robotics.Mathematics.Complex)~System.Drawing.PointF">
            <summary>
            Converts the complex to a System.Drawing.PointF structure
            </summary>
            <param name="value">complex to convert</param>
            <returns>System.Drawing.PointF structure</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.ToString">
            <summary>
            Retrieves a string representation of the current object
            </summary>
            <returns>String that represents the object</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object
            </summary>
            <param name="obj">Object to make the comparison with</param>
            <returns>true if the current instance is equal to the specified object; false otherwise</returns>
        </member>
        <member name="M:Robotics.Mathematics.Complex.GetHashCode">
            <summary>
            Gets the hash code of the complex number object
            </summary>
            <returns>Hash code of the complex number object</returns>
        </member>
        <member name="P:Robotics.Mathematics.Complex.i">
            <summary>
            Returns the imaginary number i
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Complex.Zero">
            <summary>
            Returns the a complex number with real and imaginary part set to zero
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Complex.NaN">
            <summary>
            Represents a value that is not a number
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Complex.Angle">
            <summary>
            Returns the inclination angle of the complex number
            </summary>
        </member>
        <member name="P:Robotics.Mathematics.Complex.Magnitude">
            <summary>
            Calculates the magnitude of the complex number
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.EnumeratedFunctionStateMachine`1">
            <summary>
            A state machine that uses several methods fot its execution, identified by an enumeration
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.LaserStatus">
            <summary>
            Enumerates the laser status modes
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserStatus.Error">
            <summary>
            Unknown status or error
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserStatus.Stoped">
            <summary>
            Laser is stoped.
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserStatus.Running">
            <summary>
            The laser is running
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.LaserStatus.Suspended">
            <summary>
            Laser is running but no lectures are taken
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.Laser">
            <summary>
            Represents a telemetric laser sensor
            </summary>
        </member>
        <member name="T:Robotics.HAL.IPolarDevice">
            <summary>
            Represents a device which can detect or move rotating
            </summary>
        </member>
        <member name="M:Robotics.HAL.IPolarDevice.GetCosFromStep(System.Int32)">
            <summary>
            Gets the cosine value of the angle at provided step.
            </summary>
            <param name="step">The step for which angle the cosine is desired</param>
            <returns>The cosine value of the angle at provided step.</returns>
        </member>
        <member name="M:Robotics.HAL.IPolarDevice.GetSinFromStep(System.Int32)">
            <summary>
            Gets the sine value of the angle at provided step.
            Values provided are precalculated
            </summary>
            <param name="step">The step for which angle the sine is desired</param>
            <returns>The sine value of the angle at provided step.</returns>
        </member>
        <member name="P:Robotics.HAL.IPolarDevice.AbsoluteMaximumAngularStep">
            <summary>
            Gets the Absolute last step the device can reach
            </summary>
        </member>
        <member name="P:Robotics.HAL.IPolarDevice.AngularResolution">
            <summary>
            Gets the smallest angle change the device can detect or rotate
            </summary>
        </member>
        <member name="P:Robotics.HAL.IPolarDevice.AngularResolutionBits">
            <summary>
            Gets the angle resolution bits
            </summary>
        </member>
        <member name="P:Robotics.HAL.IPolarDevice.AngularStepZero">
            <summary>
            Step in which the Zero is located
            </summary>
        </member>
        <member name="P:Robotics.HAL.IPolarDevice.StepsPerRevolution">
            <summary>
            Gets the number of steps in a complete revolution (360º or two pi radians)
            </summary>
        </member>
        <member name="P:Robotics.HAL.IPolarDevice.ValidMinimumAngularStep">
            <summary>
            Gets the First Step of the Measurement Range 
            </summary>
        </member>
        <member name="P:Robotics.HAL.IPolarDevice.ValidMaximumAngularStep">
            <summary>
            Gets the Last Step of the Measurement Range 
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.cosByStep">
            <summary>
            Stores the Cos value for the angle at specified measurement step
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.density">
            <summary>
            Data density
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.errorsOnLastReading">
            <summary>
            Number of errors in the last lecture
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.info">
            <summary>
            Information of the laser device
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.mainThread">
            <summary>
            Main thread for async read operations
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.running">
            <summary>
            Main Thread execution flag
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.sinByStep">
            <summary>
            Stores the Sin value for the angle at specified measurement step
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.Laser.status">
            <summary>
            Laser device current status
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.GetCosFromStep(System.Int32)">
            <summary>
            Gets the cosine value of the angle at provided step.
            Values provided are precalculated
            </summary>
            <param name="step">The step for which angle the cosine is desired</param>
            <returns>The cosine value of the angle at provided step.</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.GetSinFromStep(System.Int32)">
            <summary>
            Gets the sine value of the angle at provided step.
            Values provided are precalculated
            </summary>
            <param name="step">The step for which angle the sine is desired</param>
            <returns>The sine value of the angle at provided step.</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.MainThreadTask">
            <summary>
            Performs the asynchronous device reading operation
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.OnError(Robotics.HAL.Sensors.ISensorError)">
            <summary>
            Raises the Error event
            </summary>
            <param name="error">IError object containing information about the error</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.OnReadCompleted(Robotics.HAL.Sensors.Telemetric.LaserReading[])">
            <summary>
            Raises the ReadCompleted event
            </summary>
            <param name="readings">Array of readings taken from the sensor</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.OnTresholdExceeded">
            <summary>
            Raises the TresholdExceeded event
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.PrecalculateStepSinesAndCosines">
            <summary>
            Precalculates the Sine and Cosine values for the angle of each step
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.Read(Robotics.HAL.Sensors.Telemetric.ITelemetricReading[]@)">
            <summary>
            Syncronusly reads the sensor
            </summary>
            <param name="readings">When this method returns contains the array of sensor readings if the sensor was readed successfully, null otherwise</param>
            <returns>true if read from the sensor was completed successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.Start">
            <summary>
            Starts to take asynchronous readings from the Laser
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.Stop">
            <summary>
            Stops the Laser
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.Laser.ToString">
            <summary>
            Returns a string representation of the HokuyoLaser object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.AbsoluteMaximumAngularStep">
            <summary>
            Gets the Absolute last step the device can reach
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.AngularResolution">
            <summary>
            Gets the smallest angle change the device can detect or rotate
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.AngularResolutionBits">
            <summary>
            Gets the angle resolution bits
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.AngularStepZero">
            <summary>
            Step number of the sensor's front axis
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.ErrorCount">
            <summary>
            Gets the number of mistaken readings in the last read
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.CosByStep">
            <summary>
            Stores the Cos value for the angle at specified measurement step
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.Information">
            <summary>
            Returns the device's information 
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.MaximumAngle">
            <summary>
            Gets the maximum angle in radians the sensor can detect measured from the front of the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.MinimumAngle">
            <summary>
            Gets the minumim angle in radians the sensor can detect measured from the front of the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.SinByStep">
            <summary>
            Stores the Sin value for the angle at specified measurement step
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.StepsPerRevolution">
            <summary>
            Gets the number of steps in a complete revolution (360º or two pi radians)
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.ValidMinimumAngularStep">
            <summary>
            Gets the First Step of the Measurement Range 
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.Laser.ValidMaximumAngularStep">
            <summary>
            Gets the Last Step of the Measurement Range 
            </summary>
        </member>
        <member name="T:System.Net.Sockets.UdpDataReceivedEventArgs">
            <summary>
            Provides data for the System.Net.Sockets.UdpDataReceived event
            </summary>
        </member>
        <member name="M:System.Net.Sockets.UdpDataReceivedEventArgs.#ctor(System.Net.IPAddress,System.Byte[],System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="senderAddress">The IP Address of the message sender</param>
            <param name="data">The message</param>
            <param name="truncated">True if message was received incomplete</param>
        </member>
        <member name="M:System.Net.Sockets.UdpDataReceivedEventArgs.ToString">
            <summary>
            Returns a string representation of the current instance
            </summary>
            <returns>String that represents the object</returns>
        </member>
        <member name="P:System.Net.Sockets.UdpDataReceivedEventArgs.SenderIPAddress">
            <summary>
            Gets the IP Address of the message sender
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpDataReceivedEventArgs.Data">
            <summary>
            Gets the byte array received
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpDataReceivedEventArgs.DataString">
            <summary>
            Gets the data formatted as string
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpDataReceivedEventArgs.Truncated">
            <summary>
            True if message was truncated or received incomplete
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.WorkerTaskObject`4">
             <summary>
             Encapsulates the data to be used by a Worker thread of a ManagerWorkers object
             </summary>
            <typeparam name="TManagerData">The type of data used by the manager</typeparam>
            <typeparam name="TManagerResult">The type of data returned by the manager</typeparam>
             <typeparam name="TWorkerData">The type of data used by the workers</typeparam>
             <typeparam name="TWorkerResult">The type of data returned by the workers</typeparam>
        </member>
        <member name="F:Robotics.Paralelism.WorkerTaskObject`4.data">
            <summary>
            The data for the worker thread
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.WorkerTaskObject`4.workerNumber">
            <summary>
            The number of the worker
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.WorkerTaskObject`4.workerThread">
            <summary>
            The thread used to perform the worker task
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.WorkerTaskObject`4.#ctor(Robotics.Paralelism.ManagerWorkers{`0,`1,`2,`3}.Worker,`2)">
            <summary>
            Initializes a new instance of the WorkerTaskObject
            </summary>
            <param name="worker">The worker used to initialize the object</param>
            <param name="data">The data to be used by the worker</param>
        </member>
        <member name="P:Robotics.Paralelism.WorkerTaskObject`4.Data">
            <summary>
            Gets the data for the worker thread
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.WorkerTaskObject`4.WorkerNumber">
            <summary>
            Gets the number of the worker
            </summary>
        </member>
        <member name="P:Robotics.Paralelism.WorkerTaskObject`4.WorkerThread">
            <summary>
            Gets the thread that executes the async task
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.WorkerTaskObject">
            <summary>
            Encapsulates the data to be used by a Worker thread of a ManagerWorkers object
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.WorkerTaskObject.#ctor(Robotics.Paralelism.ManagerWorkers{System.Object,System.Object,System.Object,System.Object}.Worker,System.Object)">
            <summary>
            Initializes a new instance of the WorkerTaskObject
            </summary>
            <param name="worker">The worker used to initialize the object</param>
            <param name="data">The data to be used by the worker</param>
        </member>
        <member name="T:Robotics.API.SharedVariableReport">
            <summary>
            Represents a report received from the Blackboard due to a shared variable subscription
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReport.reportType">
            <summary>
            The type of the report
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReport.serializedData">
            <summary>
            The serialized data received with the report
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReport.subscriptionType">
            <summary>
            The type of the subscription
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReport.writer">
            <summary>
            The name of the module which performed the write/create operation
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReport.variableInfo">
            <summary>
            Stores the information of the related shared variable
            </summary>
        </member>
        <member name="M:Robotics.API.SharedVariableReport.#ctor(Robotics.API.ISharedVariableInfo,System.String,Robotics.API.SharedVariableReportType,Robotics.API.SharedVariableSubscriptionType,System.String)">
            <summary>
            Initializes a new instance of SharedVariableReport
            </summary>
            <param name="variableInfo">The information of the related shared variable</param>
            <param name="serializedData">The serialized value of the shared variable</param>
            <param name="reportType">The type of the report</param>
            <param name="subscriptionType">The type of the subscription</param>
            <param name="writer"> The name of the module which performed the write/create operation</param>
        </member>
        <member name="M:Robotics.API.SharedVariableReport.CreateFromResponse(Robotics.API.Response)">
            <summary>
            Generates a SharedVariableReport object from a Response object
            </summary>
            <param name="response">The Response object to be used to generate the report</param>
            <returns>A SharedVariableReport object created from the Response object</returns>
        </member>
        <member name="M:Robotics.API.SharedVariableReport.CreateFromResponse(Robotics.API.Response,Robotics.API.SharedVariableReport@,System.Exception@)">
            <summary>
            Generates a SharedVariableReport object from a Response object
            </summary>
            <param name="response">The Response object to be used to generate the report</param>
            <param name="report">When this method returns contains the SharedVariableReport object
            extracted from the response if the parse operation was completed successfully, null otherwise</param>
            <param name="ex">When this method returns contains null if the parse operation was completed successfully,
            or the exception to be thrown if the operation failed</param>
            <returns>A SharedVariableReport object created from the Response object</returns>
        </member>
        <member name="P:Robotics.API.SharedVariableReport.ReportType">
            <summary>
            Gets the type of the report
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableReport.SerializedData">
            <summary>
            Gets the serialized data received with the report
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableReport.SubscriptionType">
            <summary>
            Gets the type of the subscription
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableReport.VariableInfo">
            <summary>
            Gets the information of the related shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.SharedVariableReport.Writer">
            <summary>
            Gets the name of the module which performed the write/create operation
            </summary>
        </member>
        <member name="T:Robotics.IService">
            <summary>
            Represents a Service
            </summary>
        </member>
        <member name="M:Robotics.IService.Start">
            <summary>
            Starts the service
            </summary>
        </member>
        <member name="M:Robotics.IService.Stop">
            <summary>
            Stops the service
            </summary>
        </member>
        <member name="P:Robotics.IService.IsRunning">
            <summary>
            Gets or sets a value indicating whether the IService object is running
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable">
            <summary>
            Gets access to an ARRAY OF DOUBLES variable stored in the Blackboard
            </summary>
        </member>
        <member name="F:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.SplitChars">
            <summary>
            Chars used to split strings
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Double[],System.Boolean)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.#ctor(System.String,System.Double[])">
            <summary>
            Initializes a new instance of DoubleArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.Deserialize(System.String,System.Double[]@)">
            <summary>
            Deserializes an array of doubles from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="values">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.Serialize(System.Double[],System.String@)">
            <summary>
            Serializes the provided object to a string
            </summary>
            <param name="values">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.ToString">
            <summary>
            Returns the string representation of the shared variable
            </summary>
            <returns>The string representation of the shared variable</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.IsArray">
            <summary>
            Returns true
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.DoubleArraySharedVariable.TypeName">
            <summary>
            Returns "double"
            </summary>
        </member>
        <member name="T:Robotics.API.SharedVariableStringSerializer`1">
            <summary>
            Represents a function that will serialize the provided object to a string.
            Serialized strings must have the format: "dataType variableName variableData" or "dataType variableName[arraySize] variableData"
            </summary>
            <typeparam name="T">Type of the object the function can serialize</typeparam>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="T:Robotics.API.SharedVariableStringDeserializer`1">
            <summary>
            Represents a function that will deserialize the provided object from a string
            Serialized strings have the format: "dataType variableName variableData" or "dataType variableName[arraySize] variableData"
            </summary>
            <typeparam name="T">Type of the object the function can deserialize</typeparam>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="T:System.Net.Sockets.UdpPacket">
            <summary>
            Implementa un paquete TCP con la informacion relevante recibida
            </summary>
        </member>
        <member name="M:System.Net.Sockets.UdpPacket.ToString">
            <summary>
            Returns a String that represents the current Object
            </summary>
            <returns>A String that represents the current Object</returns>
        </member>
        <member name="P:System.Net.Sockets.UdpPacket.Data">
            <summary>
            Gets the data received in raw format
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpPacket.DataString">
            <summary>
            Gets the data formatted as string
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpPacket.LocalEndPoint">
            <summary>
            Gets the socket local endpoint 
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpPacket.RemoteEndPoint">
            <summary>
            Gets the socket remote endpoint 
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpPacket.Port">
            <summary>
            Gets the port where the sender sent the packet
            </summary>
        </member>
        <member name="P:System.Net.Sockets.UdpPacket.SenderIP">
            <summary>
            Gets the IP Address of the sender of the packet
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketUdpClient">
            <summary>
            Implements a simple UDP client
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.#ctor">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketUdpClient class
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketUdpClient class
            </summary>
            <param name="port">the connection port for the socket</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketUdpClient class
            </summary>
            <param name="serverAddress">The server IP Address</param>
            <param name="port">The connection port for the socket</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketUdpClient class
            </summary>
            <param name="serverAddress">An string representing the server IP Address</param>
            <param name="port">the connection port for the socket</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.Connect(System.Int32)">
            <summary>
            Opens a new Tco socket connection
            </summary>
            <param name="port">Port to connect</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.Connect">
            <summary>
            Opens a new Tcp socket connection
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.Disconnect">
            <summary>
            Closes the port connection and sets the System.Net.Sockets.SocketUdpClient.IsOpen property to false
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to the server
            </summary>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.Send(System.String)">
            <summary>
            Sends the specified string to the server
            </summary>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.TryConnect(System.Int32)">
            <summary>
            Tries to open a new Tcp socket connection
            </summary>
            <param name="port">Port to connect</param>
            <returns>True if connection was established</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.TryConnect">
            <summary>
            Tries to open a new Tcp socket connection
            </summary>
            <returns>True if connection was established</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to specified endpoint
            </summary>
            <param name="destination">Destination endpoint</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPAddress,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPAddress,System.UInt16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to specified IP address over the specified port in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="port">The port where the packet will arrive</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPEndPoint,System.Char[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of characters to specified endpoint
            </summary>
            <param name="destination">Destination endpoint</param>
            <param name="buffer">The char array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPAddress,System.Char[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of characters to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="buffer">The char array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPAddress,System.UInt16,System.Char[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of characters to specified IP address over the specified port in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="port">The port where the packet will arrive</param>
            <param name="buffer">The char array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPEndPoint,System.String)">
            <summary>
            Sends the parameter string to specified endpoint
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPAddress,System.String)">
            <summary>
            Sends the parameter string to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketUdpClient.SendTo(System.Net.IPAddress,System.UInt16,System.String)">
            <summary>
            Sends the parameter string to specified IP address in the network
            </summary>
            <param name="destination">The IP address of the destiny</param>
            <param name="port">The port where the packet will arrive</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="P:System.Net.Sockets.SocketUdpClient.Connected">
            <summary>
            Gets a value indicating the open or closed status of the socket
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdpClient.Port">
            <summary>
            Gets or sets the connection port for the socket.
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdpClient.ServerAddress">
            <summary>
            Gets or sets the server IP Address
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdpClient.LastStringReceived">
            <summary>
            Gets the last packet received formatted as string
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketUdpClient.BufferSize">
            <summary>
            Gets or sets the size of the buffer for incoming data
            </summary>
        </member>
        <member name="E:System.Net.Sockets.SocketUdpClient.DataReceived">
            <summary>
            Represents the method that will handle the data received event of a SocketUdpClient object
            </summary>
        </member>
        <member name="T:Robotics.IRunnableObjectExecutionStateChanged">
            <summary>
            Represents the method that will handle the ExecutionAborted, ExecutionCompleted and ExecutionStarted events
            </summary>
            <param name="runnableObject">The object that raises the event</param>
        </member>
        <member name="T:System.Net.Sockets.TcpPacket">
            <summary>
            Implementa un paquete TCP con la informacion relevante recibida
            </summary>
        </member>
        <member name="M:System.Net.Sockets.TcpPacket.ToString">
            <summary>
            Returns a String that represents the current Object
            </summary>
            <returns>A String that represents the current Object</returns>
        </member>
        <member name="M:System.Net.Sockets.TcpPacket.op_Explicit(System.Net.Sockets.TcpPacket)~System.String">
            <summary>
            Implicitly converts a TcpPacket into a String object
            </summary>
            <param name="p">TcpPacket to convert</param>
            <returns>String representation of data contained in the TcpPacket</returns>
        </member>
        <member name="M:System.Net.Sockets.TcpPacket.op_Explicit(System.Net.Sockets.TcpPacket)~System.Byte[]">
            <summary>
            Implicitly converts a TcpPacket into an array of bytes
            </summary>
            <param name="p">TcpPacket to convert</param>
            <returns>Array of bytes with the data contained in the TcpPacket</returns>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.Data">
            <summary>
            Gets the data received in raw format
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.DataString">
            <summary>
            Gets the data formatted as string
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.DataStrings">
            <summary>
            Gets the all strings stored in the data
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.IsAnsi">
            <summary>
            Gets a value indicating where the Tcp packet contains only characters between 0 and 127
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.LocalEndPoint">
            <summary>
            Gets the socket local endpoint 
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.RemoteEndPoint">
            <summary>
            Gets the socket remote endpoint 
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.Port">
            <summary>
            Gets the port where the sender sent the packet
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.SenderIP">
            <summary>
            Gets the IP Address of the sender of the packet
            </summary>
        </member>
        <member name="P:System.Net.Sockets.TcpPacket.Item(System.Int32)">
            <summary>
            Gets the i-th byte contained in the TcpPacket
            </summary>
            <param name="ix">Zero-based index of the data to get</param>
            <returns>The i-th byte contained in the TcpPacket</returns>
        </member>
        <member name="T:System.Net.Sockets.SocketTcpClient">
            <summary>
            Implements a simple TCP client
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpClient.socket">
            <summary>
            the socket used for connection
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpClient.serverIP">
            <summary>
            Stores the ip address of the server
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpClient.lastPacket">
            <summary>
            Last received TCP Packet
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpClient.noDelay">
            <summary>
            Specifies whether the stream Socket is using the Nagle algorithm
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpClient.remoteEndPoint">
            <summary>
            The remote endpoint to whre the socket is connected
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpClient.connectionTimeOut">
            <summary>
            The connection tieout in milliseconds
            </summary>
        </member>
        <member name="F:System.Net.Sockets.SocketTcpClient.connectionMode">
            <summary>
            Selects the connection mode for the SocketTCPClient
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.#ctor">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketTcpClient class
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketTcpClient class
            </summary>
            <param name="port">the connection port for the socket</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketTcpClient class
            </summary>
            <param name="serverAddress">The server IP Address</param>
            <param name="port">The connection port for the socket</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketTcpClient class
            </summary>
            <param name="serverAddress">An string representing the server IP Address</param>
            <param name="port">the connection port for the socket</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.BeginReceive(System.Net.Sockets.AsyncStateObject)">
            <summary>
            Begins a (safe) receive operation with a socket.
            If the operation fails, it retries automatically while the socket is connected
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.Connect(System.Int32)">
            <summary>
            Opens a new Tco socket connection
            </summary>
            <param name="port">Port to connect</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.Connect">
            <summary>
            Opens a new Tcp socket connection
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.Disconnect">
            <summary>
            Closes the port connection and sets the System.Net.Sockets.SocketTcpClient.IsOpen property to false
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.ParseReceivedData(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Parses data received trough socket spliting merged packets
            </summary>
            <param name="s">socket which received the data</param>
            <param name="data">Received data</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to the server
            </summary>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.Send(System.Byte[])">
            <summary>
            Sends a byte array to the server
            </summary>
            <param name="buffer">The byte array to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.Send(System.String)">
            <summary>
            Sends the specified string to the server
            </summary>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.SetupSocket(System.Int32@)">
            <summary>
            Configures the connection parameters for the socket
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.TryConnect(System.Int32)">
            <summary>
            Tries to open a new Tcp socket connection
            </summary>
            <param name="port">Port to connect</param>
            <returns>True if connection was established</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.TryConnect">
            <summary>
            Tries to open a new Tcp socket connection
            </summary>
            <returns>True if connection was established</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpClient.dataReceived(System.IAsyncResult)">
            <summary>
            Manages the data received async callback
            </summary>
            <param name="result">Result of async operation</param>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.ConnectionTimeOut">
            <summary>
            Gets or sets the connection timeout in milliseconds.
            Requires the ConnectionMode be set to Fast
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.ConnectionMode">
            <summary>
            Gets or sets the connection mode for the SocketTCPClient
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.IsConnected">
            <summary>
            Gets a value indicating the Connected or Disconnected status of the socket
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.IsOpen">
            <summary>
            Gets a value indicating the Connected (open) or Disconnected (closed) status of the socket
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.LastPacketReceived">
            <summary>
            Gets the last packet received
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.LastStringReceived">
            <summary>
            Gets the last packet received formatted as string
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.NoDelay">
            <summary>
            Gets or sets a Boolean value that specifies whether the stream Socket is using the Nagle algorithm
            </summary>
            <remarks>
            The Nagle algorithm reduces network traffic by causing the socket to buffer packets for up to 200 milliseconds and then combines and sends them in one packet
            The majority of network applications should use the Nagle algorithm.
            </remarks>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.ServerAddress">
            <summary>
            Gets or sets the server IP Address
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpClient.Socket">
            <summary>
            Gets the underlying socket used for connection
            </summary>
        </member>
        <member name="E:System.Net.Sockets.SocketTcpClient.Connected">
            <summary>
            Represents the method that will handle the client connected event of a SocketTcpClient object
            </summary>
        </member>
        <member name="E:System.Net.Sockets.SocketTcpClient.Disconnected">
            <summary>
            Represents the method that will handle the client disconnected event of a SocketTcpClient object
            </summary>
        </member>
        <member name="T:Robotics.HAL.DiferentialPairMobileBase">
            <summary>
            Represents a robot's mobile base which works with differential pair
            </summary>
        </member>
        <member name="F:Robotics.HAL.DiferentialPairMobileBase.metersPerPulse">
            <summary>
            Stores the distance advanced by the robot, for each encoder pulse, in meters
            </summary>
        </member>
        <member name="F:Robotics.HAL.DiferentialPairMobileBase.metersPerPulseLeft">
            <summary>
            Stores the distance advanced by the left wheel of the robot, for each left encoder pulse, in meters
            </summary>
        </member>
        <member name="F:Robotics.HAL.DiferentialPairMobileBase.metersPerPulseRight">
            <summary>
            Stores the distance advanced by the right wheel of the robot, for each right encoder pulse, in meters
            </summary>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.#ctor">
            <summary>
            Initializes a new instance of Robot
            </summary>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.#ctor(Robotics.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of Robot
            </summary>
            <param name="position">Initial position of the robot</param>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.#ctor(Robotics.Mathematics.Vector3,System.Double)">
            <summary>
            Initializes a new instance of Robot
            </summary>
            <param name="position">Initial position of the robot</param>
            <param name="orientation">Initial orientation of the robot</param>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.ClearEncoders">
            <summary>
            Resets the value of the encoders of the robot to zero
            </summary>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.ReadEncoders(System.Int32@,System.Int32@)">
            <summary>
            Read the encoder values of the robot
            </summary>
            <param name="leftEncoderValue">The value of the left wheel encoder in pulses</param>
            <param name="rightEncoderValue">The value of the right wheel encoder in pulses</param>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.ReadEncoders(System.Double@,System.Double@)">
            <summary>
            Read the encoder values of the robot
            </summary>
            <param name="leftEncoderValue">The value of the left wheel encoder in meters</param>
            <param name="rightEncoderValue">The value of the right wheel encoder in meters</param>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.ResetRobotBase">
            <summary>
            Resets the base of the robot to its initial state.
            </summary>
            <remarks>This command stops the robot and clear the encoder values.</remarks>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.SetAngularSpeeds(System.Double,System.Double)">
            <summary>
            Sets the angular speed of both wheels of the robot
            </summary>
            <param name="left">Left angular speed in radians per second</param>
            <param name="right">Right angular speed in radians per second</param>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.SetTorques(System.Double,System.Double)">
            <summary>
            Sets the torque of both motor's wheels of the robot
            </summary>
            <param name="left">Torque for left motor wheel</param>
            <param name="right">Torque for right motor wheel</param>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.SetAngularSpeeds(System.Int32,System.Int32)">
            <summary>
            Sets the angular speed of both wheels of the robot
            </summary>
            <param name="left">Left angular speed in percentage</param>
            <param name="right">Right angular speed in percentage</param>
            <remarks>Angular speeds must be in the interval [-100, 100]</remarks>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.SetAngularSpeeds(System.Byte,System.Byte)">
            <summary>
            Sets the angular speed of both wheels of the robot
            </summary>
            <param name="left">Left angular speed as a 8bit integer</param>
            <param name="right">Right angular speed as a 8bit integer</param>
            <remarks>Angular speeds must be in the interval [-100, 100]</remarks>
        </member>
        <member name="M:Robotics.HAL.DiferentialPairMobileBase.Stop">
            <summary>
            Sets the speed of the robot to zero
            </summary>
        </member>
        <member name="P:Robotics.HAL.DiferentialPairMobileBase.MetersPerPulse">
            <summary>
            Gets the average distance advanced by the robot, for each encoder pulse, in meters
            </summary>
        </member>
        <member name="P:Robotics.HAL.DiferentialPairMobileBase.MetersPerPulseLeft">
            <summary>
            Gets the distance advanced by the left wheel of the robot, for each left encoder pulse, in meters
            </summary>
        </member>
        <member name="P:Robotics.HAL.DiferentialPairMobileBase.MetersPerPulseRight">
            <summary>
            Gets the distance advanced by the right wheel of the robot, for each right encoder pulse, in meters
            </summary>
        </member>
        <member name="T:Robotics.DataStructures.ITree">
            <summary>
            Represents a Tree
            </summary>
        </member>
        <member name="T:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable">
            <summary>
            Gets access to a RecognizedSpeech variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.#ctor(Robotics.API.CommandManager,System.String,Robotics.HAL.Sensors.RecognizedSpeech,System.Boolean)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.#ctor(System.String,Robotics.HAL.Sensors.RecognizedSpeech)">
            <summary>
            Initializes a new instance of StringSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.SDeserialize(System.String,Robotics.HAL.Sensors.RecognizedSpeech@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.Deserialize(System.String,Robotics.HAL.Sensors.RecognizedSpeech@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.Serialize(Robotics.HAL.Sensors.RecognizedSpeech,System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.MiscSharedVariables.RecognizedSpeechSharedVariable.TypeName">
            <summary>
            Returns "string"
            </summary>
        </member>
        <member name="T:Robotics.API.SignatureBuilder">
            <summary>
            Represents an object capable of produce Signature objects
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.sb">
            <summary>
            String builer used to generate the regular expression pattern
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.parameterCount">
            <summary>
            Number of parameters
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.delegateCount">
            <summary>
            Number of delegates
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.typeArrayCount">
            <summary>
            Number of type arrays
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.delegateList">
            <summary>
            Stores the correspondance list between delegate name and delegate
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.typeArrayList">
            <summary>
            Stores the correspondance list between type array name and type array
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.headerParamAt">
            <summary>
            Stores the position of the last parameter header
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.headerDelegateAt">
            <summary>
            Stores the position of the last delegate header
            </summary>
        </member>
        <member name="F:Robotics.API.SignatureBuilder.headerTypeArrayAt">
            <summary>
            Stores the position of the last TypeArray header
            </summary>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.#ctor">
            <summary>
            Initializes a new instance of SignatureBuilder
            </summary>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddNewFromTypes(System.Type[])">
            <summary>
            Adds a signature to the SignatureBuilder using the provided types
            </summary>
            <param name="types">Array of types from which create the signature</param>
            <remarks>Only prmitive types are supported</remarks>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddNewFromDelegate(System.Delegate)">
            <summary>
            Adds a signature to the SignatureBuilder using the parameters of the provided Delegate object
            </summary>
            <param name="d">Delegate to create the signature from</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddParameter(System.String,System.Type)">
            <summary>
            Adds a parameter to the current signature of the specified type with the specfied name
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="type">The type of the parameter</param>
            <remarks>Only prmitive types are supported</remarks>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.BeginDelegate(System.Delegate)">
            <summary>
            Adds the delegate header to the stringBuilder used for regex
            </summary>
            <param name="d">The Delegate object from which create the header</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.BeginTypeArray(System.Type[])">
            <summary>
            Adds the TypeArray header to the stringBuilder used for regex
            </summary>
            <param name="typeArray">The array of Type objects from which create the header</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.BeginParameter(System.String)">
            <summary>
            Adds the parameter header to the stringBuilder used for regex
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.Clear">
            <summary>
            Deletes all the SignatureBuilder data to allow reuse the SignatureBuilder object
            </summary>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.EndDelegate">
            <summary>
            Balances the parenthesis count and adds the delegate footer to the stringBuilder used for regex
            </summary>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.EndTypeArray">
            <summary>
            Balances the parenthesis count and adds the TypeArray footer to the stringBuilder used for regex
            </summary>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.EndParameter(System.Boolean)">
            <summary>
            Balances the parenthesis count and adds the parameter footer to the stringBuilder used for regex
            </summary>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.GenerateSignature(System.String)">
            <summary>
            Generates the Signature used to check the parameters for the commands and execute the apropiate function
            </summary>
            <param name="commandName">The name of the command thie Signature object will be valid for</param>
            <returns></returns>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.NormalizeEscapes(System.String)">
            <summary>
            Normalizes the input string to prevent to contain special characters used in regex
            </summary>
            <param name="stringToNormalize">The string to normalize</param>
            <returns>The input string normalized</returns>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddAnsiWord(System.String,System.Boolean)">
            <summary>
            Inserts a string type parameter which must be composed of characters from 'A' to 'Z' or 'a' to 'z'
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddCharacter(System.String,System.Boolean)">
            <summary>
            Inserts a single character type parameter
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddConstant(System.String,System.String,System.Boolean)">
            <summary>
            Inserts a constant string which may apear as paramteter
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="constant">The constant string</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddConstant(System.String,System.String[],System.Boolean)">
            <summary>
            Inserts an OR-ed array of constant strings which may apear as paramteter
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="constants">Array of constants</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddDelimiter(System.String)">
            <summary>
            Inserts a string used as delimiter (one or more occurences)
            </summary>
            <param name="delimiter">The string used as delimiter</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddDelimiter(System.String[])">
            <summary>
            Inserts a string used as delimiter (one or more occurences)
            </summary>
            <param name="delimiter">Array of valid delimiter string</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddHexadecimal(System.String,System.Boolean)">
            <summary>
            Inserts a integer number type parameter in hexadecimal format
            The parameter may be preceded by a 0x, and the letters may be uppercase or lowercase.
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddIdentifier(System.String,System.Boolean)">
            <summary>
            Inserts a C-type-identifier type parameter
            C type identifiers begin with a letter or underscore and may contain letters numbers and underscore
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddIntegerNumber(System.String,System.Boolean,System.Boolean)">
            <summary>
            Inserts a integer number type parameter
            The parameter may be preceded by a minus, but not by a plus.
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="signed">Indicates if the number may be negative (preceded by a minus)</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddLowerCaseWord(System.String,System.Boolean)">
            <summary>
            Inserts a string type parameter which must be composed of characters from 'a' to 'z'
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddMultipleIntegerNumber(System.String,System.Boolean)">
            <summary>
            Inserts an array of integer number type parameter
            The parameter may be preceded by a minus, but not by a plus.
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="signed">Indicates if the number may be negative (preceded by a minus)</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddMultipleRealNumbers(System.String)">
            <summary>
            Inserts an array of real numbers type parameter
            Each parameter may be preceded by a minus, but not by a plus.
            If a dot character in the number is present, it must be preceded and succeded by a number.
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddMultipleWords(System.String)">
            <summary>
            Inserts a multiple string array delimited by space-class characters
            Equivalent to the regular expression pattern (\S+(\s+\S+)*)?
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddRealNumber(System.String,System.Boolean)">
            <summary>
            Inserts a real number type parameter
            The parameter may be preceded by a minus, but not by a plus.
            If a dot character in the number is present, it must be preceded and succeded by a number.
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddSpace">
            <summary>
            Inserts a space delimter (one or more occurences)
            </summary>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddUpperCaseWord(System.String,System.Boolean)">
            <summary>
            Inserts a string type parameter which must be composed of characters from 'A' to 'Z'
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="M:Robotics.API.SignatureBuilder.AddWord(System.String,System.Boolean)">
            <summary>
            Inserts a string type parameter which must be composed of characters from letters, numbers, underscore and UNICODE
            </summary>
            <param name="paramName">The name of the parameter for retrieving</param>
            <param name="optional">Indicates if the parameter is optional</param>
        </member>
        <member name="P:Robotics.API.SignatureBuilder.RegexPattern">
            <summary>
            Gets the regular expression pattern to match parameters
            </summary>
        </member>
        <member name="T:Robotics.Paralelism.AsynchronousPipe`1">
            <summary>
            Implements an asynchronous pipe which can be used to communicate two Filter objects.
            It uses a FIFO buffer to store data
            </summary>
            <typeparam name="T">The type of data transmited through the pipe</typeparam>
        </member>
        <member name="F:Robotics.Paralelism.AsynchronousPipe`1.buffer">
            <summary>
            Temporary stores data
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.AsynchronousPipe`1.capacity">
            <summary>
            The capacity of the pipe
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.AsynchronousPipe`1.rLock">
            <summary>
            Object used for synchronous access to the read method
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.AsynchronousPipe`1.queueHasData">
            <summary>
            Event used for synchronization when queue is full
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.AsynchronousPipe`1.queueHasSpace">
            <summary>
            Event used for synchronization when queue is empty
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.AsynchronousPipe`1.queueLock">
            <summary>
            Lock used to allow only one thread modify the queue at a time
            </summary>
        </member>
        <member name="F:Robotics.Paralelism.AsynchronousPipe`1.wLock">
            <summary>
            Object used for synchronous access to the write method
            </summary>
        </member>
        <member name="M:Robotics.Paralelism.AsynchronousPipe`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of AsynchronousPipe
            </summary>
            <param name="capacity">The maximum number of elements the pipe can store in its internal queue</param>
        </member>
        <member name="M:Robotics.Paralelism.AsynchronousPipe`1.Peek">
            <summary>
            Reads data from the pipe without removing it
            If the queue of the pipe is empty, it blocks the thread until another thread writes data
            </summary>
            <returns>The data written on the other side of the pipe</returns>
        </member>
        <member name="M:Robotics.Paralelism.AsynchronousPipe`1.Read">
            <summary>
            Reads data from the pipe.
            If the queue of the pipe is empty, it blocks the thread until another thread writes data
            </summary>
            <returns>The data written on the other side of the pipe</returns>
        </member>
        <member name="M:Robotics.Paralelism.AsynchronousPipe`1.Write(`0)">
            <summary>
            Writes data to the queue of the pipe.
            If the queue of pipe is full, it blocks the thread until another thread reads data
            </summary>
            <param name="data">The data to be read on the other side of the pipe</param>
        </member>
        <member name="M:Robotics.Paralelism.AsynchronousPipe`1.TryPeek(System.Int32,`0@)">
            <summary>
            Tries to read data from the pipe before the timeout elapses without removing it.
            If the queue of the pipe is empty, it blocks the thread until another thread writes data
            </summary>
            <param name="timeout">The maximum amount of time in milliseconds to wait for available data</param>
            <param name="data">When this method returns contains the data written on the other side of the pipe
            if the read succeded, or the default value of T if the timeout elapses</param>
            <returns>true if the read operation suceeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.Paralelism.AsynchronousPipe`1.TryRead(System.Int32,`0@)">
            <summary>
            Tries to read data from the pipe before the timeout elapses.
            If the queue of the pipe is empty, it blocks the thread until another thread writes data
            </summary>
            <param name="timeout">The maximum amount of time in milliseconds to wait for available data</param>
            <param name="data">When this method returns contains the data written on the other side of the pipe
            if the read succeded, or the default value of T if the timeout elapses</param>
            <returns>true if the read operation suceeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.Paralelism.AsynchronousPipe`1.TryWrite(`0,System.Int32)">
            <summary>
            Tries to write data to the pipe before the timeout elapses.
            If the queue of pipe is full, it blocks the thread until another thread reads data
            </summary>
            <param name="timeout">The maximum amount of time in milliseconds to wait for available space in the queue</param>
            <param name="data">The data to be readed on the other side of the pipe</param>
            <returns>true if the write operation suceeded, false otherwise</returns>
        </member>
        <member name="P:Robotics.Paralelism.AsynchronousPipe`1.Capacity">
            <summary>
            Gets the maximum capacity of the pipe
            </summary>
        </member>
        <member name="T:Robotics.API.SubscriptionInfo">
            <summary>
            Encapsulates information about a shared variable subscription
            </summary>
        </member>
        <member name="T:Robotics.API.ISharedVariableSubscriptionInfo">
            <summary>
            Gets subscription information about a shared variable
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableSubscriptionInfo.ModuleName">
            <summary>
            Gets the name of the subscriber module
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableSubscriptionInfo.SubscriptionType">
            <summary>
            Gets the subscription type of the subscriber module
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableSubscriptionInfo.ReportType">
            <summary>
            Gets the report type for the subscription of the subscriber module
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableSubscriptionInfo.VariableInfo">
            <summary>
            Gets information about the shared variable related to the subscription
            </summary>
        </member>
        <member name="P:Robotics.API.ISharedVariableSubscriptionInfo.WriterModule">
            <summary>
            Gets the name of the writer module for subscription types which allows to set an specific module
            </summary>
        </member>
        <member name="F:Robotics.API.SubscriptionInfo.moduleName">
            <summary>
            The name of the subscriber module
            </summary>
        </member>
        <member name="F:Robotics.API.SubscriptionInfo.subscriptionType">
            <summary>
            The subscription type of the subscriber module
            </summary>
        </member>
        <member name="F:Robotics.API.SubscriptionInfo.reportType">
            <summary>
            The report type for the subscription of the subscriber module
            </summary>
        </member>
        <member name="F:Robotics.API.SubscriptionInfo.variableInfo">
            <summary>
            The object which contains information about the shared variable related to the subscription
            </summary>
        </member>
        <member name="F:Robotics.API.SubscriptionInfo.writerModule">
            <summary>
            The name of the writer module for subscription types which allows to set an specific module
            </summary>
        </member>
        <member name="M:Robotics.API.SubscriptionInfo.#ctor">
            <summary>
            Initializes a new instance of SubscriptionInfo.
            Default construtor provided for serialization purposes only
            </summary>
        </member>
        <member name="M:Robotics.API.SubscriptionInfo.#ctor(Robotics.API.ISharedVariableInfo)">
            <summary>
            Initializes a new instance of SubscriptionInfo
            Construtor provided for serialization purposes only
            </summary>
            <param name="variableInfo">The object which contains information about the shared variable related to the subscription</param>
        </member>
        <member name="M:Robotics.API.SubscriptionInfo.#ctor(Robotics.API.ISharedVariableInfo,System.String,Robotics.API.SharedVariableSubscriptionType,Robotics.API.SharedVariableReportType)">
            <summary>
            Initializes a new instance of SubscriptionInfo
            </summary>
            <param name="variableInfo">The object which contains information about the shared variable related to the subscription</param>
            <param name="moduleName">The name of the subscriber module</param>
            <param name="subscriptionType">The subscription type for the subscriber module</param>
            <param name="reportType">The report type for the subscription of the subscriber module</param>
        </member>
        <member name="M:Robotics.API.SubscriptionInfo.#ctor(Robotics.API.ISharedVariableInfo,System.String,Robotics.API.SharedVariableSubscriptionType,Robotics.API.SharedVariableReportType,System.String)">
            <summary>
            Initializes a new instance of SubscriptionInfo
            </summary>
            <param name="variableInfo">The object which contains information about the shared variable related to the subscription</param>
            <param name="moduleName">The name of the subscriber module</param>
            <param name="subscriptionType">The subscription type for the subscriber module</param>
            <param name="reportType">The report type for the subscription of the subscriber module</param>
            <param name="writerModule">The name of the writer module for subscription types which allows to set an specific module</param>
        </member>
        <member name="P:Robotics.API.SubscriptionInfo.ModuleName">
            <summary>
            Gets or sets the name of the subscriber module
            </summary>
        </member>
        <member name="P:Robotics.API.SubscriptionInfo.SubscriptionType">
            <summary>
            Gets or sets the subscription type of the subscriber module
            </summary>
        </member>
        <member name="P:Robotics.API.SubscriptionInfo.ReportType">
            <summary>
            Gets or sets the report type for the subscription of the subscriber module
            </summary>
        </member>
        <member name="P:Robotics.API.SubscriptionInfo.VariableInfo">
            <summary>
            Gets or sets information about the shared variable related to the subscription
            </summary>
        </member>
        <member name="P:Robotics.API.SubscriptionInfo.WriterModule">
            <summary>
            Gets or sets the name of the writer module for subscription types which allows to set an specific module
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.RecognizedSpeech">
            <summary>
            Represents a collection of Recognized Speech Alternates
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.RecognizedSpeech.alternates">
            <summary>
            The list of alternates
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.#ctor">
            <summary>
            Initializes a new instance of RecognizedSpeech
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of RecognizedSpeech
            </summary>
            <param name="capacity">Initial capacity for alternates</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.#ctor(System.Collections.Generic.IEnumerable{Robotics.HAL.Sensors.RecognizedSpeechAlternate})">
            <summary>
            Initializes a new instance of RecognizedSpeech
            </summary>
            <param name="alternates">Collection of recognized speech alternates</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.Add(Robotics.HAL.Sensors.RecognizedSpeechAlternate)">
            <summary>
            Adds an item to the Collection
            </summary>
            <param name="item">The object to add to the</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.Add(System.String,System.Single)">
            <summary>
            Adds an item to the Collection
            </summary>
            <param name="confidence">The measure of certainty for a RecognizedSpeechAlternate</param>
            <param name="text">The normalized text obtained by a recognition engine</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.Clear">
            <summary>
            Removes all items from the Collection
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.Contains(Robotics.HAL.Sensors.RecognizedSpeechAlternate)">
            <summary>
            Determines whether the Collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the Collection.</param>
            <returns>true if item is found in the Collection otherwise, false</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.CopyTo(Robotics.HAL.Sensors.RecognizedSpeechAlternate[],System.Int32)">
            <summary>
            Copies the elements of the Collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from Collection. The Array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.Remove(Robotics.HAL.Sensors.RecognizedSpeechAlternate)">
            <summary>
            Removes the first occurrence of a specific object from the Collection.
            </summary>
            <param name="item">The object to remove from the Collection</param>
            <returns>true if item was successfully removed from the Collection; otherwise, false. This method also returns false if item is not found in the original Collection.</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.Sort">
            <summary>
            Sorts the internal array by confidence
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeech.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Robotics.HAL.Sensors.RecognizedSpeech.Confidence">
            <summary>
            Gets the confidence of the alternate with highest confidence
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.RecognizedSpeech.Count">
            <summary>
            Gets the number of elements contained in the Collection.
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.RecognizedSpeech.IsReadOnly">
            <summary>
            Gets a value indicating whether the Collection is read-only.
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.RecognizedSpeech.Text">
            <summary>
            Gets the text of the alternate with highest confidence
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.RecognizedSpeech.Item(System.Int32)">
            <summary>
            Gets the RecognizedSpeechAlternate with the specified index in the collection
            </summary>
            <param name="index">The zero-based index of the element to retrieve</param>
        </member>
        <member name="T:Robotics.HAL.Sensors.RecognizedSpeechAlternate">
            <summary>
            Represents a of Recognized Speech Alternate
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.RecognizedSpeechAlternate.confidence">
            <summary>
            The measure of certainty for a RecognizedSpeechAlternate
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.RecognizedSpeechAlternate.text">
            <summary>
            The normalized text obtained by a recognition engine
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeechAlternate.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of RecognizedSpeechAlternate
            </summary>
            <param name="confidence">The measure of certainty for a RecognizedSpeechAlternate</param>
            <param name="text">The normalized text obtained by a recognition engine</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.RecognizedSpeechAlternate.CompareTo(Robotics.HAL.Sensors.RecognizedSpeechAlternate)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings:
            Less than zero -> This object is less than the other parameter.
            Zero -> This object is equal to other.
            Greater than zero -> This object is greater than other.
            </returns>
        </member>
        <member name="P:Robotics.HAL.Sensors.RecognizedSpeechAlternate.Confidence">
            <summary>
            Returns the measure of certainty for a RecognizedSpeechAlternate
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.RecognizedSpeechAlternate.Text">
            <summary>
            Returns the normalized text obtained by a recognition engine
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.VarSharedVariable">
            <summary>
            Gets access to a multi-variant-type variable stored in the Blackboard
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of IntSharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.Deserialize(System.String,System.String@)">
            <summary>
            Deserializes the provided object from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="value">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.Serialize(System.String,System.String@)">
            <summary>
            Sserializes the provided object to a string
            </summary>
            <param name="value">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.Elements">
            <summary>
            Gets the string representation of the elements contained in the BufferedData
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.VarSharedVariable.TypeName">
            <summary>
            Returns "int"
            </summary>
        </member>
        <member name="T:Robotics.API.SyncFunctionCE">
            <summary>
            Synchronously executes a function or method as a command executer
            </summary>
        </member>
        <member name="F:Robotics.API.SyncFunctionCE.executerMethod">
            <summary>
            Represents the method/function that will perform the command execution
            </summary>
        </member>
        <member name="F:Robotics.API.SyncFunctionCE.parametersRequired">
            <summary>
            Indicates if the executer requires parameters
            </summary>
        </member>
        <member name="M:Robotics.API.SyncFunctionCE.#ctor(System.String,Robotics.API.CommandExecuterMethod,System.Boolean)">
            <summary>
            Initializes a new instance of AsyncFunctionCE for the asynchronous execution of a command
            </summary>
            <param name="commandName">The name of the command that the AsyncFunctionCE will execute</param>
            <param name="executerMethod">The method/function that will perform the command execution</param>
            <param name="parametersRequired">Indicates if the executer requires parameters</param>
        </member>
        <member name="M:Robotics.API.SyncFunctionCE.SyncTask(Robotics.API.Command)">
            <summary>
            Calls the executer method
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <returns>The Response object result of provided command execution. If no response is required, must return null</returns>
            <remarks>If the command execution is aborted the execution of this method is
            canceled and a failure response is sent if required</remarks>
        </member>
        <member name="M:Robotics.API.SyncFunctionCE.DefaultParameterParser(System.String[])">
            <summary>
            When overriden, receives the parameters of an analyzed command by the default Signature object as an array of strings
            </summary>
            <param name="parameters">Array of strings containing the parameters of the command</param>
        </member>
        <member name="P:Robotics.API.SyncFunctionCE.ParametersRequired">
            <summary>
            Gets a value indicating if the executer requires parameters
            </summary>
        </member>
        <member name="T:Robotics.API.CommandExecuterMethod">
            <summary>
            Represents a methot that receives a command, executes it and generates a response
            </summary>
            <param name="command">Command object which contains the command to be executed</param>
            <returns>The Response object result of provided command execution. If no response is required, must return null</returns>
        </member>
        <member name="T:Robotics.API.CommandExecutedEventHandler">
            <summary>
            Represents the method that will handle the CommandExecuted event of a CommandManager object
            </summary>
            <param name="sender">The CommandManager object which rises the event</param>
            <param name="commandExecuter">The command executer used to execute the received command</param>
            <param name="executedCommand">The command which was executed</param>
            <param name="generatedResponse">The response generated due to command execution</param>
        </member>
        <member name="T:Robotics.API.CnnManCommandSentEventHandler">
            <summary>
            Represents the method that will handle the CommandSent event of a ConnectionManager object
            </summary>
            <param name="sender">The connection manager object which sends the command</param>
            <param name="command">The sent Command object</param>
        </member>
        <member name="T:Robotics.API.CnnManResponseSentEventHandler">
            <summary>
            Represents the method that will handle the ResponseSent event of a ConnectionManager object
            </summary>
            <param name="sender">The connection manager object which sends the response</param>
            <param name="response">The sent Response object</param>
        </member>
        <member name="T:Robotics.API.CommandReceivedEventHandler">
            <summary>
            Represents the method that will handle the CommandReceived event of a CommandManager object
            </summary>
            <param name="command">The Command object received</param>
        </member>
        <member name="T:Robotics.API.ResponseReceivedEventHandler">
            <summary>
            Represents the method that will handle the ResponseReceived event of a CommandManager object
            </summary>
            <param name="response">The Response object received</param>
        </member>
        <member name="T:Robotics.API.ConsoleUpdatedEventHandler">
            <summary>
            Represents the method that will handle the ConsoleUpdated event
            </summary>
            <param name="sender">The object that raises the event</param>
            <param name="text">The text sent to the console</param>
        </member>
        <member name="T:Robotics.API.CommandManagerStatusChangedEventHandler">
            <summary>
            Represents the method that will handle the StatusChanged, Started and Stopped events of a CommandManager
            </summary>
            <param name="commandManager">The CommandManager object which rises the event</param>
        </member>
        <member name="T:Robotics.API.ConnectionManagerDataReceivedEH">
            <summary>
            Represents the method that will handle the DataReceived event of a SocketTcpServer object
            </summary>
            <param name="connectionManager">The ConnectionManager object which rises the event</param>
            <param name="packet">The Tcp Packet with the data received</param>
        </member>
        <member name="T:Robotics.API.ConnectionManagerStatusChangedEventHandler">
            <summary>
            Represents the method that will handle the StatusChanged, Started and Stopped events of a ConnectionManager
            </summary>
            <param name="connectionManager">The ConnectionManager object which rises the event</param>
        </member>
        <member name="T:Robotics.API.ExecutionStatusEventHandler">
            <summary>
            Represents the method that will handle the ExecutionStarted and ExecutionAborted of a CommandExecuter
            </summary>
            <param name="commandExecuter">The CommandExecuter object which rises the event</param>
            <param name="command">The Command object which execution status has changed</param>
        </member>
        <member name="T:Robotics.API.ExecutionFinishedEventHandler">
            <summary>
            Represents the method that will handle the ExecutionFinished of a CommandExecuter
            </summary>
            <param name="commandExecuter">The CommandExecuter object which rises the event</param>
            <param name="command">The Command object which execution status has changed</param>
            <param name="response">The Response object result of the command execution</param>
        </member>
        <member name="T:Robotics.API.SharedVariableSubscriptionReportEventHadler`1">
            <summary>
            Represents the method that will handle the ValueChanged and WriteNotification event of a SharedVariable (of T) object
            </summary>
            <param name="report">The SharedVariable object which raises the event</param>
        </member>
        <member name="T:Robotics.API.SharedVariableUpdatedEventHadler">
            <summary>
            Represents the method that will handle the Updated and of a SharedVariable object
            </summary>
            <param name="sharedVariable">The SharedVariable object which raises the event</param>
        </member>
        <member name="T:Robotics.API.SharedVariableReportReceivedEventHadler">
            <summary>
            Represents the method that will handle the ReportReceived and of a SharedVariable object
            </summary>
            <param name="sharedVariable">The SharedVariable object which raises the event</param>
            <param name="report">The report data received from Blackboard</param>
        </member>
        <member name="T:Robotics.API.SharedVariableSubscriptionType">
            <summary>
            Specifies the type of subscription to a SharedVariable object
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionType.Unknown">
            <summary>
            The subscription status to the shared variable is unknown
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionType.None">
            <summary>
            There is no subscription to the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionType.Creation">
            <summary>
            Subscribes to the creation of a variable by any module
            </summary>
            <remarks>After variable creation the subscription is deleted</remarks>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionType.WriteAny">
            <summary>
            Subscribes to the creation of a variable by any module
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionType.WriteOthers">
            <summary>
            Subscribes to the writing of a variable by any module different from the subscriber one
            </summary>
            <remarks>This is the default value</remarks>
        </member>
        <member name="F:Robotics.API.SharedVariableSubscriptionType.WriteModule">
            <summary>
            Subscribes to the writing of a variable by th specified module
            </summary>
        </member>
        <member name="T:Robotics.API.SharedVariableReportType">
            <summary>
            Specifies how a subscription report of a shared variable change is made
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReportType.Unknown">
            <summary>
            The subscription status to the shared variable is unknown
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReportType.None">
            <summary>
            There is no subscription to the shared variable
            </summary>
        </member>
        <member name="F:Robotics.API.SharedVariableReportType.Notify">
            <summary>
            Sends a report that just notifies the change of the content of a shared variable
            </summary>
            <remarks>This is the default value</remarks>
        </member>
        <member name="F:Robotics.API.SharedVariableReportType.SendContent">
            <summary>
            Sends a report that notifies the change of the content of a shared variable sending it's content
            </summary>
        </member>
        <member name="T:Robotics.DataStructures.BinarySearchTreeNode`1">
            <summary>
            Represents a node of a binary tree
            </summary>
            <typeparam name="T">IComparable data type for the node</typeparam>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTreeNode`1.value">
            <summary>
            Stores the object of the BinarySearchTreeNode instance
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTreeNode`1.left">
            <summary>
            Stores the left child node of the BinarySearchTreeNode instance
            </summary>
        </member>
        <member name="F:Robotics.DataStructures.BinarySearchTreeNode`1.right">
            <summary>
            Stores the left child node of the BinarySearchTreeNode instance
            </summary>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.#ctor(`0)">
            <summary>
            Creates a new instance of BinarySearchTreeNode
            </summary>
            <param name="value">Value to initialize the node with</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.#ctor(`0,Robotics.DataStructures.BinarySearchTreeNode{`0},Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Creates a new instance of BinarySearchTreeNode
            </summary>
            <param name="value">Value to initialize the node with</param>
            <param name="left">The left child node</param>
            <param name="right">The right child node</param>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.Equals(System.Object)">
            <summary>
            Tells if two BinarySearchTreeNode nodes are equal.
            Two nodes are equal if stores the same value and points to the same left and right nodes
            </summary>
            <param name="obj">Object to compare with</param>
            <returns>true if obj is a BinarySearchTreeNode and both nodes are equal, false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.GetHashCode">
            <summary>
            Overridden. Returns the hash code for this instance.
            The value corresponds to the hash code of the value contained in the node.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.ToString">
            <summary>
            Returns a string that represents the value of the current BinarySearchTreeNode. 
            </summary>
            <returns>A string that represents the value of the current BinarySearchTreeNode.</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.CompareTo(Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Compares this instance to a specified BinarySearchTreeNode and returns an indication of their relative values
            </summary>
            <param name="other">A BinarySearchTreeNode to compare</param>
            <returns>A signed number indicating the relative values of this instance and other</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.op_Explicit(Robotics.DataStructures.BinarySearchTreeNode{`0})~`0">
            <summary>
            Implicitly converts the node to it's value
            </summary>
            <param name="node">Node to convert</param>
            <returns>The value or object stored in the node</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.op_Equality(Robotics.DataStructures.BinarySearchTreeNode{`0},Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Tells if two BinarySearchTreeNode nodes are equal.
            Two nodes are equal if stores the same value
            </summary>
            <param name="a">BinarySearchTreeNode to compare</param>
            <param name="b">BinarySearchTreeNode to compare</param>
            <returns>true if the values of the nodes are equal. false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.op_Inequality(Robotics.DataStructures.BinarySearchTreeNode{`0},Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Tells if two BinarySearchTreeNode nodes are different.
            Two nodes are different if stores different values or points to different left or right nodes
            </summary>
            <param name="a">BinarySearchTreeNode to compare</param>
            <param name="b">BinarySearchTreeNode to compare</param>
            <returns>true if nodes are not equal. false otherwise</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.op_GreaterThan(Robotics.DataStructures.BinarySearchTreeNode{`0},Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Tells if one BinarySearchTreeNode is greater than another BinarySearchTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinarySearchTreeNode to compare</param>
            <param name="b">BinarySearchTreeNode to compare</param>
            <returns>true if BinarySearchTreeNode a is greater than BinarySearchTreeNode b</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.op_GreaterThanOrEqual(Robotics.DataStructures.BinarySearchTreeNode{`0},Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Tells if one BinarySearchTreeNode is greater than or equal to another BinarySearchTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinarySearchTreeNode to compare</param>
            <param name="b">BinarySearchTreeNode to compare</param>
            <returns>true if BinarySearchTreeNode a is greater than or equal to BinarySearchTreeNode b</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.op_LessThan(Robotics.DataStructures.BinarySearchTreeNode{`0},Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Tells if one BinarySearchTreeNode is less than another BinarySearchTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinarySearchTreeNode to compare</param>
            <param name="b">BinarySearchTreeNode to compare</param>
            <returns>true if BinarySearchTreeNode a is less than BinarySearchTreeNode b</returns>
        </member>
        <member name="M:Robotics.DataStructures.BinarySearchTreeNode`1.op_LessThanOrEqual(Robotics.DataStructures.BinarySearchTreeNode{`0},Robotics.DataStructures.BinarySearchTreeNode{`0})">
            <summary>
            Tells if one BinarySearchTreeNode is less than or equal to another BinarySearchTreeNode.
            Comparison is made using the value of the nodes
            </summary>
            <param name="a">BinarySearchTreeNode to compare</param>
            <param name="b">BinarySearchTreeNode to compare</param>
            <returns>true if BinarySearchTreeNode a is less than or equal to BinarySearchTreeNode b</returns>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTreeNode`1.Left">
            <summary>
            Gets or sets the left child node of the BinarySearchTreeNode instance
            If this value is changed, also the previous child BinarySearchTreeNode instance is updated
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTreeNode`1.Right">
            <summary>
            Gets or sets the left child BinarySearchTreeNode of the BinarySearchTreeNode instance
            If this value is changed, also the previous child BinarySearchTreeNode instance is updated
            </summary>
        </member>
        <member name="P:Robotics.DataStructures.BinarySearchTreeNode`1.Value">
            <summary>
            Gets or sets the object or value of the BinarySearchTreeNode instance
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.FunctionBasedStateMachine">
            <summary>
            A state machine that uses several methods fot its execution
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.HokuyoLaserSensitivity">
            <summary>
            Enumerates sensivity modes of the laser
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserSensitivity.HighSensitivity">
            <summary>
            Hight Laser sensivity
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserSensitivity.NormalSensitivity">
            <summary>
            Normal Laser sensivity
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed">
            <summary>
            Enumerates comunication baudrates for comunicate with the laser
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed.B019K2">
            <summary>
            19200bps
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed.B057K6">
            <summary>
            57600bps
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed.B115K2">
            <summary>
            115200bps
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed.B250K">
            <summary>
            250kbps
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed.B500K">
            <summary>
            500kbps
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed.B750K">
            <summary>
            750kbps
            </summary>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.HokuyoLaser">
            <summary>
            Interfaces with a Hokuyo Laser range finder
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.serialPort">
            <summary>
            The serial port where the Laser Device is connected
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.sensivity">
            <summary>
            Sensitivity of the Laser device
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.threshold">
            <summary>
            Proximity treshold
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.dataAvailiable">
            <summary>
            Flag that indicates that there is data in the SerialPort
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.comSpeed">
            <summary>
            Speed of the serial port
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.lastRaw">
            <summary>
            Last lecture in RAW
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.lastReading">
            <summary>
            Last taken reading
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.motorSpeed">
            <summary>
            Laser device motor speed
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.cosByStep">
            <summary>
            Stores the Cos value for the angle at specified measurement step
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.sinByStep">
            <summary>
            Stores the Sin value for the angle at specified measurement step
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.step0">
            <summary>
            Absolute first step
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.stepA">
            <summary>
            First Step of the Measurement Range
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.stepB">
            <summary>
            Step number on the sensor's front axis
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.stepC">
            <summary>
            Last Step of the Measurement Range
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.stepD">
            <summary>
            Absolute last step
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.minMeasurement">
            <summary>
            Minimum Measurement [mm]
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.maxMeasurement">
            <summary>
            Maximum Measurement [mm]
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.ares">
            <summary>
            Total Number of Steps in 360º range
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.standardSpeed">
            <summary>
            Standard motor speed [rpm]
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.#ctor">
            <summary>
            Retrieves a laser object attached o the first laser device found
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.#ctor(System.String)">
            <summary>
            Creates a new instance of Laser class
            </summary>
            <param name="PortName">COM port where the laser is attached</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Finalize">
            <summary>
            Destructor. Releases resources and closes the serial port if open
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.CheckPortAvailiability">
            <summary>
            Checks if port exists and is availiable for reading
            </summary>
            <returns>true if port exists and can be opened, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Connect">
            <summary>
            Starts communication with the laser
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Dispose(System.Boolean)">
            <summary>
            When overriden release allocated resources.
            </summary>
            <param name="disposing">Indicates if Dispose() method (true) was called or it is called by the Garbage Collector (false)</param>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Disconnect">
            <summary>
            Stops communication with the laser
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Decrypt(System.Byte[])">
            <summary>
            Decrypts an integer from a byte array
            </summary>
            <param name="data">Array of data to decript</param>
            <returns>Integer value represented by the encrypted data</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypts an integer from a byte array
            </summary>
            <param name="data">Array of data to decript</param>
            <param name="offset">a zero-based offset where to start the decryption</param>
            <param name="count">Number of bytes to decrypt</param>
            <returns>Integer value represented by the encrypted data</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.GetCosFromStep(System.Int32)">
            <summary>
            Gets the cosine value of the angle at provided step.
            Values provided are precalculated
            </summary>
            <param name="step">The step for which angle the cosine is desired</param>
            <returns>The cosine value of the angle at provided step.</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.GetMDResponse(System.Int32@)">
            <summary>
            Gets the response for an MD command
            </summary>
            <param name="remainingScans">The number of scans remaining of the MD command requested</param>
            <returns>The data readed from the laser. Null if the data is not congruent</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.GetSinFromStep(System.Int32)">
            <summary>
            Gets the sine value of the angle at provided step.
            Values provided are precalculated
            </summary>
            <param name="step">The step for which angle the sine is desired</param>
            <returns>The sine value of the angle at provided step.</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.IsValidCommand(System.String)">
            <summary>
            Checks if the provided command is valid
            </summary>
            <param name="command">The command to check</param>
            <returns>true if the command is recognized by the device, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.MainThreadTask">
            <summary>
            Performs the asynchronous device reading operation
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.ParseMDResponse(System.Int16,Robotics.HAL.Sensors.Telemetric.LaserReading[]@,System.Int32@)">
            <summary>
            Extract the readings of a MD response sent by the Hokuyo Laser device
            </summary>
            <param name="clusterCount">The number of cluster count</param>
            <param name="readings">When this method returns contains the array of laser readings</param>
            <param name="remainingScans">When this method returns contains the number of remaining scans</param>
            <returns>true if data was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.ParseMDResponse(System.Int16,Robotics.HAL.Sensors.Telemetric.LaserReading[]@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Extract the readings of a MD response sent by the Hokuyo Laser device
            </summary>
            <param name="clusterCount">The number of cluster count</param>
            <param name="readings">When this method returns contains the array of laser readings</param>
            <param name="minDistance">When this method returns contains the minimum distance measured</param>
            <param name="maxDistance">When this method returns contains the maximum distance measured</param>
            <param name="remainingScans">When this method returns contains the number of remaining scans</param>
            <returns>true if data was parsed successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Read(Robotics.HAL.Sensors.Telemetric.ITelemetricReading[]@)">
            <summary>
            Syncronusly reads the Hokuyo Laser sensor
            </summary>
            <param name="readings">When this method returns contains the array of sensor readings if the sensor was readed successfully, null otherwise</param>
            <returns>true if read from the sensor was completed successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Read(Robotics.HAL.Sensors.Telemetric.LaserReading[]@)">
            <summary>
            Syncronusly reads the Hokuyo Laser sensor
            </summary>
            <param name="readings">When this method returns contains the array of Hokuyo Laser sensor readings if the sensor was readed successfully, null otherwise</param>
            <returns>true if read from the sensor was completed successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.RequestStopLaser">
            <summary>
            Requests the laser to stop reading
            </summary>
            <returns>true if laser ws stopped, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Scan">
            <summary>
            Performs a laser scan
            </summary>
            <returns>Array of laser readings</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Scan(System.Int32@)">
            <summary>
            Performs a laser scan
            </summary>
            <param name="errors">Number of errors found during scan</param>
            <returns>Array of laser readings</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.SendCointinousMD(System.Int16@)">
            <summary>
            Sends a MD command for continous reading
            </summary>
            <param name="clusterCount">Count of neighbours lectures to merge</param>
            <returns>true if command was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.SendCointinousMD(System.Int32,System.Int16@)">
            <summary>
            Sends a MD command for continous reading
            </summary>
            <param name="NumberOfScans">Number of scans to perform</param>
            <param name="clusterCount">Count of neighbours lectures to merge</param>
            <returns>true if command was sent successfully, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.sendCommand(System.String,System.String)">
            <summary>
            Sends a command to the Hokuyo Laser device
            </summary>
            <param name="command">The command to send</param>
            <param name="param">The parameters to be sent with the command</param>
            <returns>A string with the response to the sent command</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.sendCommand(System.String,System.String,System.String)">
            <summary>
            Sends a command to the Hokuyo Laser device
            </summary>
            <param name="command">The command to send</param>
            <param name="param">The parameters to be sent with the command</param>
            <param name="text">Aditional text to include with the command</param>
            <returns>A string with the response to the sent command</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.sendCommand(System.String,System.String,System.Int32@)">
            <summary>
            Sends a command to the Hokuyo Laser device
            </summary>
            <param name="command">The command to send</param>
            <param name="param">The parameters to be sent with the command</param>
            <param name="status">When this method returns contains the status returned by the Hikuyo Laser device</param>
            <returns>A string with the response to the sent command</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.sendCommand(System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Sends a command to the Hokuyo Laser device
            </summary>
            <param name="command">The command to send</param>
            <param name="param">The parameters to be sent with the command</param>
            <param name="status">When this method returns contains the status returned by the Hikuyo Laser device</param>
            <param name="sum">When this method returns contains the checksum returned by the Hikuyo Laser device</param>
            <returns>A string with the response to the sent command</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.sendCommand(System.String,System.String,System.String,System.Int32@,System.Int32@)">
            <summary>
            Sends a command to the Hokuyo Laser device
            </summary>
            <param name="command">The command to send</param>
            <param name="param">The parameters to be sent with the command</param>
            <param name="text">Aditional text to include with the command</param>
            <param name="status">When this method returns contains the status returned by the Hikuyo Laser device</param>
            <param name="sum">When this method returns contains the checksum returned by the Hikuyo Laser device</param>
            <returns>A string with the response to the sent command</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.SetComSpeed(Robotics.HAL.Sensors.Telemetric.HokuyoLaserComSpeed)">
            <summary>
            Sets the laser communication speed
            </summary>
            <param name="speed">Speed required</param>
            <returns>True if command executed correctly</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.spReadLine">
            <summary>
            Reads a line from the Hokuyo Laser Device
            </summary>
            <returns>The readed line</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.spReadLine(System.Int32)">
            <summary>
            Reads a line from the Hokuyo Laser Device
            </summary>
            <param name="timeOut">The number of milliseconds before a time-out occurs when the read operation does not finish</param>
            <returns>The readed line</returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Start">
            <summary>
            Starts to take asynchronous readings from the Hokuyo Laser
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Stop">
            <summary>
            Stops the Hokuyo Laser
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.VersionInformation">
            <summary>
            Gets the Hokuyo Laser device version information
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.ToString">
            <summary>
            Returns a string representation of the HokuyoLaser object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.serialPort_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Manages the serialPort.DataReceived event
            </summary>
            <param name="sender">The serial port</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.oDetectorLock">
            <summary>
            Variable used to lock laser detection
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.laserDevices">
            <summary>
            Stores the list of found Hokuyo USB lasers
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.GetOnPort(System.String)">
            <summary>
            Gets a HokuyoLaser (if attached) at the specified port
            </summary>
            <param name="portName">The port where the laser is attached</param>
            <returns>Null if device is not a laser or port not exist</returns>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.AbsoluteMaximumAngularStep">
            <summary>
            Gets the Absolute last step the device can reach.
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.AngularResolution">
            <summary>
            Gets the smallest angle change the device can detect or rotate. Returns 2Pi / 1024
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.AngularResolutionBits">
            <summary>
            Gets the angle resollution bits. Always returns 10
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.AngularStepZero">
            <summary>
            Step number on the sensor's front axis
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.IsOpen">
            <summary>
            Gets a value indicating the open or close status of the Laser port
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.LastReadings">
            <summary>
            Gets the last reading array obtained from the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.MaximumAngle">
            <summary>
            Gets the maximum angle in radians the sensor can detect measured from the front of the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.MaximumDistance">
            <summary>
            Gets the maximum distance the sensor can detect
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.MinimumDistance">
            <summary>
            Gets the minumim distance the sensor can detect
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.MinimumAngle">
            <summary>
            Gets the minumim angle in radians the sensor can detect measured from the front of the sensor
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.PortName">
            <summary>
            Gets the name of the port where the Hokuyo Laser is connected
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.Started">
            <summary>
            Gets a value indicating if the continous asynchronous read operation of the sensor has been started
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.StepsPerRevolution">
            <summary>
            Gets the number of steps in a complete revolution (360º or two pi radians).
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.ValidMinimumAngularStep">
            <summary>
            Gets the First Step of the Measurement Range 
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.ValidMaximumAngularStep">
            <summary>
            Gets the Last Step of the Measurement Range 
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.HokuyoLaser.FindUSBLasers">
            <summary>
            Retrieves all Hokuyo Lasers connected using emulated RS232 via USB interface
            </summary>
        </member>
        <member name="T:Robotics.HAL.RectSegment">
            <summary>
            A segment of rect defined by two points in the space
            </summary>
        </member>
        <member name="M:Robotics.HAL.RectSegment.Intersects(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of RectSegment intersects with another IIntersectable object
            </summary>
            <param name="other">IIntersectable object to check intersection with</param>
            <returns>true if there is intersection, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.RectSegment.Contains(Robotics.HAL.IIntersectable)">
            <summary>
            Checks if this instance of RectSegment contains the provided IIntersectable instance
            </summary>
            <param name="other">IIntersectable object to check contention with</param>
            <returns>true if the IIntersectable object provided is completely contained within, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.RectSegment.Contains(Robotics.HAL.IPositionable)">
            <summary>
            Checks if this instance of RectSegment contains the point provided by the IPositionable instance
            </summary>
            <param name="position">IPositionable object to check contention with</param>
            <returns>true if the IPositionable object provided is inside this instance, false otherwise</returns>
        </member>
        <member name="M:Robotics.HAL.RectSegment.Distance(Robotics.HAL.IPositionable)">
            <summary>
            Calculates the distance between the rect segment and a IPositionable object
            </summary>
            <param name="p">IPositionable object to calculate the distance to</param>
            <returns>Distance between the rect segment and IPositionable object</returns>
        </member>
        <member name="P:Robotics.HAL.RectSegment.Position">
            <summary>
            Gets or sets the position (centroid) of the rect segment
            </summary>
        </member>
        <member name="T:Robotics.HAL.Intersectable">
            <summary>
            Represents a physically well delimited object which can intersect or be contained in another IIntersectable objects
            </summary>
        </member>
        <member name="T:Robotics.Controls.TextBoxStreamWriter">
            <summary>
            Implements a TextWriter that dumps its contents to both a System.Windows.Forms.TexBox and a file
            </summary>
        </member>
        <member name="F:Robotics.Controls.TextBoxStreamWriter.defaultPriority">
            <summary>
            The default priority for messages
            </summary>
        </member>
        <member name="F:Robotics.Controls.TextBoxStreamWriter.textBoxVerbosityThreshold">
            <summary>
            The verbosity treshold for the TextBox console. Only messages with a priority equal or higher than the treshold will be shown
            </summary>
        </member>
        <member name="F:Robotics.Controls.TextBoxStreamWriter.logFileVerbosityThreshold">
            <summary>
            The verbosity treshold for the log file console. Only messages with a priority equal or higher than the treshold will be shown
            </summary>
        </member>
        <member name="F:Robotics.Controls.TextBoxStreamWriter.disposing">
            <summary>
            Gets a value indicating whether the component is being disposed
            </summary>
        </member>
        <member name="F:Robotics.Controls.TextBoxStreamWriter.disposed">
            <summary>
            Gets a value indicating whether the component is disposed
            </summary>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.#ctor(System.Windows.Forms.TextBox,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the TextBoxStreamWriter class
            </summary>
            <param name="output">The TextBox object to dump the contents to</param>
            <param name="logFile">The path of the file to which dump the contents to</param>
            <param name="maxLines">The maximum number of lines the output TextBox object will display</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.#ctor(System.Windows.Forms.TextBox,System.Int32)">
            <summary>
            Initializes a new instance of the TextBoxStreamWriter class
            </summary>
            <param name="output">The TextBox object to dump the contents to</param>
            <param name="maxLines">The maximum number of lines the output TextBox object will display</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.#ctor(System.Windows.Forms.TextBox)">
            <summary>
            Initializes a new instance of the TextBoxStreamWriter class
            </summary>
            <param name="output">The TextBox object to dump the contents to</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Finalize">
            <summary>
            Releases all resources used by the TextBoxStreamWriter object
            </summary>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The Boolean to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Char)">
            <summary>
            Writes a character to the stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The character to write to the text stream</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Char[])">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="buffer">The character array to write to the text stream</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="buffer">The character array to write to the text stream</param>
            <param name="index">The start index at which begin the write</param>
            <param name="count">The number of characters to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Decimal)">
            <summary>
            Writes the text representation of a decimal value to the text stream. 
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The decimal value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Double)">
            <summary>
            Writes the text representation of an 8-byte floating-point value to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The double value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point value to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The float value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The int value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The long value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.Object)">
            <summary>
            Writes the text representation of an object to the text stream by calling ToString on that object
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.String)">
            <summary>
            Writes a string to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The string value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The uint value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32,System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer to the text stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The ulong value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The Boolean to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Char)">
            <summary>
            Writes a character to the stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The character to write followed by a line terminator to the text stream.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Char[])">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="buffer">The character array to write followed by a line terminator to the text stream.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="buffer">The character array to write followed by a line terminator to the text stream.</param>
            <param name="index">The start index at which begin the write</param>
            <param name="count">The number of characters to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Decimal)">
            <summary>
            Writes the text representation of a decimal value followed by a line terminator to the text stream.. 
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The decimal value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Double)">
            <summary>
            Writes the text representation of an 8-byte floating-point value followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The double value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The float value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The int value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The long value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.Object)">
            <summary>
            Writes the text representation of an object followed by a line terminator to the text stream. by calling ToString on that object
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The string value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The uint value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32,System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="priority">The priority of the value to write</param>
            <param name="value">The ulong value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value to the text stream
            </summary>
            <param name="value">The Boolean to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream
            </summary>
            <param name="value">The character to write to the text stream</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="buffer">The character array to write to the text stream</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="buffer">The character array to write to the text stream</param>
            <param name="index">The start index at which begin the write</param>
            <param name="count">The number of characters to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Decimal)">
            <summary>
            Writes the text representation of a decimal value to the text stream. 
            </summary>
            <param name="value">The decimal value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Double)">
            <summary>
            Writes the text representation of an 8-byte floating-point value to the text stream
            </summary>
            <param name="value">The double value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point value to the text stream
            </summary>
            <param name="value">The float value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer to the text stream
            </summary>
            <param name="value">The int value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer to the text stream
            </summary>
            <param name="value">The long value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the text stream by calling ToString on that object
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream
            </summary>
            <param name="value">The string value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer to the text stream
            </summary>
            <param name="value">The uint value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Write(System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer to the text stream
            </summary>
            <param name="value">The ulong value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine">
            <summary>
            Writes a line terminator to the text stream
            </summary>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value followed by a line terminator to the text stream.
            </summary>
            <param name="value">The Boolean to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Char)">
            <summary>
            Writes a character to the stream
            </summary>
            <param name="value">The character to write followed by a line terminator to the text stream.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Char[])">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="buffer">The character array to write followed by a line terminator to the text stream.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a character array to the stream
            </summary>
            <param name="buffer">The character array to write followed by a line terminator to the text stream.</param>
            <param name="index">The start index at which begin the write</param>
            <param name="count">The number of characters to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Decimal)">
            <summary>
            Writes the text representation of a decimal value followed by a line terminator to the text stream.. 
            </summary>
            <param name="value">The decimal value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Double)">
            <summary>
            Writes the text representation of an 8-byte floating-point value followed by a line terminator to the text stream.
            </summary>
            <param name="value">The double value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text stream.
            </summary>
            <param name="value">The float value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The int value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The long value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object followed by a line terminator to the text stream. by calling ToString on that object
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">The string value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The uint value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.WriteLine(System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The ulong value to write</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device
            </summary>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Robotics.Controls.TextBoxStreamWriter.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the TextBoxStreamWriter object
            </summary>
        </member>
        <member name="F:Robotics.Controls.TextBoxStreamWriter.defaultLog">
            <summary>
            TextBoxStreamWriter with output to a file with the same name as the executable
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the Encoding in which the output is written
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.AppendDate">
            <summary>
            Gets or sets a value indicating if the date and time of write operation must be appended to the writed data
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.DefaultPriority">
            <summary>
            Gets or sets the default priority for messages
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.TextBoxVerbosityThreshold">
            <summary>
            Gets or sets the verbosity treshold for the TextBox console. Only messages with a priority equal or higher than the treshold will be shown
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.LogFileVerbosityThreshold">
            <summary>
            Gets or sets the verbosity treshold for the log file console. Only messages with a priority equal or higher than the treshold will be shown
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.Disposing">
            <summary>
            Gets a value indicating whether the component is being disposed
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.IsDisposed">
            <summary>
            Gets a value indicating whether the component is disposed
            </summary>
        </member>
        <member name="P:Robotics.Controls.TextBoxStreamWriter.DefaultLog">
            <summary>
            Gets a TextBoxStreamWriter with output to a file with the same name as the executable
            </summary>
        </member>
        <member name="T:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable">
            <summary>
            Gets access to an ARRAY OF INTEGERS variable stored in the Blackboard
            </summary>
        </member>
        <member name="F:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.SplitChars">
            <summary>
            Chars used to split strings
            </summary>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.#ctor(Robotics.API.CommandManager,System.String,System.Byte[],System.Boolean)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="commandManager">The CommandManager object used to communicate with the Blackboard</param>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <param name="initialize">Indicates if the shared variable will be automatically initialized if the commandManager is different from null</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.#ctor(System.String)">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of IntArraySharedVariable
            </summary>
            <param name="variableName">The name of the variable in the Blackboard</param>
            <param name="value">The value to store in the shared variable if it does not exist</param>
            <remarks>If there is no variable with the provided name in the blackboard, a new variable with the asociated name is created</remarks>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.Deserialize(System.String,System.Byte[]@)">
            <summary>
            Deserializes an array of integers from a string
            </summary>
            <param name="serializedData">String containing the serialized object</param>
            <param name="values">When this method returns contains the value stored in serializedData the deserialization succeeded, or zero if the deserialization failed. The deserialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or its content could not be parsed. This parameter is passed uninitialized</param>
            <returns>true if serializedData was deserialized successfully; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.Serialize(System.Byte[],System.String@)">
            <summary>
            Serializes the provided object to a string
            </summary>
            <param name="values">Object to be serialized</param>
            <param name="serializedData">When this method returns contains value serialized if the serialization succeeded, or zero if the serialization failed. The serialization fails if the serializedData parameter is a null reference (Nothing in Visual Basic) or outside the specification for the type. This parameter is passed uninitialized</param>
            <returns>true if value was serialized successfully; otherwise, false</returns>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.IsArray">
            <summary>
            Returns false
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.Length">
            <summary>
            Returns -1
            </summary>
        </member>
        <member name="P:Robotics.API.PrimitiveSharedVariables.ByteArraySharedVariable.TypeName">
            <summary>
            Returns "int"
            </summary>
        </member>
        <member name="T:System.Net.Sockets.SocketTcpServer">
            <summary>
            Implementa un Servidor TCP con soporte para multiples clientes
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.#ctor">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketTcpServer class
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of System.Net.Sockets.SocketTcpServer class
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.Finalize">
            <summary>
            Destructor closes all connections and release resources
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.IsConnected(System.Net.IPEndPoint)">
            <summary>
            Check if a client with the specified remote endpoint is connected to the server
            </summary>
            <param name="ep">The remote endpoint of the client</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.IsConnected(System.Net.IPAddress)">
            <summary>
            Check if a client with the specified IP address is connected to the server
            </summary>
            <param name="ip">The IP Address of the client</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendTo(System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Sends a specified number of bytes to the client with specified remote IPEndPoint
            </summary>
            <param name="destination">The client's IP address</param>
            <param name="buffer">The byte array to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendTo(System.Net.IPEndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to the client with specified remote IPEndPoint
            </summary>
            <param name="destination">The client's IP address</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendTo(System.Net.IPEndPoint,System.String)">
            <summary>
            Sends a specified number of bytes to the client with specified remote IPEndPoint
            </summary>
            <param name="destination">The client's IP address</param>
            <param name="s">The string to send to the output buffer</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendTo(System.Net.IPAddress,System.Byte[])">
            <summary>
            Sends a specified number of bytes to all the clients with specified IP adress
            </summary>
            <param name="destination">The client's IP address</param>
            <param name="buffer">The byte array to send</param>
            <returns>The number of clients to which the packet was sent</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendTo(System.Net.IPAddress,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to all the clients with specified IP adress
            </summary>
            <param name="destination">The client's IP address</param>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
            <returns>The number of clients to which the packet was sent</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendTo(System.Net.IPAddress,System.String)">
            <summary>
            Sends a specified number of bytes to all the clients with specified IP adress
            </summary>
            <param name="destination">The client's IP address</param>
            <param name="s">The string to send to the output buffer</param>
            <returns>The number of clients to which the packet was sent</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendToAll(System.Byte[])">
            <summary>
            Sends a specified number of bytes to all connected Clients
            </summary>
            <param name="buffer">The byte array to send</param>
            <returns>The number of clients to which the packet was sent</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendToAll(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sends a specified number of bytes to all connected Clients
            </summary>
            <param name="buffer">The byte array to send</param>
            <param name="offset">The offset in the buffer array to begin sending</param>
            <param name="count">The number of bytes to send</param>
            <returns>The number of clients to which the packet was sent</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.SendToAll(System.String)">
            <summary>
            Sends the specifiec string to all connected Clients
            </summary>
            <param name="s">The string to send to the output buffer</param>
            <returns>The number of clients to which the packet was sent</returns>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.Start">
            <summary>
            Starts the TCP server and begin to listen incomming connections
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.Start(System.Int32)">
            <summary>
            Starts the TCP server and begin to listen incomming connections
            </summary>
            <param name="port">Port to connect</param>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.Stop">
            <summary>
            Stop waiting for incoming connections and disconnect all connected clients
            </summary>
        </member>
        <member name="M:System.Net.Sockets.SocketTcpServer.dataReceived(System.IAsyncResult)">
            <summary>
            Manages the data received async callback
            </summary>
            <param name="result">Result of async operation</param>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServer.ClientsConnected">
            <summary>
            Gets the number of clients connected to the TCP Server.
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServer.Clients">
            <summary>
            Gets an array with the IP Addresses of the sockets connected to this TCP Server
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServer.ClientList">
            <summary>
            Gets a list containing the sockets connected to this TCP Server
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServer.Socket">
            <summary>
            Gets the underlying socket used for connection
            </summary>
        </member>
        <member name="P:System.Net.Sockets.SocketTcpServer.Started">
            <summary>
            Gets a value indicating if the Tcp server is running
            </summary>
        </member>
        <member name="E:System.Net.Sockets.SocketTcpServer.ClientConnected">
            <summary>
            Represents the method that will handle the client connected event of a SocketTcpServer object
            </summary>
        </member>
        <member name="E:System.Net.Sockets.SocketTcpServer.ClientDisconnected">
            <summary>
            Represents the method that will handle the client disconnected event of a SocketTcpServer object
            </summary>
        </member>
        <member name="T:Robotics.CircularBuffer`1">
            <summary>
            Implements a thread-safe circular buffer
            The CircularBuffer may be used as shared resource for Producer/Consumer processes
            </summary>
        </member>
        <member name="F:Robotics.CircularBuffer`1.bufferSize">
            <summary>
            Stores the size of the circular buffer
            </summary>
        </member>
        <member name="F:Robotics.CircularBuffer`1.buffer">
            <summary>
            Buffer used to store data
            </summary>
        </member>
        <member name="F:Robotics.CircularBuffer`1.elementCount">
            <summary>
            Stores the number of (active) elements in the buffer
            </summary>
        </member>
        <member name="F:Robotics.CircularBuffer`1.readIndex">
            <summary>
            Stores the index for read operations
            </summary>
        </member>
        <member name="F:Robotics.CircularBuffer`1.writeIndex">
            <summary>
            Stores the index for write operations
            </summary>
        </member>
        <member name="M:Robotics.CircularBuffer`1.#ctor">
            <summary>
            Creates a new instance of ProducerConsumerMonitor with an empty buffer of two elements
            </summary>
        </member>
        <member name="M:Robotics.CircularBuffer`1.#ctor(System.Int32)">
            <summary>
            Creates a new instance of ProducerConsumerMonitor with an empty buffer of two elements
            </summary>
            <param name="bufferSize">The size of the circular buffer</param>
        </member>
        <member name="M:Robotics.CircularBuffer`1.Put(`0)">
            <summary>
            Adds an element to the CircularBuffer
            </summary>
            <remarks>This method returns only when there is space availiable in the buffer to put in</remarks>
            <param name="value">Element to add</param>
        </member>
        <member name="M:Robotics.CircularBuffer`1.Take">
            <summary>
            Retrieves an element from the CircularBuffer
            </summary>
            <remarks>This method returns only when there is data availiable in the buffer to take from</remarks>
            <returns>Element retrieved</returns>
        </member>
        <member name="P:Robotics.CircularBuffer`1.BufferSize">
            <summary>
            Gets the size of the CircularBuffer
            </summary>
        </member>
        <member name="P:Robotics.CircularBuffer`1.Count">
            <summary>
            Gets the number of availiable in the CircularBuffer
            </summary>
        </member>
        <member name="T:Robotics.StateMachines.EnumeratedFunctionState`1">
            <summary>
            Encapsulates information to use a class method as a state of a state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.EnumeratedFunctionState`1.isAcceptState">
            <summary>
            Indicates if the state is an accept state of the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.EnumeratedFunctionState`1.stateFunction">
            <summary>
            SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.EnumeratedFunctionState`1.stateFunctionParameters">
            <summary>
            The parameters to be pased to the state function
            </summary>
        </member>
        <member name="F:Robotics.StateMachines.EnumeratedFunctionState`1.stateName">
            <summary>
            The zero-based index of the state
            </summary>
        </member>
        <member name="M:Robotics.StateMachines.EnumeratedFunctionState`1.#ctor(`0,Robotics.StateMachines.SMEnumeratedStateFuncion{`0})">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateName">The zero-based index of the state</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.EnumeratedFunctionState`1.#ctor(`0,Robotics.StateMachines.SMEnumeratedStateFuncion{`0},System.Boolean)">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateName">The zero-based index of the state</param>
            <param name="isAccept">Indicates if the state is an accept state of the state machine</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
        </member>
        <member name="M:Robotics.StateMachines.EnumeratedFunctionState`1.#ctor(`0,Robotics.StateMachines.SMEnumeratedStateFuncion{`0},System.Object)">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateName">The zero-based index of the state</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
            <param name="stateFunctionParameters">The parameters to be pased to the state function</param>
        </member>
        <member name="M:Robotics.StateMachines.EnumeratedFunctionState`1.#ctor(`0,Robotics.StateMachines.SMEnumeratedStateFuncion{`0},System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of FunctionState
            </summary>
            <param name="stateName">The zero-based index of the state</param>
            <param name="isAccept">Indicates if the state is an accept state of the state machine</param>
            <param name="stateFunction">SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine</param>
            <param name="stateFunctionParameters">The parameters to be pased to the state function</param>
        </member>
        <member name="M:Robotics.StateMachines.EnumeratedFunctionState`1.Execute">
            <summary>
            Executes the current state of the state machine
            </summary>
            <returns>The zero-based index of the next state to be executed</returns>
        </member>
        <member name="P:Robotics.StateMachines.EnumeratedFunctionState`1.IsAcceptState">
            <summary>
            Gets a value indicating if the state is an accept state of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.EnumeratedFunctionState`1.StateFunction">
            <summary>
            Gets the SMStateFuncion delegate which points to the method
            to be executed as state function of the state machine
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.EnumeratedFunctionState`1.StateFunctionParameters">
            <summary>
            Gets or sets the parameters to be pased to the state function
            </summary>
        </member>
        <member name="P:Robotics.StateMachines.EnumeratedFunctionState`1.StateName">
            <summary>
            Gets the name of the state
            </summary>
            <returns>The name the state</returns>
        </member>
        <member name="P:Robotics.StateMachines.EnumeratedFunctionState`1.StateNumber">
            <summary>
            Gets the zero-based index of the state
            </summary>
            <returns>The zero-based index of the state</returns>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.TelemetricSensorThresholdExceededEventHandler`1">
            <summary>
            Represents the method that will handle the ThresholdExceeded event of a TelemetricSensor object
            </summary>
            <param name="sensor">The TelemetricSensor object which rises the event</param>
        </member>
        <member name="T:Robotics.HAL.Sensors.HumanFace">
            <summary>
            Represents a human Face
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.MaximumPan">
            <summary>
            The maximum horizontal deviation angle of the centroid of the detected human face from the center of the image in radians
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.MaximumTilt">
            <summary>
            The maximum vertical deviation angle of the centroid of the detected human face from the center of the image in radians
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.MinimumPan">
            <summary>
            The maximum horizontal deviation angle of the centroid of the detected human face from the center of the image in radians
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.MinimumTilt">
            <summary>
            The minimum vertical deviation angle of the centroid of the detected human face from the center of the image in radians
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.name">
            <summary>
            The asociated name to the detected human face
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.pan">
            <summary>
            The horizontal deviation angle of the centroid of the detected human face from the center of the image
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.tilt">
            <summary>
            The vertical deviation angle of the centroid of the detected human face from the center of the image
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.confidence">
            <summary>
            Value between 0 and 1 that represents the confidence of the detected human face respect to its pattern
            </summary>
        </member>
        <member name="F:Robotics.HAL.Sensors.HumanFace.RxNameValidator">
            <summary>
            Regular expression used to validate names
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.HumanFace.#ctor">
            <summary>
            Initializes a new instance of HumanFace
            </summary>
        </member>
        <member name="M:Robotics.HAL.Sensors.HumanFace.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of HumanFace
            </summary>
            <param name="name">The asociated name to the detected human face</param>
            <param name="pan">The horizontal deviation angle of the centroid of the detected human face from the center of the image</param>
            <param name="tilt">The vertical deviation angle of the centroid of the detected human face from the center of the image</param>
            <param name="confidence">Value between 0 and 1 that represents the confidence of the detected human face respect to its pattern</param>
        </member>
        <member name="P:Robotics.HAL.Sensors.HumanFace.Name">
            <summary>
            Gets or sets the asociated name to the detected human face
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.HumanFace.Pan">
            <summary>
            Gets or sets the horizontal deviation angle of the centroid of the detected human face from the center of the image
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.HumanFace.Tilt">
            <summary>
            Gets or sets the vertical deviation angle of the centroid of the detected human face from the center of the image
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.HumanFace.Confidence">
            <summary>
            Gets or sets a value between 0 and 1 that represents the confidence of the detected human face respect to its pattern
            </summary>
        </member>
        <member name="T:Robotics.API.SharedVariableAddedRemovedEventHandler">
            <summary>
            Represents the method that will handle the SharedVariableAdded event and SharedVariableRemoved event of a SharedVariableList object
            </summary>
            <param name="List">The List which raises the event</param>
            <param name="variable">The SharedVariable object added to List</param>
        </member>
        <member name="T:Robotics.API.Parser">
            <summary>
            Provides methods for data parsing
            </summary>
        </member>
        <member name="M:Robotics.API.Parser.ParseSharedVariable(System.String,System.String@,System.Boolean@,System.Int32@,System.String@,System.String@)">
            <summary>
            Decodes the data contained in a received response. A return value indicates whether the operation succeeded
            </summary>
            <param name="s">string which contains the data to parse</param>
            <param name="variableType">When this method returns contains the type of the variable coded in the input string if the conversion succeeded, or null if the conversion failed.</param>
            <param name="isArray">When this method returns is set to true if the conversion succeded and the variable coded in the input string is an array, false otherwise.</param>
            <param name="arrayLength">When this method returns contains the size of the array if the conversion succeded and the variable coded in the input string is an array, -1 otherwise.</param>
            <param name="variableName">When this method returns contains the name of the variable coded in the input string if the conversion succeeded, or null if the conversion failed.</param>
            <param name="variableData">When this method returns contains the content of the variable coded in the input string if the conversion succeeded, or the null if the conversion failed.</param>
            <returns>true if the the data extraction succeeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.XtractSharedVariableData(System.String,System.Int32@,System.String@,System.String@,System.Boolean@,System.Int32@)">
            <summary>
            Extracts the type, name and data from a shared variable
            </summary>
            <param name="s">String from which the variable will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="varType">When this method returns contains the type of the variable found in s if the extraction succeded, or null if the extraction failed.</param>
            <param name="varName">When this method returns contains the name of the variable found in s if the extraction succeded, or null if the extraction failed.</param>
            <param name="isArray">When this method returns is set to true if a variable was found in s and it is an array, or false otherwise</param>
            <param name="arraySize">When this method returns contains the length of the array of the variable found in s if the extraction succeded and the variable is an array, or -1 otherwise</param>
            <returns>true if the extraction succeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.XtractSharedVariableData(System.String,System.Int32@,System.String@,System.String@,System.Boolean@,System.Int32@,System.String@)">
            <summary>
            Extracts the type, name and data from a shared variable
            </summary>
            <param name="s">String from which the variable will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="varType">When this method returns contains the type of the variable found in s if the extraction succeded, or null if the extraction failed.</param>
            <param name="varName">When this method returns contains the name of the variable found in s if the extraction succeded, or null if the extraction failed.</param>
            <param name="isArray">When this method returns is set to true if a variable was found in s and it is an array, or false otherwise</param>
            <param name="arraySize">When this method returns contains the length of the array of the variable found in s if the extraction succeded and the variable is an array, or -1 otherwise</param>
            <param name="data">When this method returns contains the data of the variable found in s if the extraction succeded, or null if the extraction failed.</param>
            <returns>true if the extraction succeded, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.XtractModuleName(System.String,System.Int32@,System.String@)">
            <summary>
            Extracts the first module name found inside a string
            </summary>
            <param name="s">String from which the module name will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="moduleName">When this method returns contains the first module name found in s if the extraction succeded, or null if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid module name was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.XtractCommandName(System.String,System.Int32@,System.String@)">
            <summary>
            Extracts the first command name found inside a string
            </summary>
            <param name="s">String from which the command name will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="commandName">When this method returns contains the first command name found in s if the extraction succeded, or null if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid command name was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.SkipSpaces(System.String,System.Int32@)">
            <summary>
            Advances the read header until no spaces are found
            </summary>
            <param name="s">Input string</param>
            <param name="cc">Read header</param>
        </member>
        <member name="M:Robotics.API.Parser.XtractCommandParams(System.String,System.Int32@,System.String@)">
            <summary>
            Extracts the first command parameters found inside a string
            </summary>
            <param name="s">String from which the command parameters will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="parameters">When this method returns contains the first command parameters found in s if the extraction succeded, or null if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid command parameters was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.XtractId(System.String,System.Int32@,System.Int32@)">
            <summary>
            Extracts the first @id found inside a string
            </summary>
            <param name="s">String from which the @id will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="id">When this method returns contains the id found in s if the extraction succeded, or -1 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid id was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.XtractIdentifier(System.String,System.Int32@,System.String@)">
            <summary>
            Extracts the first C-type identifier found inside a string
            </summary>
            <param name="s">String from which the identifier will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="identifier">When this method returns contains the first C-type identifier found in s if the extraction succeded, or null if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid C-type identifier was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="M:Robotics.API.Parser.XtractResult(System.String,System.Int32@,System.Int32@)">
            <summary>
            Extracts the first result (1 or 0) found inside a string
            </summary>
            <param name="s">String from which the result will be extracted</param>
            <param name="cc">The search starting position</param>
            <param name="result">When this method returns contains the result found in s if the extraction succeded, or -1 if the extraction failed.</param>
            <returns>True if the extraction succeded and a valid result was found in s starting at cc, false otherwise</returns>
        </member>
        <member name="T:Robotics.HAL.Sensors.Telemetric.DeviceInfo">
            <summary>
            Stores information about a Laser
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.DeviceInfo.Model">
            <summary>
            Returns the model of the component
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.DeviceInfo.FirmwareVersion">
            <summary>
            Returns the firware version of the component
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.DeviceInfo.ProductName">
            <summary>
            Returns the product name of the component
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.DeviceInfo.ProtocolVersion">
            <summary>
            Returns the protocol version used by the component
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.DeviceInfo.SerialNumber">
            <summary>
            Returns the component's serial number
            </summary>
        </member>
        <member name="P:Robotics.HAL.Sensors.Telemetric.DeviceInfo.VendorName">
            <summary>
            Returns the vendor name of the component
            </summary>
        </member>
        <member name="T:Robotics.API.CommandExecuterCollection">
            <summary>
            Represents a collection of CommandExecuter objects.
            </summary>
            <remarks>pending to implement multithread sync</remarks>
        </member>
        <member name="F:Robotics.API.CommandExecuterCollection.commandExecuterList">
            <summary>
            Stores the list of CommandExecuter sorted by the command name
            </summary>
        </member>
        <member name="F:Robotics.API.CommandExecuterCollection.commandManager">
            <summary>
            The CommandExecuter object to which this CommandExecuterCollection is bound to
            </summary>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.#ctor(Robotics.API.CommandManager)">
            <summary>
            Creates a new instance of CommandExecuterCollection
            <param name="commandManager"></param>
            </summary>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.Contains(System.String)">
            <summary>
            Determines whether an CommandExecuter is in the CommandExecuterCollection.
            </summary>
            <param name="commandName">The name of the command which represents the CommandExecuter to locate in the CommandExecuterCollection.</param>
            <returns>true if the command asociated is found in the CommandExecuterCollection; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the names of the entire CommandExecuterCollection to a compatible one-dimensional array, starting at the specified index of the target array
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the names of the elements copied from CommandExecuterCollection. The Array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.Remove(System.String)">
            <summary>
            Removes the specified CommandExecuter from the CommandExecuterCollection
            </summary>
            <param name="commandName">The mane of the CommandExecuter to remove from the CommandExecuterCollection. The value can be a null reference (Nothing in Visual Basic) for reference types</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List</returns>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.Add(Robotics.API.CommandExecuter)">
            <summary>
            Adds a CommandExecuter to the CommandExecuterCollection
            </summary>
            <param name="commandExecuter">The CommandExecuter to be added to the end of the CommandExecuterCollection.</param>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.Clear">
            <summary>
            Removes all elements from the CommandExecuterCollection
            </summary>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.Contains(Robotics.API.CommandExecuter)">
            <summary>
            Determines whether an CommandExecuter is in the CommandExecuterCollection.
            </summary>
            <param name="item">The object to locate in the CommandExecuterCollection.</param>
            <returns>true if item is found in the CommandExecuterCollection; otherwise, false</returns>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.CopyTo(Robotics.API.CommandExecuter[],System.Int32)">
            <summary>
            Copies the entire CommandExecuterCollection to a compatible one-dimensional array, starting at the specified index of the target array
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from CommandExecuterCollection. The Array must have zero-based indexing</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.Remove(Robotics.API.CommandExecuter)">
            <summary>
            Removes the specified CommandExecuter from the CommandExecuterCollection
            </summary>
            <param name="commandExecuter">The object to remove from the CommandExecuterCollection. The value can be a null reference (Nothing in Visual Basic) for reference types</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List</returns>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator&lt;T&gt; object that can be used to iterate through the collection</returns>
        </member>
        <member name="M:Robotics.API.CommandExecuterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection</returns>
        </member>
        <member name="P:Robotics.API.CommandExecuterCollection.Item(System.String)">
            <summary>
            Gets the CommandExecuter associated with the specified command name
            </summary>
            <param name="commandName">The name of the command managed by the CommandExecuter to get</param>
            <returns>The CommandExecuter associated with the specified command name. If the specified command name is not found returns null</returns>
        </member>
        <member name="P:Robotics.API.CommandExecuterCollection.CommandManager">
            <summary>
            Gets the CommandManager object to which this CommandExecuterCollection is bound to
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuterCollection.CommandExecuterList">
            <summary>
            Gets the list of CommandExecuter sorted by the command name
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuterCollection.Count">
            <summary>
            Gets the number of elements actually contained in the CommandExecuterCollection.
            </summary>
        </member>
        <member name="P:Robotics.API.CommandExecuterCollection.IsReadOnly">
            <summary>
            This property always returns false
            </summary>
        </member>
    </members>
</doc>
